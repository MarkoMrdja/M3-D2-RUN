
M3-D2-RUN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089ac  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08008b48  08008b48  00018b48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009160  08009160  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08009160  08009160  00019160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009168  08009168  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08009170  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000080  080091f0  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  080091f0  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e69e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ded  00000000  00000000  0002e74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb0  00000000  00000000  00030540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  000311f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ad0  00000000  00000000  00031de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe2e  00000000  00000000  000488b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ce01  00000000  00000000  000586e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e54e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be8  00000000  00000000  000e5538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008b2c 	.word	0x08008b2c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08008b2c 	.word	0x08008b2c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b974 	b.w	8000ea0 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468e      	mov	lr, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14d      	bne.n	8000c7a <__udivmoddi4+0xaa>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4694      	mov	ip, r2
 8000be2:	d969      	bls.n	8000cb8 <__udivmoddi4+0xe8>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b152      	cbz	r2, 8000c00 <__udivmoddi4+0x30>
 8000bea:	fa01 f302 	lsl.w	r3, r1, r2
 8000bee:	f1c2 0120 	rsb	r1, r2, #32
 8000bf2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfa:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfe:	4094      	lsls	r4, r2
 8000c00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c04:	0c21      	lsrs	r1, r4, #16
 8000c06:	fbbe f6f8 	udiv	r6, lr, r8
 8000c0a:	fa1f f78c 	uxth.w	r7, ip
 8000c0e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c12:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c16:	fb06 f107 	mul.w	r1, r6, r7
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	d90a      	bls.n	8000c34 <__udivmoddi4+0x64>
 8000c1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 811f 	bcs.w	8000e68 <__udivmoddi4+0x298>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 811c 	bls.w	8000e68 <__udivmoddi4+0x298>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 f707 	mul.w	r7, r0, r7
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x92>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	f080 810a 	bcs.w	8000e6c <__udivmoddi4+0x29c>
 8000c58:	42a7      	cmp	r7, r4
 8000c5a:	f240 8107 	bls.w	8000e6c <__udivmoddi4+0x29c>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c66:	1be4      	subs	r4, r4, r7
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa4>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d909      	bls.n	8000c92 <__udivmoddi4+0xc2>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	f000 80ef 	beq.w	8000e62 <__udivmoddi4+0x292>
 8000c84:	2600      	movs	r6, #0
 8000c86:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	fab3 f683 	clz	r6, r3
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d14a      	bne.n	8000d30 <__udivmoddi4+0x160>
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xd4>
 8000c9e:	4282      	cmp	r2, r0
 8000ca0:	f200 80f9 	bhi.w	8000e96 <__udivmoddi4+0x2c6>
 8000ca4:	1a84      	subs	r4, r0, r2
 8000ca6:	eb61 0303 	sbc.w	r3, r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	469e      	mov	lr, r3
 8000cae:	2d00      	cmp	r5, #0
 8000cb0:	d0e0      	beq.n	8000c74 <__udivmoddi4+0xa4>
 8000cb2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb6:	e7dd      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000cb8:	b902      	cbnz	r2, 8000cbc <__udivmoddi4+0xec>
 8000cba:	deff      	udf	#255	; 0xff
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f040 8092 	bne.w	8000dea <__udivmoddi4+0x21a>
 8000cc6:	eba1 010c 	sub.w	r1, r1, ip
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2601      	movs	r6, #1
 8000cd4:	0c20      	lsrs	r0, r4, #16
 8000cd6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cda:	fb07 1113 	mls	r1, r7, r3, r1
 8000cde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce2:	fb0e f003 	mul.w	r0, lr, r3
 8000ce6:	4288      	cmp	r0, r1
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x12c>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x12a>
 8000cf4:	4288      	cmp	r0, r1
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2c0>
 8000cfa:	4643      	mov	r3, r8
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1110 	mls	r1, r7, r0, r1
 8000d08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x156>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x154>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d24:	4608      	mov	r0, r1
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2e:	e79c      	b.n	8000c6a <__udivmoddi4+0x9a>
 8000d30:	f1c6 0720 	rsb	r7, r6, #32
 8000d34:	40b3      	lsls	r3, r6
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d42:	fa01 f306 	lsl.w	r3, r1, r6
 8000d46:	431c      	orrs	r4, r3
 8000d48:	40f9      	lsrs	r1, r7
 8000d4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d56:	0c20      	lsrs	r0, r4, #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d64:	fb08 f00e 	mul.w	r0, r8, lr
 8000d68:	4288      	cmp	r0, r1
 8000d6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b8>
 8000d70:	eb1c 0101 	adds.w	r1, ip, r1
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2bc>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2bc>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	1a09      	subs	r1, r1, r0
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d90:	fb09 1110 	mls	r1, r9, r0, r1
 8000d94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d9c:	458e      	cmp	lr, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1e2>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000daa:	458e      	cmp	lr, r1
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dba:	eba1 010e 	sub.w	r1, r1, lr
 8000dbe:	42a1      	cmp	r1, r4
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46a6      	mov	lr, r4
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x2a4>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x2a0>
 8000dc8:	b15d      	cbz	r5, 8000de2 <__udivmoddi4+0x212>
 8000dca:	ebb3 0208 	subs.w	r2, r3, r8
 8000dce:	eb61 010e 	sbc.w	r1, r1, lr
 8000dd2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dda:	40f1      	lsrs	r1, r6
 8000ddc:	431f      	orrs	r7, r3
 8000dde:	e9c5 7100 	strd	r7, r1, [r5]
 8000de2:	2600      	movs	r6, #0
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	f1c2 0320 	rsb	r3, r2, #32
 8000dee:	40d8      	lsrs	r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa21 f303 	lsr.w	r3, r1, r3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	4301      	orrs	r1, r0
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e08:	fb07 3610 	mls	r6, r7, r0, r3
 8000e0c:	0c0b      	lsrs	r3, r1, #16
 8000e0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e12:	fb00 f60e 	mul.w	r6, r0, lr
 8000e16:	429e      	cmp	r6, r3
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x260>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000e28:	429e      	cmp	r6, r3
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1b9b      	subs	r3, r3, r6
 8000e32:	b289      	uxth	r1, r1
 8000e34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e38:	fb07 3316 	mls	r3, r7, r6, r3
 8000e3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e40:	fb06 f30e 	mul.w	r3, r6, lr
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x28a>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2b0>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2b0>
 8000e56:	3e02      	subs	r6, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0x104>
 8000e62:	462e      	mov	r6, r5
 8000e64:	4628      	mov	r0, r5
 8000e66:	e705      	b.n	8000c74 <__udivmoddi4+0xa4>
 8000e68:	4606      	mov	r6, r0
 8000e6a:	e6e3      	b.n	8000c34 <__udivmoddi4+0x64>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6f8      	b.n	8000c62 <__udivmoddi4+0x92>
 8000e70:	454b      	cmp	r3, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f8>
 8000e80:	4646      	mov	r6, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x28a>
 8000e84:	4620      	mov	r0, r4
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1e2>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b8>
 8000e90:	3b02      	subs	r3, #2
 8000e92:	4461      	add	r1, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x12c>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e709      	b.n	8000cae <__udivmoddi4+0xde>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x156>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <read_cnt_tim4>:
	} else {
		return false;
	}
}

uint16_t read_cnt_tim4(void) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	return TIM4->CNT;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <read_cnt_tim4+0x14>)
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	b29b      	uxth	r3, r3
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40000800 	.word	0x40000800

08000ebc <read_cnt_tim3>:
uint16_t read_cnt_tim3(void) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	return TIM3->CNT;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <read_cnt_tim3+0x14>)
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	b29b      	uxth	r3, r3
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	40000400 	.word	0x40000400
 8000ed4:	00000000 	.word	0x00000000

08000ed8 <sens_robot>:
 -((0xFFFF - encoder1_cnt) + encoder1_prev_cnt);
 }
 }
 */
//Funkcija za ocitavanje stanja robota - x,y,teta
void sens_robot(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
	//LEVI
	//Ocitati inkremenata sa enkodera - pasivni tockovi


	inc_levog_pasivnog = (int32_t)read_cnt_tim4();
 8000ede:	f7ff ffe1 	bl	8000ea4 <read_cnt_tim4>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b90      	ldr	r3, [pc, #576]	; (8001128 <sens_robot+0x250>)
 8000ee8:	801a      	strh	r2, [r3, #0]
	inc_desnog_pasivnog = (int32_t)read_cnt_tim3();
 8000eea:	f7ff ffe7 	bl	8000ebc <read_cnt_tim3>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b8e      	ldr	r3, [pc, #568]	; (800112c <sens_robot+0x254>)
 8000ef4:	801a      	strh	r2, [r3, #0]

	TIM4->CNT=0;
 8000ef6:	4b8e      	ldr	r3, [pc, #568]	; (8001130 <sens_robot+0x258>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT=0;
 8000efc:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <sens_robot+0x25c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24

	//levi = (int32_t)read_cnt_tim4();
	//desni = (int32_t)read_cnt_tim3();

	pre_inc_levog_pasivnog += inc_levog_pasivnog;
 8000f02:	4b8d      	ldr	r3, [pc, #564]	; (8001138 <sens_robot+0x260>)
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b87      	ldr	r3, [pc, #540]	; (8001128 <sens_robot+0x250>)
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	b21a      	sxth	r2, r3
 8000f14:	4b88      	ldr	r3, [pc, #544]	; (8001138 <sens_robot+0x260>)
 8000f16:	801a      	strh	r2, [r3, #0]
	pre_inc_desnog_pasivnog += inc_desnog_pasivnog;
 8000f18:	4b88      	ldr	r3, [pc, #544]	; (800113c <sens_robot+0x264>)
 8000f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b82      	ldr	r3, [pc, #520]	; (800112c <sens_robot+0x254>)
 8000f22:	881b      	ldrh	r3, [r3, #0]
 8000f24:	4413      	add	r3, r2
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	4b84      	ldr	r3, [pc, #528]	; (800113c <sens_robot+0x264>)
 8000f2c:	801a      	strh	r2, [r3, #0]


	brzina_levog_pasivnog = 0;
 8000f2e:	4b84      	ldr	r3, [pc, #528]	; (8001140 <sens_robot+0x268>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
	brzina_desnog_pasivnog = 0;
 8000f34:	4b83      	ldr	r3, [pc, #524]	; (8001144 <sens_robot+0x26c>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
		}

	pre_inc_levog_pasivnog = inc_levog_pasivnog;
	pre_inc_desnog_pasivnog = inc_desnog_pasivnog;
*/
	brzina_levog_pasivnog=(int16_t)inc_levog_pasivnog;
 8000f3a:	4b7b      	ldr	r3, [pc, #492]	; (8001128 <sens_robot+0x250>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	b21b      	sxth	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b7f      	ldr	r3, [pc, #508]	; (8001140 <sens_robot+0x268>)
 8000f44:	601a      	str	r2, [r3, #0]
	brzina_desnog_pasivnog=(int16_t)inc_desnog_pasivnog;
 8000f46:	4b79      	ldr	r3, [pc, #484]	; (800112c <sens_robot+0x254>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	b21b      	sxth	r3, r3
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b7d      	ldr	r3, [pc, #500]	; (8001144 <sens_robot+0x26c>)
 8000f50:	601a      	str	r2, [r3, #0]

	float brzina_enkodera1 =  0.0255024303*(float)brzina_levog_pasivnog;
 8000f52:	4b7b      	ldr	r3, [pc, #492]	; (8001140 <sens_robot+0x268>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	ee07 3a90 	vmov	s15, r3
 8000f5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f5e:	ee17 0a90 	vmov	r0, s15
 8000f62:	f7ff fa9d 	bl	80004a0 <__aeabi_f2d>
 8000f66:	a368      	add	r3, pc, #416	; (adr r3, 8001108 <sens_robot+0x230>)
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f7ff faf0 	bl	8000550 <__aeabi_dmul>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	4610      	mov	r0, r2
 8000f76:	4619      	mov	r1, r3
 8000f78:	f7ff fdc2 	bl	8000b00 <__aeabi_d2f>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60fb      	str	r3, [r7, #12]
	float brzina_enkodera2 =  0.0255024303*(float)brzina_desnog_pasivnog;
 8000f80:	4b70      	ldr	r3, [pc, #448]	; (8001144 <sens_robot+0x26c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	ee07 3a90 	vmov	s15, r3
 8000f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f8c:	ee17 0a90 	vmov	r0, s15
 8000f90:	f7ff fa86 	bl	80004a0 <__aeabi_f2d>
 8000f94:	a35c      	add	r3, pc, #368	; (adr r3, 8001108 <sens_robot+0x230>)
 8000f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9a:	f7ff fad9 	bl	8000550 <__aeabi_dmul>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f7ff fdab 	bl	8000b00 <__aeabi_d2f>
 8000faa:	4603      	mov	r3, r0
 8000fac:	60bb      	str	r3, [r7, #8]
	//float brzina_enkodera1 =  koverzija_inkremenata_u_milimetre(inc_levog_pasivnog);
	//float brzina_enkodera2 =  koverzija_inkremenata_u_milimetre(inc_desnog_pasivnog);


	float temp1 = (brzina_enkodera1 + brzina_enkodera2);
 8000fae:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fba:	edc7 7a01 	vstr	s15, [r7, #4]
	float temp2 = (brzina_enkodera1 - brzina_enkodera2);
 8000fbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fca:	edc7 7a00 	vstr	s15, [r7]

	 // R = (temp1/temp2)*d;
	  omega = temp2 / rastojanje_pasivnih;
 8000fce:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001148 <sens_robot+0x270>
 8000fd2:	edd7 7a00 	vldr	s15, [r7]
 8000fd6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fda:	ee16 0a90 	vmov	r0, s13
 8000fde:	f7ff fa5f 	bl	80004a0 <__aeabi_f2d>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4959      	ldr	r1, [pc, #356]	; (800114c <sens_robot+0x274>)
 8000fe8:	e9c1 2300 	strd	r2, r3, [r1]

	  teta += omega; // orijentacija robota
 8000fec:	4b57      	ldr	r3, [pc, #348]	; (800114c <sens_robot+0x274>)
 8000fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff2:	4b57      	ldr	r3, [pc, #348]	; (8001150 <sens_robot+0x278>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff f8f4 	bl	80001e4 <__adddf3>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4953      	ldr	r1, [pc, #332]	; (8001150 <sens_robot+0x278>)
 8001002:	e9c1 2300 	strd	r2, r3, [r1]

	  if(teta>M_PI)
 8001006:	4b52      	ldr	r3, [pc, #328]	; (8001150 <sens_robot+0x278>)
 8001008:	e9d3 0100 	ldrd	r0, r1, [r3]
 800100c:	a340      	add	r3, pc, #256	; (adr r3, 8001110 <sens_robot+0x238>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	f7ff fd2d 	bl	8000a70 <__aeabi_dcmpgt>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00c      	beq.n	8001036 <sens_robot+0x15e>
	  		  teta -=2*M_PI;
 800101c:	4b4c      	ldr	r3, [pc, #304]	; (8001150 <sens_robot+0x278>)
 800101e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001022:	a33d      	add	r3, pc, #244	; (adr r3, 8001118 <sens_robot+0x240>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff f8da 	bl	80001e0 <__aeabi_dsub>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4947      	ldr	r1, [pc, #284]	; (8001150 <sens_robot+0x278>)
 8001032:	e9c1 2300 	strd	r2, r3, [r1]
	  if(teta<-M_PI)
 8001036:	4b46      	ldr	r3, [pc, #280]	; (8001150 <sens_robot+0x278>)
 8001038:	e9d3 0100 	ldrd	r0, r1, [r3]
 800103c:	a338      	add	r3, pc, #224	; (adr r3, 8001120 <sens_robot+0x248>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff fcf7 	bl	8000a34 <__aeabi_dcmplt>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00c      	beq.n	8001066 <sens_robot+0x18e>
	  		  teta +=2*M_PI;
 800104c:	4b40      	ldr	r3, [pc, #256]	; (8001150 <sens_robot+0x278>)
 800104e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001052:	a331      	add	r3, pc, #196	; (adr r3, 8001118 <sens_robot+0x240>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff f8c4 	bl	80001e4 <__adddf3>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	493b      	ldr	r1, [pc, #236]	; (8001150 <sens_robot+0x278>)
 8001062:	e9c1 2300 	strd	r2, r3, [r1]
	  brzina = temp1 / 2;
 8001066:	edd7 7a01 	vldr	s15, [r7, #4]
 800106a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800106e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001072:	ee16 0a90 	vmov	r0, s13
 8001076:	f7ff fa13 	bl	80004a0 <__aeabi_f2d>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4935      	ldr	r1, [pc, #212]	; (8001154 <sens_robot+0x27c>)
 8001080:	e9c1 2300 	strd	r2, r3, [r1]

	  x += brzina * cos(teta); //x
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <sens_robot+0x278>)
 8001086:	ed93 7b00 	vldr	d7, [r3]
 800108a:	eeb0 0a47 	vmov.f32	s0, s14
 800108e:	eef0 0a67 	vmov.f32	s1, s15
 8001092:	f005 fcb5 	bl	8006a00 <cos>
 8001096:	ec51 0b10 	vmov	r0, r1, d0
 800109a:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <sens_robot+0x27c>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fa56 	bl	8000550 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <sens_robot+0x280>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	f7ff f897 	bl	80001e4 <__adddf3>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4927      	ldr	r1, [pc, #156]	; (8001158 <sens_robot+0x280>)
 80010bc:	e9c1 2300 	strd	r2, r3, [r1]
	  y += brzina * sin(teta); //y
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <sens_robot+0x278>)
 80010c2:	ed93 7b00 	vldr	d7, [r3]
 80010c6:	eeb0 0a47 	vmov.f32	s0, s14
 80010ca:	eef0 0a67 	vmov.f32	s1, s15
 80010ce:	f005 fceb 	bl	8006aa8 <sin>
 80010d2:	ec51 0b10 	vmov	r0, r1, d0
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <sens_robot+0x27c>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	f7ff fa38 	bl	8000550 <__aeabi_dmul>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <sens_robot+0x284>)
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f7ff f879 	bl	80001e4 <__adddf3>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4919      	ldr	r1, [pc, #100]	; (800115c <sens_robot+0x284>)
 80010f8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	f3af 8000 	nop.w
 8001108:	206d9683 	.word	0x206d9683
 800110c:	3f9a1d4f 	.word	0x3f9a1d4f
 8001110:	54442d18 	.word	0x54442d18
 8001114:	400921fb 	.word	0x400921fb
 8001118:	54442d18 	.word	0x54442d18
 800111c:	401921fb 	.word	0x401921fb
 8001120:	54442d18 	.word	0x54442d18
 8001124:	c00921fb 	.word	0xc00921fb
 8001128:	200000a4 	.word	0x200000a4
 800112c:	200000a8 	.word	0x200000a8
 8001130:	40000800 	.word	0x40000800
 8001134:	40000400 	.word	0x40000400
 8001138:	200000a6 	.word	0x200000a6
 800113c:	200000aa 	.word	0x200000aa
 8001140:	2000009c 	.word	0x2000009c
 8001144:	200000a0 	.word	0x200000a0
 8001148:	43850000 	.word	0x43850000
 800114c:	200000b0 	.word	0x200000b0
 8001150:	200000c0 	.word	0x200000c0
 8001154:	200000b8 	.word	0x200000b8
 8001158:	200000c8 	.word	0x200000c8
 800115c:	200000d0 	.word	0x200000d0

08001160 <pid_init>:
void faktor_ispune_t1_smer2(float upravljanje);
void faktor_ispune_t2_smer1(float upravljanje);
void faktor_ispune_t2_smer2(float upravljanje);


void pid_init(void) {
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

	Kp_teta = 40; //32
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <pid_init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <pid_init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
	Ki_teta = 0.15; //0.1
 800116a:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <pid_init+0x54>)
 800116c:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <pid_init+0x58>)
 800116e:	601a      	str	r2, [r3, #0]
	Kd_teta = 23000; //21k
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <pid_init+0x5c>)
 8001172:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <pid_init+0x60>)
 8001174:	601a      	str	r2, [r3, #0]

	Kpd = 35; //40
 8001176:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <pid_init+0x64>)
 8001178:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <pid_init+0x68>)
 800117a:	601a      	str	r2, [r3, #0]
	Kid = 0.13; //	0.15
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <pid_init+0x6c>)
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <pid_init+0x70>)
 8001180:	601a      	str	r2, [r3, #0]
	Kdd = 22000; //25k
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <pid_init+0x74>)
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <pid_init+0x78>)
 8001186:	601a      	str	r2, [r3, #0]

	d_ei_max = 110;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <pid_init+0x7c>)
 800118a:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <pid_init+0x80>)
 800118c:	601a      	str	r2, [r3, #0]
	d_ei_min = -110;
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <pid_init+0x84>)
 8001190:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <pid_init+0x88>)
 8001192:	601a      	str	r2, [r3, #0]


	teta_ei_max = 130; //140
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <pid_init+0x8c>)
 8001196:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <pid_init+0x90>)
 8001198:	601a      	str	r2, [r3, #0]
	teta_ei_min = -130;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <pid_init+0x94>)
 800119c:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <pid_init+0x98>)
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200000e4 	.word	0x200000e4
 80011b0:	42200000 	.word	0x42200000
 80011b4:	200000e8 	.word	0x200000e8
 80011b8:	3e19999a 	.word	0x3e19999a
 80011bc:	200000ec 	.word	0x200000ec
 80011c0:	46b3b000 	.word	0x46b3b000
 80011c4:	200000d8 	.word	0x200000d8
 80011c8:	420c0000 	.word	0x420c0000
 80011cc:	200000dc 	.word	0x200000dc
 80011d0:	3e051eb8 	.word	0x3e051eb8
 80011d4:	200000e0 	.word	0x200000e0
 80011d8:	46abe000 	.word	0x46abe000
 80011dc:	20000108 	.word	0x20000108
 80011e0:	42dc0000 	.word	0x42dc0000
 80011e4:	2000010c 	.word	0x2000010c
 80011e8:	c2dc0000 	.word	0xc2dc0000
 80011ec:	20000100 	.word	0x20000100
 80011f0:	43020000 	.word	0x43020000
 80011f4:	20000104 	.word	0x20000104
 80011f8:	c3020000 	.word	0xc3020000

080011fc <medju_stanje>:
	TIM1->CCR1 = 0;
	TIM1->CCR2 = upravljanje;
	TIM1->CCR3 = upravljanje;
	TIM1->CCR4 = 0;
}
void medju_stanje(void) {
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <medju_stanje+0x1c>)
 8001202:	2200      	movs	r2, #0
 8001204:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR3 = 0;
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <medju_stanje+0x1c>)
 8001208:	2200      	movs	r2, #0
 800120a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40010000 	.word	0x40010000

0800121c <faktor_ispune_t1_smer1>:
void faktor_ispune_t1_smer1(float upravljanje) {
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	ed87 0a01 	vstr	s0, [r7, #4]
	TIM1->CCR1 = (42 * upravljanje - 1);
 8001226:	edd7 7a01 	vldr	s15, [r7, #4]
 800122a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800126c <faktor_ispune_t1_smer1+0x50>
 800122e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001232:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001236:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <faktor_ispune_t1_smer1+0x54>)
 800123c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001240:	ee17 2a90 	vmov	r2, s15
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOB->ODR |= (0b1 << 0);
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <faktor_ispune_t1_smer1+0x58>)
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <faktor_ispune_t1_smer1+0x58>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~(0b1 << 3);
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <faktor_ispune_t1_smer1+0x58>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	4a07      	ldr	r2, [pc, #28]	; (8001274 <faktor_ispune_t1_smer1+0x58>)
 8001258:	f023 0308 	bic.w	r3, r3, #8
 800125c:	6153      	str	r3, [r2, #20]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	42280000 	.word	0x42280000
 8001270:	40010000 	.word	0x40010000
 8001274:	40020400 	.word	0x40020400

08001278 <faktor_ispune_t1_smer2>:
void faktor_ispune_t1_smer2(float upravljanje) {
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	ed87 0a01 	vstr	s0, [r7, #4]
	TIM1->CCR1 = (42 * upravljanje - 1);
 8001282:	edd7 7a01 	vldr	s15, [r7, #4]
 8001286:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80012c8 <faktor_ispune_t1_smer2+0x50>
 800128a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <faktor_ispune_t1_smer2+0x54>)
 8001298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800129c:	ee17 2a90 	vmov	r2, s15
 80012a0:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOB->ODR |= (0b1 << 3);
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <faktor_ispune_t1_smer2+0x58>)
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <faktor_ispune_t1_smer2+0x58>)
 80012a8:	f043 0308 	orr.w	r3, r3, #8
 80012ac:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~(0b1 << 0);
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <faktor_ispune_t1_smer2+0x58>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <faktor_ispune_t1_smer2+0x58>)
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	6153      	str	r3, [r2, #20]
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	42280000 	.word	0x42280000
 80012cc:	40010000 	.word	0x40010000
 80012d0:	40020400 	.word	0x40020400

080012d4 <faktor_ispune_t2_smer2>:
void faktor_ispune_t2_smer2(float upravljanje) {
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	ed87 0a01 	vstr	s0, [r7, #4]
	TIM1->CCR3 = (42 * upravljanje - 1);
 80012de:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001324 <faktor_ispune_t2_smer2+0x50>
 80012e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <faktor_ispune_t2_smer2+0x54>)
 80012f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f8:	ee17 2a90 	vmov	r2, s15
 80012fc:	63da      	str	r2, [r3, #60]	; 0x3c
	GPIOB->ODR |= (0b1 << 4);
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <faktor_ispune_t2_smer2+0x58>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <faktor_ispune_t2_smer2+0x58>)
 8001304:	f043 0310 	orr.w	r3, r3, #16
 8001308:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~(0b1 << 5);
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <faktor_ispune_t2_smer2+0x58>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	4a07      	ldr	r2, [pc, #28]	; (800132c <faktor_ispune_t2_smer2+0x58>)
 8001310:	f023 0320 	bic.w	r3, r3, #32
 8001314:	6153      	str	r3, [r2, #20]
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	42280000 	.word	0x42280000
 8001328:	40010000 	.word	0x40010000
 800132c:	40020400 	.word	0x40020400

08001330 <faktor_ispune_t2_smer1>:

void faktor_ispune_t2_smer1(float upravljanje) {
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	ed87 0a01 	vstr	s0, [r7, #4]
	TIM1->CCR3 = (42 * upravljanje - 1);
 800133a:	edd7 7a01 	vldr	s15, [r7, #4]
 800133e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001380 <faktor_ispune_t2_smer1+0x50>
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800134a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <faktor_ispune_t2_smer1+0x54>)
 8001350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001354:	ee17 2a90 	vmov	r2, s15
 8001358:	63da      	str	r2, [r3, #60]	; 0x3c
	GPIOB->ODR |= (0b1 << 5);
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <faktor_ispune_t2_smer1+0x58>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <faktor_ispune_t2_smer1+0x58>)
 8001360:	f043 0320 	orr.w	r3, r3, #32
 8001364:	6153      	str	r3, [r2, #20]
	GPIOB->ODR &= ~(0b1 << 4);
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <faktor_ispune_t2_smer1+0x58>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	4a07      	ldr	r2, [pc, #28]	; (8001388 <faktor_ispune_t2_smer1+0x58>)
 800136c:	f023 0310 	bic.w	r3, r3, #16
 8001370:	6153      	str	r3, [r2, #20]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	42280000 	.word	0x42280000
 8001384:	40010000 	.word	0x40010000
 8001388:	40020400 	.word	0x40020400
 800138c:	00000000 	.word	0x00000000

08001390 <regulacija>:
	else {
		prom2 = 15;
	}
}

void regulacija(void) {
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	ed2d 8b02 	vpush	{d8}
 8001396:	af00      	add	r7, sp, #0
	if(kreni == 1){
 8001398:	4b97      	ldr	r3, [pc, #604]	; (80015f8 <regulacija+0x268>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b01      	cmp	r3, #1
 800139e:	f041 81a9 	bne.w	80026f4 <regulacija+0x1364>

	if (faza == 0) {          /////////////////////////faza0
 80013a2:	4b96      	ldr	r3, [pc, #600]	; (80015fc <regulacija+0x26c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f040 81e0 	bne.w	800176e <regulacija+0x3de>

		x_e = x_d - (float)x;  //greska x, zadato - trenutno
 80013ae:	4b94      	ldr	r3, [pc, #592]	; (8001600 <regulacija+0x270>)
 80013b0:	ed93 8a00 	vldr	s16, [r3]
 80013b4:	4b93      	ldr	r3, [pc, #588]	; (8001604 <regulacija+0x274>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fb9f 	bl	8000b00 <__aeabi_d2f>
 80013c2:	ee07 0a90 	vmov	s15, r0
 80013c6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80013ca:	4b8f      	ldr	r3, [pc, #572]	; (8001608 <regulacija+0x278>)
 80013cc:	edc3 7a00 	vstr	s15, [r3]
		y_e = y_d - (float)y;
 80013d0:	4b8e      	ldr	r3, [pc, #568]	; (800160c <regulacija+0x27c>)
 80013d2:	ed93 8a00 	vldr	s16, [r3]
 80013d6:	4b8e      	ldr	r3, [pc, #568]	; (8001610 <regulacija+0x280>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fb8e 	bl	8000b00 <__aeabi_d2f>
 80013e4:	ee07 0a90 	vmov	s15, r0
 80013e8:	ee78 7a67 	vsub.f32	s15, s16, s15
 80013ec:	4b89      	ldr	r3, [pc, #548]	; (8001614 <regulacija+0x284>)
 80013ee:	edc3 7a00 	vstr	s15, [r3]

		x_el = x_e*cosf((float)teta) + y_e*sinf((float)teta);
 80013f2:	4b89      	ldr	r3, [pc, #548]	; (8001618 <regulacija+0x288>)
 80013f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f8:	4610      	mov	r0, r2
 80013fa:	4619      	mov	r1, r3
 80013fc:	f7ff fb80 	bl	8000b00 <__aeabi_d2f>
 8001400:	4603      	mov	r3, r0
 8001402:	ee00 3a10 	vmov	s0, r3
 8001406:	f005 fba7 	bl	8006b58 <cosf>
 800140a:	eeb0 7a40 	vmov.f32	s14, s0
 800140e:	4b7e      	ldr	r3, [pc, #504]	; (8001608 <regulacija+0x278>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001418:	4b7f      	ldr	r3, [pc, #508]	; (8001618 <regulacija+0x288>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fb6d 	bl	8000b00 <__aeabi_d2f>
 8001426:	4603      	mov	r3, r0
 8001428:	ee00 3a10 	vmov	s0, r3
 800142c:	f005 fbd8 	bl	8006be0 <sinf>
 8001430:	eeb0 7a40 	vmov.f32	s14, s0
 8001434:	4b77      	ldr	r3, [pc, #476]	; (8001614 <regulacija+0x284>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001442:	4b76      	ldr	r3, [pc, #472]	; (800161c <regulacija+0x28c>)
 8001444:	edc3 7a00 	vstr	s15, [r3]
		y_el = y_e*cosf((float)teta) - x_e*sinf((float)teta);
 8001448:	4b73      	ldr	r3, [pc, #460]	; (8001618 <regulacija+0x288>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fb55 	bl	8000b00 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	ee00 3a10 	vmov	s0, r3
 800145c:	f005 fb7c 	bl	8006b58 <cosf>
 8001460:	eeb0 7a40 	vmov.f32	s14, s0
 8001464:	4b6b      	ldr	r3, [pc, #428]	; (8001614 <regulacija+0x284>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800146e:	4b6a      	ldr	r3, [pc, #424]	; (8001618 <regulacija+0x288>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fb42 	bl	8000b00 <__aeabi_d2f>
 800147c:	4603      	mov	r3, r0
 800147e:	ee00 3a10 	vmov	s0, r3
 8001482:	f005 fbad 	bl	8006be0 <sinf>
 8001486:	eeb0 7a40 	vmov.f32	s14, s0
 800148a:	4b5f      	ldr	r3, [pc, #380]	; (8001608 <regulacija+0x278>)
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001494:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001498:	4b61      	ldr	r3, [pc, #388]	; (8001620 <regulacija+0x290>)
 800149a:	edc3 7a00 	vstr	s15, [r3]

		if (smer == 1){
 800149e:	4b61      	ldr	r3, [pc, #388]	; (8001624 <regulacija+0x294>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d111      	bne.n	80014cc <regulacija+0x13c>
			t_ce = atan2f(y_el, x_el);
 80014a8:	4b5d      	ldr	r3, [pc, #372]	; (8001620 <regulacija+0x290>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	4b5b      	ldr	r3, [pc, #364]	; (800161c <regulacija+0x28c>)
 80014b0:	ed93 7a00 	vldr	s14, [r3]
 80014b4:	eef0 0a47 	vmov.f32	s1, s14
 80014b8:	eeb0 0a67 	vmov.f32	s0, s15
 80014bc:	f005 fc02 	bl	8006cc4 <atan2f>
 80014c0:	eef0 7a40 	vmov.f32	s15, s0
 80014c4:	4b58      	ldr	r3, [pc, #352]	; (8001628 <regulacija+0x298>)
 80014c6:	edc3 7a00 	vstr	s15, [r3]
 80014ca:	e019      	b.n	8001500 <regulacija+0x170>
		} else if (smer == 2){
 80014cc:	4b55      	ldr	r3, [pc, #340]	; (8001624 <regulacija+0x294>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d114      	bne.n	8001500 <regulacija+0x170>
			t_ce = atan2f(-y_el, -x_el);
 80014d6:	4b52      	ldr	r3, [pc, #328]	; (8001620 <regulacija+0x290>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	eeb1 7a67 	vneg.f32	s14, s15
 80014e0:	4b4e      	ldr	r3, [pc, #312]	; (800161c <regulacija+0x28c>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	eef1 7a67 	vneg.f32	s15, s15
 80014ea:	eef0 0a67 	vmov.f32	s1, s15
 80014ee:	eeb0 0a47 	vmov.f32	s0, s14
 80014f2:	f005 fbe7 	bl	8006cc4 <atan2f>
 80014f6:	eef0 7a40 	vmov.f32	s15, s0
 80014fa:	4b4b      	ldr	r3, [pc, #300]	; (8001628 <regulacija+0x298>)
 80014fc:	edc3 7a00 	vstr	s15, [r3]
		}

		if (t_ce < -M_PI)
 8001500:	4b49      	ldr	r3, [pc, #292]	; (8001628 <regulacija+0x298>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe ffcb 	bl	80004a0 <__aeabi_f2d>
 800150a:	a335      	add	r3, pc, #212	; (adr r3, 80015e0 <regulacija+0x250>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff fa90 	bl	8000a34 <__aeabi_dcmplt>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d012      	beq.n	8001540 <regulacija+0x1b0>
			t_ce += 2 * M_PI;
 800151a:	4b43      	ldr	r3, [pc, #268]	; (8001628 <regulacija+0x298>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7fe ffbe 	bl	80004a0 <__aeabi_f2d>
 8001524:	a330      	add	r3, pc, #192	; (adr r3, 80015e8 <regulacija+0x258>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7fe fe5b 	bl	80001e4 <__adddf3>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fae3 	bl	8000b00 <__aeabi_d2f>
 800153a:	4603      	mov	r3, r0
 800153c:	4a3a      	ldr	r2, [pc, #232]	; (8001628 <regulacija+0x298>)
 800153e:	6013      	str	r3, [r2, #0]
		if (t_ce > M_PI)
 8001540:	4b39      	ldr	r3, [pc, #228]	; (8001628 <regulacija+0x298>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ffab 	bl	80004a0 <__aeabi_f2d>
 800154a:	a329      	add	r3, pc, #164	; (adr r3, 80015f0 <regulacija+0x260>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7ff fa8e 	bl	8000a70 <__aeabi_dcmpgt>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d012      	beq.n	8001580 <regulacija+0x1f0>
			t_ce -= 2 * M_PI;
 800155a:	4b33      	ldr	r3, [pc, #204]	; (8001628 <regulacija+0x298>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ff9e 	bl	80004a0 <__aeabi_f2d>
 8001564:	a320      	add	r3, pc, #128	; (adr r3, 80015e8 <regulacija+0x258>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7fe fe39 	bl	80001e0 <__aeabi_dsub>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fac3 	bl	8000b00 <__aeabi_d2f>
 800157a:	4603      	mov	r3, r0
 800157c:	4a2a      	ldr	r2, [pc, #168]	; (8001628 <regulacija+0x298>)
 800157e:	6013      	str	r3, [r2, #0]

		teta_e = t_ce; // te pi/2 pi/4
 8001580:	4b29      	ldr	r3, [pc, #164]	; (8001628 <regulacija+0x298>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a29      	ldr	r2, [pc, #164]	; (800162c <regulacija+0x29c>)
 8001586:	6013      	str	r3, [r2, #0]

		teta_ei += teta_e;
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <regulacija+0x29c>)
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <regulacija+0x2a0>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001598:	4b25      	ldr	r3, [pc, #148]	; (8001630 <regulacija+0x2a0>)
 800159a:	edc3 7a00 	vstr	s15, [r3]
		teta_de = teta_e - teta_de_p; //tde pi/2 -pi/4
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <regulacija+0x29c>)
 80015a0:	ed93 7a00 	vldr	s14, [r3]
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <regulacija+0x2a4>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <regulacija+0x2a8>)
 80015b0:	edc3 7a00 	vstr	s15, [r3]
		teta_de_p = teta_e;
 80015b4:	4b1d      	ldr	r3, [pc, #116]	; (800162c <regulacija+0x29c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <regulacija+0x2a4>)
 80015ba:	6013      	str	r3, [r2, #0]

		if (teta_ei > teta_ei_max) {
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <regulacija+0x2a0>)
 80015be:	ed93 7a00 	vldr	s14, [r3]
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <regulacija+0x2ac>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	dd36      	ble.n	8001640 <regulacija+0x2b0>
			teta_ei = teta_ei_max;
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <regulacija+0x2ac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a16      	ldr	r2, [pc, #88]	; (8001630 <regulacija+0x2a0>)
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e040      	b.n	800165e <regulacija+0x2ce>
 80015dc:	f3af 8000 	nop.w
 80015e0:	54442d18 	.word	0x54442d18
 80015e4:	c00921fb 	.word	0xc00921fb
 80015e8:	54442d18 	.word	0x54442d18
 80015ec:	401921fb 	.word	0x401921fb
 80015f0:	54442d18 	.word	0x54442d18
 80015f4:	400921fb 	.word	0x400921fb
 80015f8:	2000000c 	.word	0x2000000c
 80015fc:	20000154 	.word	0x20000154
 8001600:	20000148 	.word	0x20000148
 8001604:	200000c8 	.word	0x200000c8
 8001608:	20000138 	.word	0x20000138
 800160c:	2000014c 	.word	0x2000014c
 8001610:	200000d0 	.word	0x200000d0
 8001614:	20000144 	.word	0x20000144
 8001618:	200000c0 	.word	0x200000c0
 800161c:	2000013c 	.word	0x2000013c
 8001620:	20000140 	.word	0x20000140
 8001624:	20000008 	.word	0x20000008
 8001628:	20000150 	.word	0x20000150
 800162c:	20000114 	.word	0x20000114
 8001630:	20000124 	.word	0x20000124
 8001634:	2000011c 	.word	0x2000011c
 8001638:	20000118 	.word	0x20000118
 800163c:	20000100 	.word	0x20000100
		} else if (teta_ei < teta_ei_min) {
 8001640:	4b9b      	ldr	r3, [pc, #620]	; (80018b0 <regulacija+0x520>)
 8001642:	ed93 7a00 	vldr	s14, [r3]
 8001646:	4b9b      	ldr	r3, [pc, #620]	; (80018b4 <regulacija+0x524>)
 8001648:	edd3 7a00 	vldr	s15, [r3]
 800164c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	d503      	bpl.n	800165e <regulacija+0x2ce>
			teta_ei = teta_ei_min;
 8001656:	4b97      	ldr	r3, [pc, #604]	; (80018b4 <regulacija+0x524>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a95      	ldr	r2, [pc, #596]	; (80018b0 <regulacija+0x520>)
 800165c:	6013      	str	r3, [r2, #0]
		}

		Vdr = +(Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 800165e:	4b96      	ldr	r3, [pc, #600]	; (80018b8 <regulacija+0x528>)
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	4b95      	ldr	r3, [pc, #596]	; (80018bc <regulacija+0x52c>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800166e:	4b94      	ldr	r3, [pc, #592]	; (80018c0 <regulacija+0x530>)
 8001670:	edd3 6a00 	vldr	s13, [r3]
 8001674:	4b8e      	ldr	r3, [pc, #568]	; (80018b0 <regulacija+0x520>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800167e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001682:	4b90      	ldr	r3, [pc, #576]	; (80018c4 <regulacija+0x534>)
 8001684:	edd3 6a00 	vldr	s13, [r3]
 8001688:	4b8f      	ldr	r3, [pc, #572]	; (80018c8 <regulacija+0x538>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001696:	4b8d      	ldr	r3, [pc, #564]	; (80018cc <regulacija+0x53c>)
 8001698:	edc3 7a00 	vstr	s15, [r3]
		Vdl = -(Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 800169c:	4b86      	ldr	r3, [pc, #536]	; (80018b8 <regulacija+0x528>)
 800169e:	ed93 7a00 	vldr	s14, [r3]
 80016a2:	4b86      	ldr	r3, [pc, #536]	; (80018bc <regulacija+0x52c>)
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ac:	4b84      	ldr	r3, [pc, #528]	; (80018c0 <regulacija+0x530>)
 80016ae:	edd3 6a00 	vldr	s13, [r3]
 80016b2:	4b7f      	ldr	r3, [pc, #508]	; (80018b0 <regulacija+0x520>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016c0:	4b80      	ldr	r3, [pc, #512]	; (80018c4 <regulacija+0x534>)
 80016c2:	edd3 6a00 	vldr	s13, [r3]
 80016c6:	4b80      	ldr	r3, [pc, #512]	; (80018c8 <regulacija+0x538>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d4:	eef1 7a67 	vneg.f32	s15, s15
 80016d8:	4b7d      	ldr	r3, [pc, #500]	; (80018d0 <regulacija+0x540>)
 80016da:	edc3 7a00 	vstr	s15, [r3]

		//prosledi_pwm(Vdr, Vdl, Vr, Vl);
		acc = 0.5;
 80016de:	4b7d      	ldr	r3, [pc, #500]	; (80018d4 <regulacija+0x544>)
 80016e0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80016e4:	601a      	str	r2, [r3, #0]

		if (fabs(teta_e) < M_PI/20)
 80016e6:	4b75      	ldr	r3, [pc, #468]	; (80018bc <regulacija+0x52c>)
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	eef0 7ae7 	vabs.f32	s15, s15
 80016f0:	ee17 0a90 	vmov	r0, s15
 80016f4:	f7fe fed4 	bl	80004a0 <__aeabi_f2d>
 80016f8:	a36b      	add	r3, pc, #428	; (adr r3, 80018a8 <regulacija+0x518>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7ff f999 	bl	8000a34 <__aeabi_dcmplt>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <regulacija+0x380>
			acc = 1;
 8001708:	4b72      	ldr	r3, [pc, #456]	; (80018d4 <regulacija+0x544>)
 800170a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800170e:	601a      	str	r2, [r3, #0]

		if (fabs(teta_e) < teta_min) {
 8001710:	4b6a      	ldr	r3, [pc, #424]	; (80018bc <regulacija+0x52c>)
 8001712:	edd3 7a00 	vldr	s15, [r3]
 8001716:	eeb0 7ae7 	vabs.f32	s14, s15
 800171a:	4b6f      	ldr	r3, [pc, #444]	; (80018d8 <regulacija+0x548>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001728:	f140 86c5 	bpl.w	80024b6 <regulacija+0x1126>
			acc = 1;
 800172c:	4b69      	ldr	r3, [pc, #420]	; (80018d4 <regulacija+0x544>)
 800172e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001732:	601a      	str	r2, [r3, #0]
			//medju_stanje();
			faza = 1;
 8001734:	4b69      	ldr	r3, [pc, #420]	; (80018dc <regulacija+0x54c>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
			teta_ei = 0;
 800173a:	4b5d      	ldr	r3, [pc, #372]	; (80018b0 <regulacija+0x520>)
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
			d_ei = 0;
 8001742:	4b67      	ldr	r3, [pc, #412]	; (80018e0 <regulacija+0x550>)
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
			teta_de = 0;
 800174a:	4b5f      	ldr	r3, [pc, #380]	; (80018c8 <regulacija+0x538>)
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
			d_de = 0;
 8001752:	4b64      	ldr	r3, [pc, #400]	; (80018e4 <regulacija+0x554>)
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
			teta_de_p = teta_de;
 800175a:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <regulacija+0x538>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a62      	ldr	r2, [pc, #392]	; (80018e8 <regulacija+0x558>)
 8001760:	6013      	str	r3, [r2, #0]
			d_de_p = d_de;
 8001762:	4b60      	ldr	r3, [pc, #384]	; (80018e4 <regulacija+0x554>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a61      	ldr	r2, [pc, #388]	; (80018ec <regulacija+0x55c>)
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	f000 bea4 	b.w	80024b6 <regulacija+0x1126>
		}

	} else if (faza == 1) { ///////////////////////////faza1////////////////////////////////////////////////////////////////////////////
 800176e:	4b5b      	ldr	r3, [pc, #364]	; (80018dc <regulacija+0x54c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b01      	cmp	r3, #1
 8001776:	f040 841d 	bne.w	8001fb4 <regulacija+0xc24>
		x_e = x_d - x;
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <regulacija+0x560>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fe8e 	bl	80004a0 <__aeabi_f2d>
 8001784:	4b5b      	ldr	r3, [pc, #364]	; (80018f4 <regulacija+0x564>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7fe fd29 	bl	80001e0 <__aeabi_dsub>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff f9b3 	bl	8000b00 <__aeabi_d2f>
 800179a:	4603      	mov	r3, r0
 800179c:	4a56      	ldr	r2, [pc, #344]	; (80018f8 <regulacija+0x568>)
 800179e:	6013      	str	r3, [r2, #0]
		y_e = y_d - y;
 80017a0:	4b56      	ldr	r3, [pc, #344]	; (80018fc <regulacija+0x56c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fe7b 	bl	80004a0 <__aeabi_f2d>
 80017aa:	4b55      	ldr	r3, [pc, #340]	; (8001900 <regulacija+0x570>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7fe fd16 	bl	80001e0 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff f9a0 	bl	8000b00 <__aeabi_d2f>
 80017c0:	4603      	mov	r3, r0
 80017c2:	4a50      	ldr	r2, [pc, #320]	; (8001904 <regulacija+0x574>)
 80017c4:	6013      	str	r3, [r2, #0]

		x_el = x_e*cosf(teta) + y_e*sinf(teta);
 80017c6:	4b50      	ldr	r3, [pc, #320]	; (8001908 <regulacija+0x578>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f7ff f996 	bl	8000b00 <__aeabi_d2f>
 80017d4:	4603      	mov	r3, r0
 80017d6:	ee00 3a10 	vmov	s0, r3
 80017da:	f005 f9bd 	bl	8006b58 <cosf>
 80017de:	eeb0 7a40 	vmov.f32	s14, s0
 80017e2:	4b45      	ldr	r3, [pc, #276]	; (80018f8 <regulacija+0x568>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80017ec:	4b46      	ldr	r3, [pc, #280]	; (8001908 <regulacija+0x578>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff f983 	bl	8000b00 <__aeabi_d2f>
 80017fa:	4603      	mov	r3, r0
 80017fc:	ee00 3a10 	vmov	s0, r3
 8001800:	f005 f9ee 	bl	8006be0 <sinf>
 8001804:	eeb0 7a40 	vmov.f32	s14, s0
 8001808:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <regulacija+0x574>)
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001812:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001816:	4b3d      	ldr	r3, [pc, #244]	; (800190c <regulacija+0x57c>)
 8001818:	edc3 7a00 	vstr	s15, [r3]
		y_el = -x_e*sinf(teta) + y_e*cosf(teta);
 800181c:	4b36      	ldr	r3, [pc, #216]	; (80018f8 <regulacija+0x568>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	eeb1 8a67 	vneg.f32	s16, s15
 8001826:	4b38      	ldr	r3, [pc, #224]	; (8001908 <regulacija+0x578>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	f7ff f966 	bl	8000b00 <__aeabi_d2f>
 8001834:	4603      	mov	r3, r0
 8001836:	ee00 3a10 	vmov	s0, r3
 800183a:	f005 f9d1 	bl	8006be0 <sinf>
 800183e:	eef0 7a40 	vmov.f32	s15, s0
 8001842:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001846:	4b30      	ldr	r3, [pc, #192]	; (8001908 <regulacija+0x578>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f956 	bl	8000b00 <__aeabi_d2f>
 8001854:	4603      	mov	r3, r0
 8001856:	ee00 3a10 	vmov	s0, r3
 800185a:	f005 f97d 	bl	8006b58 <cosf>
 800185e:	eeb0 7a40 	vmov.f32	s14, s0
 8001862:	4b28      	ldr	r3, [pc, #160]	; (8001904 <regulacija+0x574>)
 8001864:	edd3 7a00 	vldr	s15, [r3]
 8001868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <regulacija+0x580>)
 8001872:	edc3 7a00 	vstr	s15, [r3]

		if (smer == 1){
 8001876:	4b27      	ldr	r3, [pc, #156]	; (8001914 <regulacija+0x584>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d14d      	bne.n	800191c <regulacija+0x58c>
			t_ce = atan2f(y_el, x_el);
 8001880:	4b23      	ldr	r3, [pc, #140]	; (8001910 <regulacija+0x580>)
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	4b21      	ldr	r3, [pc, #132]	; (800190c <regulacija+0x57c>)
 8001888:	ed93 7a00 	vldr	s14, [r3]
 800188c:	eef0 0a47 	vmov.f32	s1, s14
 8001890:	eeb0 0a67 	vmov.f32	s0, s15
 8001894:	f005 fa16 	bl	8006cc4 <atan2f>
 8001898:	eef0 7a40 	vmov.f32	s15, s0
 800189c:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <regulacija+0x588>)
 800189e:	edc3 7a00 	vstr	s15, [r3]
 80018a2:	e055      	b.n	8001950 <regulacija+0x5c0>
 80018a4:	f3af 8000 	nop.w
 80018a8:	769cf0e0 	.word	0x769cf0e0
 80018ac:	3fc41b2f 	.word	0x3fc41b2f
 80018b0:	20000124 	.word	0x20000124
 80018b4:	20000104 	.word	0x20000104
 80018b8:	200000e4 	.word	0x200000e4
 80018bc:	20000114 	.word	0x20000114
 80018c0:	200000e8 	.word	0x200000e8
 80018c4:	200000ec 	.word	0x200000ec
 80018c8:	20000118 	.word	0x20000118
 80018cc:	200000f8 	.word	0x200000f8
 80018d0:	200000f0 	.word	0x200000f0
 80018d4:	20000004 	.word	0x20000004
 80018d8:	20000120 	.word	0x20000120
 80018dc:	20000154 	.word	0x20000154
 80018e0:	2000012c 	.word	0x2000012c
 80018e4:	20000134 	.word	0x20000134
 80018e8:	2000011c 	.word	0x2000011c
 80018ec:	20000130 	.word	0x20000130
 80018f0:	20000148 	.word	0x20000148
 80018f4:	200000c8 	.word	0x200000c8
 80018f8:	20000138 	.word	0x20000138
 80018fc:	2000014c 	.word	0x2000014c
 8001900:	200000d0 	.word	0x200000d0
 8001904:	20000144 	.word	0x20000144
 8001908:	200000c0 	.word	0x200000c0
 800190c:	2000013c 	.word	0x2000013c
 8001910:	20000140 	.word	0x20000140
 8001914:	20000008 	.word	0x20000008
 8001918:	20000150 	.word	0x20000150
		} else if (smer == 2){
 800191c:	4b84      	ldr	r3, [pc, #528]	; (8001b30 <regulacija+0x7a0>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d114      	bne.n	8001950 <regulacija+0x5c0>
			t_ce = atan2f(-y_el, -x_el);
 8001926:	4b83      	ldr	r3, [pc, #524]	; (8001b34 <regulacija+0x7a4>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	eeb1 7a67 	vneg.f32	s14, s15
 8001930:	4b81      	ldr	r3, [pc, #516]	; (8001b38 <regulacija+0x7a8>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	eef1 7a67 	vneg.f32	s15, s15
 800193a:	eef0 0a67 	vmov.f32	s1, s15
 800193e:	eeb0 0a47 	vmov.f32	s0, s14
 8001942:	f005 f9bf 	bl	8006cc4 <atan2f>
 8001946:	eef0 7a40 	vmov.f32	s15, s0
 800194a:	4b7c      	ldr	r3, [pc, #496]	; (8001b3c <regulacija+0x7ac>)
 800194c:	edc3 7a00 	vstr	s15, [r3]
		}

		if (t_ce < -M_PI)
 8001950:	4b7a      	ldr	r3, [pc, #488]	; (8001b3c <regulacija+0x7ac>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fda3 	bl	80004a0 <__aeabi_f2d>
 800195a:	a36d      	add	r3, pc, #436	; (adr r3, 8001b10 <regulacija+0x780>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	f7ff f868 	bl	8000a34 <__aeabi_dcmplt>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d012      	beq.n	8001990 <regulacija+0x600>
			t_ce += 2 * M_PI;
 800196a:	4b74      	ldr	r3, [pc, #464]	; (8001b3c <regulacija+0x7ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fd96 	bl	80004a0 <__aeabi_f2d>
 8001974:	a368      	add	r3, pc, #416	; (adr r3, 8001b18 <regulacija+0x788>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fc33 	bl	80001e4 <__adddf3>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4610      	mov	r0, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f7ff f8bb 	bl	8000b00 <__aeabi_d2f>
 800198a:	4603      	mov	r3, r0
 800198c:	4a6b      	ldr	r2, [pc, #428]	; (8001b3c <regulacija+0x7ac>)
 800198e:	6013      	str	r3, [r2, #0]
		if (t_ce > M_PI)
 8001990:	4b6a      	ldr	r3, [pc, #424]	; (8001b3c <regulacija+0x7ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fd83 	bl	80004a0 <__aeabi_f2d>
 800199a:	a361      	add	r3, pc, #388	; (adr r3, 8001b20 <regulacija+0x790>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7ff f866 	bl	8000a70 <__aeabi_dcmpgt>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d012      	beq.n	80019d0 <regulacija+0x640>
			t_ce -= 2 * M_PI;
 80019aa:	4b64      	ldr	r3, [pc, #400]	; (8001b3c <regulacija+0x7ac>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fd76 	bl	80004a0 <__aeabi_f2d>
 80019b4:	a358      	add	r3, pc, #352	; (adr r3, 8001b18 <regulacija+0x788>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	f7fe fc11 	bl	80001e0 <__aeabi_dsub>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff f89b 	bl	8000b00 <__aeabi_d2f>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a5b      	ldr	r2, [pc, #364]	; (8001b3c <regulacija+0x7ac>)
 80019ce:	6013      	str	r3, [r2, #0]

		if(smer == 1){
 80019d0:	4b57      	ldr	r3, [pc, #348]	; (8001b30 <regulacija+0x7a0>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d12c      	bne.n	8001a34 <regulacija+0x6a4>
			d_e = sqrt(x_el * x_el + y_el * y_el) / 1000; //u metrima
 80019da:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <regulacija+0x7a8>)
 80019dc:	ed93 7a00 	vldr	s14, [r3]
 80019e0:	4b55      	ldr	r3, [pc, #340]	; (8001b38 <regulacija+0x7a8>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ea:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <regulacija+0x7a4>)
 80019ec:	edd3 6a00 	vldr	s13, [r3]
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <regulacija+0x7a4>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fe:	ee17 0a90 	vmov	r0, s15
 8001a02:	f7fe fd4d 	bl	80004a0 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	ec43 2b10 	vmov	d0, r2, r3
 8001a0e:	f005 f92d 	bl	8006c6c <sqrt>
 8001a12:	ec51 0b10 	vmov	r0, r1, d0
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4b49      	ldr	r3, [pc, #292]	; (8001b40 <regulacija+0x7b0>)
 8001a1c:	f7fe fec2 	bl	80007a4 <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f86a 	bl	8000b00 <__aeabi_d2f>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4a45      	ldr	r2, [pc, #276]	; (8001b44 <regulacija+0x7b4>)
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e035      	b.n	8001aa0 <regulacija+0x710>
		} else if(smer == 2){
 8001a34:	4b3e      	ldr	r3, [pc, #248]	; (8001b30 <regulacija+0x7a0>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d130      	bne.n	8001aa0 <regulacija+0x710>
			d_e = -sqrt(x_el * x_el + y_el * y_el) / 1000;
 8001a3e:	4b3e      	ldr	r3, [pc, #248]	; (8001b38 <regulacija+0x7a8>)
 8001a40:	ed93 7a00 	vldr	s14, [r3]
 8001a44:	4b3c      	ldr	r3, [pc, #240]	; (8001b38 <regulacija+0x7a8>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <regulacija+0x7a4>)
 8001a50:	edd3 6a00 	vldr	s13, [r3]
 8001a54:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <regulacija+0x7a4>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a62:	ee17 0a90 	vmov	r0, s15
 8001a66:	f7fe fd1b 	bl	80004a0 <__aeabi_f2d>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	ec43 2b10 	vmov	d0, r2, r3
 8001a72:	f005 f8fb 	bl	8006c6c <sqrt>
 8001a76:	ec53 2b10 	vmov	r2, r3, d0
 8001a7a:	4614      	mov	r4, r2
 8001a7c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <regulacija+0x7b0>)
 8001a86:	4620      	mov	r0, r4
 8001a88:	4629      	mov	r1, r5
 8001a8a:	f7fe fe8b 	bl	80007a4 <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7ff f833 	bl	8000b00 <__aeabi_d2f>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4a29      	ldr	r2, [pc, #164]	; (8001b44 <regulacija+0x7b4>)
 8001a9e:	6013      	str	r3, [r2, #0]
		}

		if (fabs (t_ce) > (M_PI /2) )
 8001aa0:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <regulacija+0x7ac>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	eef0 7ae7 	vabs.f32	s15, s15
 8001aaa:	ee17 0a90 	vmov	r0, s15
 8001aae:	f7fe fcf7 	bl	80004a0 <__aeabi_f2d>
 8001ab2:	a31d      	add	r3, pc, #116	; (adr r3, 8001b28 <regulacija+0x798>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7fe ffda 	bl	8000a70 <__aeabi_dcmpgt>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d055      	beq.n	8001b6e <regulacija+0x7de>
		     // if ((theta_ce > ((M_PI/2) + teta)) || (theta_ce < (-(M_PI/2) + teta)))
			{
			      d_e *= -1;
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <regulacija+0x7b4>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	eef1 7a67 	vneg.f32	s15, s15
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <regulacija+0x7b4>)
 8001ace:	edc3 7a00 	vstr	s15, [r3]
			    if(t_ce>0)
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <regulacija+0x7ac>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	dd32      	ble.n	8001b48 <regulacija+0x7b8>
				t_ce -= M_PI;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <regulacija+0x7ac>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fcda 	bl	80004a0 <__aeabi_f2d>
 8001aec:	a30c      	add	r3, pc, #48	; (adr r3, 8001b20 <regulacija+0x790>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fb75 	bl	80001e0 <__aeabi_dsub>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7fe ffff 	bl	8000b00 <__aeabi_d2f>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <regulacija+0x7ac>)
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e031      	b.n	8001b6e <regulacija+0x7de>
 8001b0a:	bf00      	nop
 8001b0c:	f3af 8000 	nop.w
 8001b10:	54442d18 	.word	0x54442d18
 8001b14:	c00921fb 	.word	0xc00921fb
 8001b18:	54442d18 	.word	0x54442d18
 8001b1c:	401921fb 	.word	0x401921fb
 8001b20:	54442d18 	.word	0x54442d18
 8001b24:	400921fb 	.word	0x400921fb
 8001b28:	54442d18 	.word	0x54442d18
 8001b2c:	3ff921fb 	.word	0x3ff921fb
 8001b30:	20000008 	.word	0x20000008
 8001b34:	20000140 	.word	0x20000140
 8001b38:	2000013c 	.word	0x2000013c
 8001b3c:	20000150 	.word	0x20000150
 8001b40:	408f4000 	.word	0x408f4000
 8001b44:	20000128 	.word	0x20000128
			      else
				t_ce += M_PI;
 8001b48:	4ba3      	ldr	r3, [pc, #652]	; (8001dd8 <regulacija+0xa48>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fca7 	bl	80004a0 <__aeabi_f2d>
 8001b52:	a39d      	add	r3, pc, #628	; (adr r3, 8001dc8 <regulacija+0xa38>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fb44 	bl	80001e4 <__adddf3>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7fe ffcc 	bl	8000b00 <__aeabi_d2f>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a9b      	ldr	r2, [pc, #620]	; (8001dd8 <regulacija+0xa48>)
 8001b6c:	6013      	str	r3, [r2, #0]
			 }

		teta_e = t_ce;
 8001b6e:	4b9a      	ldr	r3, [pc, #616]	; (8001dd8 <regulacija+0xa48>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a9a      	ldr	r2, [pc, #616]	; (8001ddc <regulacija+0xa4c>)
 8001b74:	6013      	str	r3, [r2, #0]
		teta_ei += teta_e;
 8001b76:	4b99      	ldr	r3, [pc, #612]	; (8001ddc <regulacija+0xa4c>)
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	4b98      	ldr	r3, [pc, #608]	; (8001de0 <regulacija+0xa50>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b86:	4b96      	ldr	r3, [pc, #600]	; (8001de0 <regulacija+0xa50>)
 8001b88:	edc3 7a00 	vstr	s15, [r3]
		teta_de = teta_e - teta_de_p;				//tde pi/2 -pi/4
 8001b8c:	4b93      	ldr	r3, [pc, #588]	; (8001ddc <regulacija+0xa4c>)
 8001b8e:	ed93 7a00 	vldr	s14, [r3]
 8001b92:	4b94      	ldr	r3, [pc, #592]	; (8001de4 <regulacija+0xa54>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b9c:	4b92      	ldr	r3, [pc, #584]	; (8001de8 <regulacija+0xa58>)
 8001b9e:	edc3 7a00 	vstr	s15, [r3]
		teta_de_p = teta_e;
 8001ba2:	4b8e      	ldr	r3, [pc, #568]	; (8001ddc <regulacija+0xa4c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a8f      	ldr	r2, [pc, #572]	; (8001de4 <regulacija+0xa54>)
 8001ba8:	6013      	str	r3, [r2, #0]

		d_ei += d_e;
 8001baa:	4b90      	ldr	r3, [pc, #576]	; (8001dec <regulacija+0xa5c>)
 8001bac:	ed93 7a00 	vldr	s14, [r3]
 8001bb0:	4b8f      	ldr	r3, [pc, #572]	; (8001df0 <regulacija+0xa60>)
 8001bb2:	edd3 7a00 	vldr	s15, [r3]
 8001bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bba:	4b8d      	ldr	r3, [pc, #564]	; (8001df0 <regulacija+0xa60>)
 8001bbc:	edc3 7a00 	vstr	s15, [r3]
		d_de = d_e - d_de_p;				//tde pi/2 -pi/4
 8001bc0:	4b8a      	ldr	r3, [pc, #552]	; (8001dec <regulacija+0xa5c>)
 8001bc2:	ed93 7a00 	vldr	s14, [r3]
 8001bc6:	4b8b      	ldr	r3, [pc, #556]	; (8001df4 <regulacija+0xa64>)
 8001bc8:	edd3 7a00 	vldr	s15, [r3]
 8001bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd0:	4b89      	ldr	r3, [pc, #548]	; (8001df8 <regulacija+0xa68>)
 8001bd2:	edc3 7a00 	vstr	s15, [r3]
		d_de_p = d_e;
 8001bd6:	4b85      	ldr	r3, [pc, #532]	; (8001dec <regulacija+0xa5c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a86      	ldr	r2, [pc, #536]	; (8001df4 <regulacija+0xa64>)
 8001bdc:	6013      	str	r3, [r2, #0]

		if (d_ei > d_ei_max)
 8001bde:	4b84      	ldr	r3, [pc, #528]	; (8001df0 <regulacija+0xa60>)
 8001be0:	ed93 7a00 	vldr	s14, [r3]
 8001be4:	4b85      	ldr	r3, [pc, #532]	; (8001dfc <regulacija+0xa6c>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf2:	dd03      	ble.n	8001bfc <regulacija+0x86c>
			d_ei = d_ei_max;
 8001bf4:	4b81      	ldr	r3, [pc, #516]	; (8001dfc <regulacija+0xa6c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a7d      	ldr	r2, [pc, #500]	; (8001df0 <regulacija+0xa60>)
 8001bfa:	6013      	str	r3, [r2, #0]
		if (d_ei < d_ei_min)
 8001bfc:	4b7c      	ldr	r3, [pc, #496]	; (8001df0 <regulacija+0xa60>)
 8001bfe:	ed93 7a00 	vldr	s14, [r3]
 8001c02:	4b7f      	ldr	r3, [pc, #508]	; (8001e00 <regulacija+0xa70>)
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	d503      	bpl.n	8001c1a <regulacija+0x88a>
			d_ei = d_ei_min;
 8001c12:	4b7b      	ldr	r3, [pc, #492]	; (8001e00 <regulacija+0xa70>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a76      	ldr	r2, [pc, #472]	; (8001df0 <regulacija+0xa60>)
 8001c18:	6013      	str	r3, [r2, #0]

		if (teta_ei > teta_ei_max) {
 8001c1a:	4b71      	ldr	r3, [pc, #452]	; (8001de0 <regulacija+0xa50>)
 8001c1c:	ed93 7a00 	vldr	s14, [r3]
 8001c20:	4b78      	ldr	r3, [pc, #480]	; (8001e04 <regulacija+0xa74>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	dd04      	ble.n	8001c3a <regulacija+0x8aa>
			teta_ei = teta_ei_max;
 8001c30:	4b74      	ldr	r3, [pc, #464]	; (8001e04 <regulacija+0xa74>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a6a      	ldr	r2, [pc, #424]	; (8001de0 <regulacija+0xa50>)
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e00e      	b.n	8001c58 <regulacija+0x8c8>
		} else if (teta_ei < teta_ei_min) {
 8001c3a:	4b69      	ldr	r3, [pc, #420]	; (8001de0 <regulacija+0xa50>)
 8001c3c:	ed93 7a00 	vldr	s14, [r3]
 8001c40:	4b71      	ldr	r3, [pc, #452]	; (8001e08 <regulacija+0xa78>)
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	d503      	bpl.n	8001c58 <regulacija+0x8c8>
			teta_ei = teta_ei_min;
 8001c50:	4b6d      	ldr	r3, [pc, #436]	; (8001e08 <regulacija+0xa78>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a62      	ldr	r2, [pc, #392]	; (8001de0 <regulacija+0xa50>)
 8001c56:	6013      	str	r3, [r2, #0]
		}

		Vdr = -(Kpd * d_e + Kid * d_ei + Kdd * d_de);
 8001c58:	4b6c      	ldr	r3, [pc, #432]	; (8001e0c <regulacija+0xa7c>)
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	4b63      	ldr	r3, [pc, #396]	; (8001dec <regulacija+0xa5c>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c68:	4b69      	ldr	r3, [pc, #420]	; (8001e10 <regulacija+0xa80>)
 8001c6a:	edd3 6a00 	vldr	s13, [r3]
 8001c6e:	4b60      	ldr	r3, [pc, #384]	; (8001df0 <regulacija+0xa60>)
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c7c:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <regulacija+0xa84>)
 8001c7e:	edd3 6a00 	vldr	s13, [r3]
 8001c82:	4b5d      	ldr	r3, [pc, #372]	; (8001df8 <regulacija+0xa68>)
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c90:	eef1 7a67 	vneg.f32	s15, s15
 8001c94:	4b60      	ldr	r3, [pc, #384]	; (8001e18 <regulacija+0xa88>)
 8001c96:	edc3 7a00 	vstr	s15, [r3]
		Vdl = -(Kpd * d_e + Kid * d_ei + Kdd * d_de);
 8001c9a:	4b5c      	ldr	r3, [pc, #368]	; (8001e0c <regulacija+0xa7c>)
 8001c9c:	ed93 7a00 	vldr	s14, [r3]
 8001ca0:	4b52      	ldr	r3, [pc, #328]	; (8001dec <regulacija+0xa5c>)
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001caa:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <regulacija+0xa80>)
 8001cac:	edd3 6a00 	vldr	s13, [r3]
 8001cb0:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <regulacija+0xa60>)
 8001cb2:	edd3 7a00 	vldr	s15, [r3]
 8001cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cbe:	4b55      	ldr	r3, [pc, #340]	; (8001e14 <regulacija+0xa84>)
 8001cc0:	edd3 6a00 	vldr	s13, [r3]
 8001cc4:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <regulacija+0xa68>)
 8001cc6:	edd3 7a00 	vldr	s15, [r3]
 8001cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd2:	eef1 7a67 	vneg.f32	s15, s15
 8001cd6:	4b51      	ldr	r3, [pc, #324]	; (8001e1c <regulacija+0xa8c>)
 8001cd8:	edc3 7a00 	vstr	s15, [r3]

		acc = 0.5;
 8001cdc:	4b50      	ldr	r3, [pc, #320]	; (8001e20 <regulacija+0xa90>)
 8001cde:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001ce2:	601a      	str	r2, [r3, #0]

		if (fabs (d_e) < 0.1)
 8001ce4:	4b41      	ldr	r3, [pc, #260]	; (8001dec <regulacija+0xa5c>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	eef0 7ae7 	vabs.f32	s15, s15
 8001cee:	ee17 0a90 	vmov	r0, s15
 8001cf2:	f7fe fbd5 	bl	80004a0 <__aeabi_f2d>
 8001cf6:	a336      	add	r3, pc, #216	; (adr r3, 8001dd0 <regulacija+0xa40>)
 8001cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfc:	f7fe fe9a 	bl	8000a34 <__aeabi_dcmplt>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <regulacija+0x97e>
			acc = 1;
 8001d06:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <regulacija+0xa90>)
 8001d08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d0c:	601a      	str	r2, [r3, #0]
		//prosledi_pwm(Vdr, Vdl, Vr, Vl);
		if (fabs (d_e) > 0.1)
 8001d0e:	4b37      	ldr	r3, [pc, #220]	; (8001dec <regulacija+0xa5c>)
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	eef0 7ae7 	vabs.f32	s15, s15
 8001d18:	ee17 0a90 	vmov	r0, s15
 8001d1c:	f7fe fbc0 	bl	80004a0 <__aeabi_f2d>
 8001d20:	a32b      	add	r3, pc, #172	; (adr r3, 8001dd0 <regulacija+0xa40>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fea3 	bl	8000a70 <__aeabi_dcmpgt>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d07f      	beq.n	8001e30 <regulacija+0xaa0>
			{
			  // uticaj orijentacije na regulciju
			  Vdl -= 1 * (Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 8001d30:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <regulacija+0xa94>)
 8001d32:	ed93 7a00 	vldr	s14, [r3]
 8001d36:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <regulacija+0xa4c>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d40:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <regulacija+0xa98>)
 8001d42:	edd3 6a00 	vldr	s13, [r3]
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <regulacija+0xa50>)
 8001d48:	edd3 7a00 	vldr	s15, [r3]
 8001d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d54:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <regulacija+0xa9c>)
 8001d56:	edd3 6a00 	vldr	s13, [r3]
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <regulacija+0xa58>)
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d68:	4b2c      	ldr	r3, [pc, #176]	; (8001e1c <regulacija+0xa8c>)
 8001d6a:	ed93 7a00 	vldr	s14, [r3]
 8001d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <regulacija+0xa8c>)
 8001d74:	edc3 7a00 	vstr	s15, [r3]
			  Vdr += 1 * (Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <regulacija+0xa94>)
 8001d7a:	ed93 7a00 	vldr	s14, [r3]
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <regulacija+0xa4c>)
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <regulacija+0xa98>)
 8001d8a:	edd3 6a00 	vldr	s13, [r3]
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <regulacija+0xa50>)
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <regulacija+0xa9c>)
 8001d9e:	edd3 6a00 	vldr	s13, [r3]
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <regulacija+0xa58>)
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <regulacija+0xa88>)
 8001db2:	edd3 7a00 	vldr	s15, [r3]
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dba:	4b17      	ldr	r3, [pc, #92]	; (8001e18 <regulacija+0xa88>)
 8001dbc:	edc3 7a00 	vstr	s15, [r3]
 8001dc0:	e0ae      	b.n	8001f20 <regulacija+0xb90>
 8001dc2:	bf00      	nop
 8001dc4:	f3af 8000 	nop.w
 8001dc8:	54442d18 	.word	0x54442d18
 8001dcc:	400921fb 	.word	0x400921fb
 8001dd0:	9999999a 	.word	0x9999999a
 8001dd4:	3fb99999 	.word	0x3fb99999
 8001dd8:	20000150 	.word	0x20000150
 8001ddc:	20000114 	.word	0x20000114
 8001de0:	20000124 	.word	0x20000124
 8001de4:	2000011c 	.word	0x2000011c
 8001de8:	20000118 	.word	0x20000118
 8001dec:	20000128 	.word	0x20000128
 8001df0:	2000012c 	.word	0x2000012c
 8001df4:	20000130 	.word	0x20000130
 8001df8:	20000134 	.word	0x20000134
 8001dfc:	20000108 	.word	0x20000108
 8001e00:	2000010c 	.word	0x2000010c
 8001e04:	20000100 	.word	0x20000100
 8001e08:	20000104 	.word	0x20000104
 8001e0c:	200000d8 	.word	0x200000d8
 8001e10:	200000dc 	.word	0x200000dc
 8001e14:	200000e0 	.word	0x200000e0
 8001e18:	200000f8 	.word	0x200000f8
 8001e1c:	200000f0 	.word	0x200000f0
 8001e20:	20000004 	.word	0x20000004
 8001e24:	200000e4 	.word	0x200000e4
 8001e28:	200000e8 	.word	0x200000e8
 8001e2c:	200000ec 	.word	0x200000ec
			}
		      else
			{
			  Vdl -= 0.1 * (Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 8001e30:	4b51      	ldr	r3, [pc, #324]	; (8001f78 <regulacija+0xbe8>)
 8001e32:	ed93 7a00 	vldr	s14, [r3]
 8001e36:	4b51      	ldr	r3, [pc, #324]	; (8001f7c <regulacija+0xbec>)
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e40:	4b4f      	ldr	r3, [pc, #316]	; (8001f80 <regulacija+0xbf0>)
 8001e42:	edd3 6a00 	vldr	s13, [r3]
 8001e46:	4b4f      	ldr	r3, [pc, #316]	; (8001f84 <regulacija+0xbf4>)
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e54:	4b4c      	ldr	r3, [pc, #304]	; (8001f88 <regulacija+0xbf8>)
 8001e56:	edd3 6a00 	vldr	s13, [r3]
 8001e5a:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <regulacija+0xbfc>)
 8001e5c:	edd3 7a00 	vldr	s15, [r3]
 8001e60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e68:	ee17 0a90 	vmov	r0, s15
 8001e6c:	f7fe fb18 	bl	80004a0 <__aeabi_f2d>
 8001e70:	a33f      	add	r3, pc, #252	; (adr r3, 8001f70 <regulacija+0xbe0>)
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f7fe fb6b 	bl	8000550 <__aeabi_dmul>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	4614      	mov	r4, r2
 8001e80:	461d      	mov	r5, r3
 8001e82:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <regulacija+0xc00>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb0a 	bl	80004a0 <__aeabi_f2d>
 8001e8c:	4622      	mov	r2, r4
 8001e8e:	462b      	mov	r3, r5
 8001e90:	f7fe f9a6 	bl	80001e0 <__aeabi_dsub>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f7fe fe30 	bl	8000b00 <__aeabi_d2f>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4a3b      	ldr	r2, [pc, #236]	; (8001f90 <regulacija+0xc00>)
 8001ea4:	6013      	str	r3, [r2, #0]
			  Vdr += 0.1 * (Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 8001ea6:	4b34      	ldr	r3, [pc, #208]	; (8001f78 <regulacija+0xbe8>)
 8001ea8:	ed93 7a00 	vldr	s14, [r3]
 8001eac:	4b33      	ldr	r3, [pc, #204]	; (8001f7c <regulacija+0xbec>)
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb6:	4b32      	ldr	r3, [pc, #200]	; (8001f80 <regulacija+0xbf0>)
 8001eb8:	edd3 6a00 	vldr	s13, [r3]
 8001ebc:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <regulacija+0xbf4>)
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eca:	4b2f      	ldr	r3, [pc, #188]	; (8001f88 <regulacija+0xbf8>)
 8001ecc:	edd3 6a00 	vldr	s13, [r3]
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <regulacija+0xbfc>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ede:	ee17 0a90 	vmov	r0, s15
 8001ee2:	f7fe fadd 	bl	80004a0 <__aeabi_f2d>
 8001ee6:	a322      	add	r3, pc, #136	; (adr r3, 8001f70 <regulacija+0xbe0>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	f7fe fb30 	bl	8000550 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4614      	mov	r4, r2
 8001ef6:	461d      	mov	r5, r3
 8001ef8:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <regulacija+0xc04>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe facf 	bl	80004a0 <__aeabi_f2d>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4620      	mov	r0, r4
 8001f08:	4629      	mov	r1, r5
 8001f0a:	f7fe f96b 	bl	80001e4 <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7fe fdf3 	bl	8000b00 <__aeabi_d2f>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <regulacija+0xc04>)
 8001f1e:	6013      	str	r3, [r2, #0]
			}

		if (fabs(d_e) < d_e_min) {
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <regulacija+0xc08>)
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	eeb0 7ae7 	vabs.f32	s14, s15
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <regulacija+0xc0c>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f38:	f140 82bd 	bpl.w	80024b6 <regulacija+0x1126>
			acc = 1;
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <regulacija+0xc10>)
 8001f3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f42:	601a      	str	r2, [r3, #0]
			//medju_stanje();
			teta_ei = 0;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <regulacija+0xbf4>)
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
			d_ei = 0;
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <regulacija+0xc14>)
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
			faza = 2;
 8001f54:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <regulacija+0xc18>)
 8001f56:	2202      	movs	r2, #2
 8001f58:	701a      	strb	r2, [r3, #0]
			d_de_p = 0;
 8001f5a:	4b14      	ldr	r3, [pc, #80]	; (8001fac <regulacija+0xc1c>)
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
			teta_de_p = 0;
 8001f62:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <regulacija+0xc20>)
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e2a4      	b.n	80024b6 <regulacija+0x1126>
 8001f6c:	f3af 8000 	nop.w
 8001f70:	9999999a 	.word	0x9999999a
 8001f74:	3fb99999 	.word	0x3fb99999
 8001f78:	200000e4 	.word	0x200000e4
 8001f7c:	20000114 	.word	0x20000114
 8001f80:	200000e8 	.word	0x200000e8
 8001f84:	20000124 	.word	0x20000124
 8001f88:	200000ec 	.word	0x200000ec
 8001f8c:	20000118 	.word	0x20000118
 8001f90:	200000f0 	.word	0x200000f0
 8001f94:	200000f8 	.word	0x200000f8
 8001f98:	20000128 	.word	0x20000128
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000004 	.word	0x20000004
 8001fa4:	2000012c 	.word	0x2000012c
 8001fa8:	20000154 	.word	0x20000154
 8001fac:	20000130 	.word	0x20000130
 8001fb0:	2000011c 	.word	0x2000011c
		}

	}
	else if ((faza == 2)||(faza == 3)) {
 8001fb4:	4b9e      	ldr	r3, [pc, #632]	; (8002230 <regulacija+0xea0>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d005      	beq.n	8001fca <regulacija+0xc3a>
 8001fbe:	4b9c      	ldr	r3, [pc, #624]	; (8002230 <regulacija+0xea0>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	f040 8276 	bne.w	80024b6 <regulacija+0x1126>

		x_e = x_d - x;
 8001fca:	4b9a      	ldr	r3, [pc, #616]	; (8002234 <regulacija+0xea4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fa66 	bl	80004a0 <__aeabi_f2d>
 8001fd4:	4b98      	ldr	r3, [pc, #608]	; (8002238 <regulacija+0xea8>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f7fe f901 	bl	80001e0 <__aeabi_dsub>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f7fe fd8b 	bl	8000b00 <__aeabi_d2f>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4a93      	ldr	r2, [pc, #588]	; (800223c <regulacija+0xeac>)
 8001fee:	6013      	str	r3, [r2, #0]
		y_e = y_d - y;
 8001ff0:	4b93      	ldr	r3, [pc, #588]	; (8002240 <regulacija+0xeb0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa53 	bl	80004a0 <__aeabi_f2d>
 8001ffa:	4b92      	ldr	r3, [pc, #584]	; (8002244 <regulacija+0xeb4>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	f7fe f8ee 	bl	80001e0 <__aeabi_dsub>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	f7fe fd78 	bl	8000b00 <__aeabi_d2f>
 8002010:	4603      	mov	r3, r0
 8002012:	4a8d      	ldr	r2, [pc, #564]	; (8002248 <regulacija+0xeb8>)
 8002014:	6013      	str	r3, [r2, #0]

		x_el = x_e*cosf(teta) + y_e*sinf(teta);
 8002016:	4b8d      	ldr	r3, [pc, #564]	; (800224c <regulacija+0xebc>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f7fe fd6e 	bl	8000b00 <__aeabi_d2f>
 8002024:	4603      	mov	r3, r0
 8002026:	ee00 3a10 	vmov	s0, r3
 800202a:	f004 fd95 	bl	8006b58 <cosf>
 800202e:	eeb0 7a40 	vmov.f32	s14, s0
 8002032:	4b82      	ldr	r3, [pc, #520]	; (800223c <regulacija+0xeac>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	ee27 8a27 	vmul.f32	s16, s14, s15
 800203c:	4b83      	ldr	r3, [pc, #524]	; (800224c <regulacija+0xebc>)
 800203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	f7fe fd5b 	bl	8000b00 <__aeabi_d2f>
 800204a:	4603      	mov	r3, r0
 800204c:	ee00 3a10 	vmov	s0, r3
 8002050:	f004 fdc6 	bl	8006be0 <sinf>
 8002054:	eeb0 7a40 	vmov.f32	s14, s0
 8002058:	4b7b      	ldr	r3, [pc, #492]	; (8002248 <regulacija+0xeb8>)
 800205a:	edd3 7a00 	vldr	s15, [r3]
 800205e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002062:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002066:	4b7a      	ldr	r3, [pc, #488]	; (8002250 <regulacija+0xec0>)
 8002068:	edc3 7a00 	vstr	s15, [r3]
		y_el = -x_e*sinf(teta) + y_e*cosf(teta);
 800206c:	4b73      	ldr	r3, [pc, #460]	; (800223c <regulacija+0xeac>)
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	eeb1 8a67 	vneg.f32	s16, s15
 8002076:	4b75      	ldr	r3, [pc, #468]	; (800224c <regulacija+0xebc>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fd3e 	bl	8000b00 <__aeabi_d2f>
 8002084:	4603      	mov	r3, r0
 8002086:	ee00 3a10 	vmov	s0, r3
 800208a:	f004 fda9 	bl	8006be0 <sinf>
 800208e:	eef0 7a40 	vmov.f32	s15, s0
 8002092:	ee28 8a27 	vmul.f32	s16, s16, s15
 8002096:	4b6d      	ldr	r3, [pc, #436]	; (800224c <regulacija+0xebc>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	4610      	mov	r0, r2
 800209e:	4619      	mov	r1, r3
 80020a0:	f7fe fd2e 	bl	8000b00 <__aeabi_d2f>
 80020a4:	4603      	mov	r3, r0
 80020a6:	ee00 3a10 	vmov	s0, r3
 80020aa:	f004 fd55 	bl	8006b58 <cosf>
 80020ae:	eeb0 7a40 	vmov.f32	s14, s0
 80020b2:	4b65      	ldr	r3, [pc, #404]	; (8002248 <regulacija+0xeb8>)
 80020b4:	edd3 7a00 	vldr	s15, [r3]
 80020b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020bc:	ee78 7a27 	vadd.f32	s15, s16, s15
 80020c0:	4b64      	ldr	r3, [pc, #400]	; (8002254 <regulacija+0xec4>)
 80020c2:	edc3 7a00 	vstr	s15, [r3]
		d_e = sqrt(x_el * x_el + y_el * y_el) / 1000; //u metrima
 80020c6:	4b62      	ldr	r3, [pc, #392]	; (8002250 <regulacija+0xec0>)
 80020c8:	ed93 7a00 	vldr	s14, [r3]
 80020cc:	4b60      	ldr	r3, [pc, #384]	; (8002250 <regulacija+0xec0>)
 80020ce:	edd3 7a00 	vldr	s15, [r3]
 80020d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d6:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <regulacija+0xec4>)
 80020d8:	edd3 6a00 	vldr	s13, [r3]
 80020dc:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <regulacija+0xec4>)
 80020de:	edd3 7a00 	vldr	s15, [r3]
 80020e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ea:	ee17 0a90 	vmov	r0, s15
 80020ee:	f7fe f9d7 	bl	80004a0 <__aeabi_f2d>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	ec43 2b10 	vmov	d0, r2, r3
 80020fa:	f004 fdb7 	bl	8006c6c <sqrt>
 80020fe:	ec51 0b10 	vmov	r0, r1, d0
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	4b54      	ldr	r3, [pc, #336]	; (8002258 <regulacija+0xec8>)
 8002108:	f7fe fb4c 	bl	80007a4 <__aeabi_ddiv>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	f7fe fcf4 	bl	8000b00 <__aeabi_d2f>
 8002118:	4603      	mov	r3, r0
 800211a:	4a50      	ldr	r2, [pc, #320]	; (800225c <regulacija+0xecc>)
 800211c:	6013      	str	r3, [r2, #0]

		teta_e = teta_d - teta;
 800211e:	4b50      	ldr	r3, [pc, #320]	; (8002260 <regulacija+0xed0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe f9bc 	bl	80004a0 <__aeabi_f2d>
 8002128:	4b48      	ldr	r3, [pc, #288]	; (800224c <regulacija+0xebc>)
 800212a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212e:	f7fe f857 	bl	80001e0 <__aeabi_dsub>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4610      	mov	r0, r2
 8002138:	4619      	mov	r1, r3
 800213a:	f7fe fce1 	bl	8000b00 <__aeabi_d2f>
 800213e:	4603      	mov	r3, r0
 8002140:	4a48      	ldr	r2, [pc, #288]	; (8002264 <regulacija+0xed4>)
 8002142:	6013      	str	r3, [r2, #0]

		if (teta_e < -M_PI)
 8002144:	4b47      	ldr	r3, [pc, #284]	; (8002264 <regulacija+0xed4>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe f9a9 	bl	80004a0 <__aeabi_f2d>
 800214e:	a332      	add	r3, pc, #200	; (adr r3, 8002218 <regulacija+0xe88>)
 8002150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002154:	f7fe fc6e 	bl	8000a34 <__aeabi_dcmplt>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d012      	beq.n	8002184 <regulacija+0xdf4>
			teta_e += 2 * M_PI;
 800215e:	4b41      	ldr	r3, [pc, #260]	; (8002264 <regulacija+0xed4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f99c 	bl	80004a0 <__aeabi_f2d>
 8002168:	a32d      	add	r3, pc, #180	; (adr r3, 8002220 <regulacija+0xe90>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe f839 	bl	80001e4 <__adddf3>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	f7fe fcc1 	bl	8000b00 <__aeabi_d2f>
 800217e:	4603      	mov	r3, r0
 8002180:	4a38      	ldr	r2, [pc, #224]	; (8002264 <regulacija+0xed4>)
 8002182:	6013      	str	r3, [r2, #0]
		if (teta_e > M_PI)
 8002184:	4b37      	ldr	r3, [pc, #220]	; (8002264 <regulacija+0xed4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe f989 	bl	80004a0 <__aeabi_f2d>
 800218e:	a326      	add	r3, pc, #152	; (adr r3, 8002228 <regulacija+0xe98>)
 8002190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002194:	f7fe fc6c 	bl	8000a70 <__aeabi_dcmpgt>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d012      	beq.n	80021c4 <regulacija+0xe34>
			teta_e -= 2 * M_PI;
 800219e:	4b31      	ldr	r3, [pc, #196]	; (8002264 <regulacija+0xed4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f97c 	bl	80004a0 <__aeabi_f2d>
 80021a8:	a31d      	add	r3, pc, #116	; (adr r3, 8002220 <regulacija+0xe90>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe f817 	bl	80001e0 <__aeabi_dsub>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fca1 	bl	8000b00 <__aeabi_d2f>
 80021be:	4603      	mov	r3, r0
 80021c0:	4a28      	ldr	r2, [pc, #160]	; (8002264 <regulacija+0xed4>)
 80021c2:	6013      	str	r3, [r2, #0]

		teta_ei += teta_e;
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <regulacija+0xed4>)
 80021c6:	ed93 7a00 	vldr	s14, [r3]
 80021ca:	4b27      	ldr	r3, [pc, #156]	; (8002268 <regulacija+0xed8>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021d4:	4b24      	ldr	r3, [pc, #144]	; (8002268 <regulacija+0xed8>)
 80021d6:	edc3 7a00 	vstr	s15, [r3]
		teta_de = teta_e - teta_de_p; //tde pi/2 -pi/4
 80021da:	4b22      	ldr	r3, [pc, #136]	; (8002264 <regulacija+0xed4>)
 80021dc:	ed93 7a00 	vldr	s14, [r3]
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <regulacija+0xedc>)
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <regulacija+0xee0>)
 80021ec:	edc3 7a00 	vstr	s15, [r3]
		teta_de_p = teta_e;
 80021f0:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <regulacija+0xed4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	; (800226c <regulacija+0xedc>)
 80021f6:	6013      	str	r3, [r2, #0]

		if (teta_ei > teta_ei_max) {
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <regulacija+0xed8>)
 80021fa:	ed93 7a00 	vldr	s14, [r3]
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <regulacija+0xee4>)
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220c:	dd34      	ble.n	8002278 <regulacija+0xee8>
			teta_ei = teta_ei_max;
 800220e:	4b19      	ldr	r3, [pc, #100]	; (8002274 <regulacija+0xee4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <regulacija+0xed8>)
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e03e      	b.n	8002296 <regulacija+0xf06>
 8002218:	54442d18 	.word	0x54442d18
 800221c:	c00921fb 	.word	0xc00921fb
 8002220:	54442d18 	.word	0x54442d18
 8002224:	401921fb 	.word	0x401921fb
 8002228:	54442d18 	.word	0x54442d18
 800222c:	400921fb 	.word	0x400921fb
 8002230:	20000154 	.word	0x20000154
 8002234:	20000148 	.word	0x20000148
 8002238:	200000c8 	.word	0x200000c8
 800223c:	20000138 	.word	0x20000138
 8002240:	2000014c 	.word	0x2000014c
 8002244:	200000d0 	.word	0x200000d0
 8002248:	20000144 	.word	0x20000144
 800224c:	200000c0 	.word	0x200000c0
 8002250:	2000013c 	.word	0x2000013c
 8002254:	20000140 	.word	0x20000140
 8002258:	408f4000 	.word	0x408f4000
 800225c:	20000128 	.word	0x20000128
 8002260:	20000110 	.word	0x20000110
 8002264:	20000114 	.word	0x20000114
 8002268:	20000124 	.word	0x20000124
 800226c:	2000011c 	.word	0x2000011c
 8002270:	20000118 	.word	0x20000118
 8002274:	20000100 	.word	0x20000100
		} else if (teta_ei < teta_ei_min) {
 8002278:	4baf      	ldr	r3, [pc, #700]	; (8002538 <regulacija+0x11a8>)
 800227a:	ed93 7a00 	vldr	s14, [r3]
 800227e:	4baf      	ldr	r3, [pc, #700]	; (800253c <regulacija+0x11ac>)
 8002280:	edd3 7a00 	vldr	s15, [r3]
 8002284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228c:	d503      	bpl.n	8002296 <regulacija+0xf06>
			teta_ei = teta_ei_min;
 800228e:	4bab      	ldr	r3, [pc, #684]	; (800253c <regulacija+0x11ac>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4aa9      	ldr	r2, [pc, #676]	; (8002538 <regulacija+0x11a8>)
 8002294:	6013      	str	r3, [r2, #0]
		}

		Vdr = +(Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 8002296:	4baa      	ldr	r3, [pc, #680]	; (8002540 <regulacija+0x11b0>)
 8002298:	ed93 7a00 	vldr	s14, [r3]
 800229c:	4ba9      	ldr	r3, [pc, #676]	; (8002544 <regulacija+0x11b4>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022a6:	4ba8      	ldr	r3, [pc, #672]	; (8002548 <regulacija+0x11b8>)
 80022a8:	edd3 6a00 	vldr	s13, [r3]
 80022ac:	4ba2      	ldr	r3, [pc, #648]	; (8002538 <regulacija+0x11a8>)
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ba:	4ba4      	ldr	r3, [pc, #656]	; (800254c <regulacija+0x11bc>)
 80022bc:	edd3 6a00 	vldr	s13, [r3]
 80022c0:	4ba3      	ldr	r3, [pc, #652]	; (8002550 <regulacija+0x11c0>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ce:	4ba1      	ldr	r3, [pc, #644]	; (8002554 <regulacija+0x11c4>)
 80022d0:	edc3 7a00 	vstr	s15, [r3]
		Vdl = -(Kp_teta * teta_e + Ki_teta * teta_ei + Kd_teta * teta_de);
 80022d4:	4b9a      	ldr	r3, [pc, #616]	; (8002540 <regulacija+0x11b0>)
 80022d6:	ed93 7a00 	vldr	s14, [r3]
 80022da:	4b9a      	ldr	r3, [pc, #616]	; (8002544 <regulacija+0x11b4>)
 80022dc:	edd3 7a00 	vldr	s15, [r3]
 80022e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022e4:	4b98      	ldr	r3, [pc, #608]	; (8002548 <regulacija+0x11b8>)
 80022e6:	edd3 6a00 	vldr	s13, [r3]
 80022ea:	4b93      	ldr	r3, [pc, #588]	; (8002538 <regulacija+0x11a8>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f8:	4b94      	ldr	r3, [pc, #592]	; (800254c <regulacija+0x11bc>)
 80022fa:	edd3 6a00 	vldr	s13, [r3]
 80022fe:	4b94      	ldr	r3, [pc, #592]	; (8002550 <regulacija+0x11c0>)
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230c:	eef1 7a67 	vneg.f32	s15, s15
 8002310:	4b91      	ldr	r3, [pc, #580]	; (8002558 <regulacija+0x11c8>)
 8002312:	edc3 7a00 	vstr	s15, [r3]


		if(faza == 3)
 8002316:	4b91      	ldr	r3, [pc, #580]	; (800255c <regulacija+0x11cc>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b03      	cmp	r3, #3
 800231e:	f040 8090 	bne.w	8002442 <regulacija+0x10b2>
		{
			if (x_el<0){
 8002322:	4b8f      	ldr	r3, [pc, #572]	; (8002560 <regulacija+0x11d0>)
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002330:	d507      	bpl.n	8002342 <regulacija+0xfb2>
				d_e*=-1;
 8002332:	4b8c      	ldr	r3, [pc, #560]	; (8002564 <regulacija+0x11d4>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	eef1 7a67 	vneg.f32	s15, s15
 800233c:	4b89      	ldr	r3, [pc, #548]	; (8002564 <regulacija+0x11d4>)
 800233e:	edc3 7a00 	vstr	s15, [r3]
			}
			d_ei += d_e;
 8002342:	4b88      	ldr	r3, [pc, #544]	; (8002564 <regulacija+0x11d4>)
 8002344:	ed93 7a00 	vldr	s14, [r3]
 8002348:	4b87      	ldr	r3, [pc, #540]	; (8002568 <regulacija+0x11d8>)
 800234a:	edd3 7a00 	vldr	s15, [r3]
 800234e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002352:	4b85      	ldr	r3, [pc, #532]	; (8002568 <regulacija+0x11d8>)
 8002354:	edc3 7a00 	vstr	s15, [r3]
			d_de = d_e - d_de_p;				//tde pi/2 -pi/4
 8002358:	4b82      	ldr	r3, [pc, #520]	; (8002564 <regulacija+0x11d4>)
 800235a:	ed93 7a00 	vldr	s14, [r3]
 800235e:	4b83      	ldr	r3, [pc, #524]	; (800256c <regulacija+0x11dc>)
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002368:	4b81      	ldr	r3, [pc, #516]	; (8002570 <regulacija+0x11e0>)
 800236a:	edc3 7a00 	vstr	s15, [r3]
			d_de_p = d_e;
 800236e:	4b7d      	ldr	r3, [pc, #500]	; (8002564 <regulacija+0x11d4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a7e      	ldr	r2, [pc, #504]	; (800256c <regulacija+0x11dc>)
 8002374:	6013      	str	r3, [r2, #0]

			if (d_ei > d_ei_max){
 8002376:	4b7c      	ldr	r3, [pc, #496]	; (8002568 <regulacija+0x11d8>)
 8002378:	ed93 7a00 	vldr	s14, [r3]
 800237c:	4b7d      	ldr	r3, [pc, #500]	; (8002574 <regulacija+0x11e4>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	dd03      	ble.n	8002394 <regulacija+0x1004>
				d_ei = d_ei_max;}
 800238c:	4b79      	ldr	r3, [pc, #484]	; (8002574 <regulacija+0x11e4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a75      	ldr	r2, [pc, #468]	; (8002568 <regulacija+0x11d8>)
 8002392:	6013      	str	r3, [r2, #0]
			if (d_ei < d_ei_min){
 8002394:	4b74      	ldr	r3, [pc, #464]	; (8002568 <regulacija+0x11d8>)
 8002396:	ed93 7a00 	vldr	s14, [r3]
 800239a:	4b77      	ldr	r3, [pc, #476]	; (8002578 <regulacija+0x11e8>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	d503      	bpl.n	80023b2 <regulacija+0x1022>
				d_ei = d_ei_min;}
 80023aa:	4b73      	ldr	r3, [pc, #460]	; (8002578 <regulacija+0x11e8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a6e      	ldr	r2, [pc, #440]	; (8002568 <regulacija+0x11d8>)
 80023b0:	6013      	str	r3, [r2, #0]

			Vdr += (Kpd * d_e + Kid * d_ei + Kdd * d_de);
 80023b2:	4b72      	ldr	r3, [pc, #456]	; (800257c <regulacija+0x11ec>)
 80023b4:	ed93 7a00 	vldr	s14, [r3]
 80023b8:	4b6a      	ldr	r3, [pc, #424]	; (8002564 <regulacija+0x11d4>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c2:	4b6f      	ldr	r3, [pc, #444]	; (8002580 <regulacija+0x11f0>)
 80023c4:	edd3 6a00 	vldr	s13, [r3]
 80023c8:	4b67      	ldr	r3, [pc, #412]	; (8002568 <regulacija+0x11d8>)
 80023ca:	edd3 7a00 	vldr	s15, [r3]
 80023ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d6:	4b6b      	ldr	r3, [pc, #428]	; (8002584 <regulacija+0x11f4>)
 80023d8:	edd3 6a00 	vldr	s13, [r3]
 80023dc:	4b64      	ldr	r3, [pc, #400]	; (8002570 <regulacija+0x11e0>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ea:	4b5a      	ldr	r3, [pc, #360]	; (8002554 <regulacija+0x11c4>)
 80023ec:	edd3 7a00 	vldr	s15, [r3]
 80023f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f4:	4b57      	ldr	r3, [pc, #348]	; (8002554 <regulacija+0x11c4>)
 80023f6:	edc3 7a00 	vstr	s15, [r3]
			Vdl += (Kpd * d_e + Kid * d_ei + Kdd * d_de);
 80023fa:	4b60      	ldr	r3, [pc, #384]	; (800257c <regulacija+0x11ec>)
 80023fc:	ed93 7a00 	vldr	s14, [r3]
 8002400:	4b58      	ldr	r3, [pc, #352]	; (8002564 <regulacija+0x11d4>)
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	ee27 7a27 	vmul.f32	s14, s14, s15
 800240a:	4b5d      	ldr	r3, [pc, #372]	; (8002580 <regulacija+0x11f0>)
 800240c:	edd3 6a00 	vldr	s13, [r3]
 8002410:	4b55      	ldr	r3, [pc, #340]	; (8002568 <regulacija+0x11d8>)
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800241a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800241e:	4b59      	ldr	r3, [pc, #356]	; (8002584 <regulacija+0x11f4>)
 8002420:	edd3 6a00 	vldr	s13, [r3]
 8002424:	4b52      	ldr	r3, [pc, #328]	; (8002570 <regulacija+0x11e0>)
 8002426:	edd3 7a00 	vldr	s15, [r3]
 800242a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002432:	4b49      	ldr	r3, [pc, #292]	; (8002558 <regulacija+0x11c8>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243c:	4b46      	ldr	r3, [pc, #280]	; (8002558 <regulacija+0x11c8>)
 800243e:	edc3 7a00 	vstr	s15, [r3]
			  //teta_ei = 0;
			  //d_ei = 0;

		}

		acc = 0.5;
 8002442:	4b51      	ldr	r3, [pc, #324]	; (8002588 <regulacija+0x11f8>)
 8002444:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002448:	601a      	str	r2, [r3, #0]

		if (fabs(teta_e) < M_PI/20 && fabs(d_e) < d_e_min)
 800244a:	4b3e      	ldr	r3, [pc, #248]	; (8002544 <regulacija+0x11b4>)
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	eef0 7ae7 	vabs.f32	s15, s15
 8002454:	ee17 0a90 	vmov	r0, s15
 8002458:	f7fe f822 	bl	80004a0 <__aeabi_f2d>
 800245c:	a334      	add	r3, pc, #208	; (adr r3, 8002530 <regulacija+0x11a0>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fe fae7 	bl	8000a34 <__aeabi_dcmplt>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d010      	beq.n	800248e <regulacija+0x10fe>
 800246c:	4b3d      	ldr	r3, [pc, #244]	; (8002564 <regulacija+0x11d4>)
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	eeb0 7ae7 	vabs.f32	s14, s15
 8002476:	4b45      	ldr	r3, [pc, #276]	; (800258c <regulacija+0x11fc>)
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002484:	d503      	bpl.n	800248e <regulacija+0x10fe>
			acc = 1;
 8002486:	4b40      	ldr	r3, [pc, #256]	; (8002588 <regulacija+0x11f8>)
 8002488:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800248c:	601a      	str	r2, [r3, #0]


		if (fabs(teta_e) < teta_min)
 800248e:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <regulacija+0x11b4>)
 8002490:	edd3 7a00 	vldr	s15, [r3]
 8002494:	eeb0 7ae7 	vabs.f32	s14, s15
 8002498:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <regulacija+0x1200>)
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a6:	d503      	bpl.n	80024b0 <regulacija+0x1120>
			{
			  //medju_stanje();
			  faza = 3;
 80024a8:	4b2c      	ldr	r3, [pc, #176]	; (800255c <regulacija+0x11cc>)
 80024aa:	2203      	movs	r2, #3
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	e002      	b.n	80024b6 <regulacija+0x1126>
			  //teta_ei = 0;
			  //d_ei = 0;
			}
		else
			faza = 2;
 80024b0:	4b2a      	ldr	r3, [pc, #168]	; (800255c <regulacija+0x11cc>)
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]
		//prosledi_pwm(Vdr, Vdl, Vr, Vl);

		}


	if (fabs(Vdr) > 100) {
 80024b6:	4b27      	ldr	r3, [pc, #156]	; (8002554 <regulacija+0x11c4>)
 80024b8:	edd3 7a00 	vldr	s15, [r3]
 80024bc:	eef0 7ae7 	vabs.f32	s15, s15
 80024c0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002594 <regulacija+0x1204>
 80024c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024cc:	dd16      	ble.n	80024fc <regulacija+0x116c>
		if (Vdr < 0) {
 80024ce:	4b21      	ldr	r3, [pc, #132]	; (8002554 <regulacija+0x11c4>)
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	d503      	bpl.n	80024e6 <regulacija+0x1156>
			Vdr = -100;
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <regulacija+0x11c4>)
 80024e0:	4a2d      	ldr	r2, [pc, #180]	; (8002598 <regulacija+0x1208>)
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e00a      	b.n	80024fc <regulacija+0x116c>
		} else if (Vdr > 0) {
 80024e6:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <regulacija+0x11c4>)
 80024e8:	edd3 7a00 	vldr	s15, [r3]
 80024ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	dd02      	ble.n	80024fc <regulacija+0x116c>
			Vdr = 100;
 80024f6:	4b17      	ldr	r3, [pc, #92]	; (8002554 <regulacija+0x11c4>)
 80024f8:	4a28      	ldr	r2, [pc, #160]	; (800259c <regulacija+0x120c>)
 80024fa:	601a      	str	r2, [r3, #0]
		}
	}
	if (fabs(Vdl) > 100) {
 80024fc:	4b16      	ldr	r3, [pc, #88]	; (8002558 <regulacija+0x11c8>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	eef0 7ae7 	vabs.f32	s15, s15
 8002506:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002594 <regulacija+0x1204>
 800250a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	dd50      	ble.n	80025b6 <regulacija+0x1226>
		if (Vdl < 0) {
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <regulacija+0x11c8>)
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	d53d      	bpl.n	80025a0 <regulacija+0x1210>
			Vdl = -100;
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <regulacija+0x11c8>)
 8002526:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <regulacija+0x1208>)
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e044      	b.n	80025b6 <regulacija+0x1226>
 800252c:	f3af 8000 	nop.w
 8002530:	769cf0e0 	.word	0x769cf0e0
 8002534:	3fc41b2f 	.word	0x3fc41b2f
 8002538:	20000124 	.word	0x20000124
 800253c:	20000104 	.word	0x20000104
 8002540:	200000e4 	.word	0x200000e4
 8002544:	20000114 	.word	0x20000114
 8002548:	200000e8 	.word	0x200000e8
 800254c:	200000ec 	.word	0x200000ec
 8002550:	20000118 	.word	0x20000118
 8002554:	200000f8 	.word	0x200000f8
 8002558:	200000f0 	.word	0x200000f0
 800255c:	20000154 	.word	0x20000154
 8002560:	2000013c 	.word	0x2000013c
 8002564:	20000128 	.word	0x20000128
 8002568:	2000012c 	.word	0x2000012c
 800256c:	20000130 	.word	0x20000130
 8002570:	20000134 	.word	0x20000134
 8002574:	20000108 	.word	0x20000108
 8002578:	2000010c 	.word	0x2000010c
 800257c:	200000d8 	.word	0x200000d8
 8002580:	200000dc 	.word	0x200000dc
 8002584:	200000e0 	.word	0x200000e0
 8002588:	20000004 	.word	0x20000004
 800258c:	20000000 	.word	0x20000000
 8002590:	20000120 	.word	0x20000120
 8002594:	42c80000 	.word	0x42c80000
 8002598:	c2c80000 	.word	0xc2c80000
 800259c:	42c80000 	.word	0x42c80000
		} else if (Vdl > 0) {
 80025a0:	4b57      	ldr	r3, [pc, #348]	; (8002700 <regulacija+0x1370>)
 80025a2:	edd3 7a00 	vldr	s15, [r3]
 80025a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ae:	dd02      	ble.n	80025b6 <regulacija+0x1226>
			Vdl = 100;
 80025b0:	4b53      	ldr	r3, [pc, #332]	; (8002700 <regulacija+0x1370>)
 80025b2:	4a54      	ldr	r2, [pc, #336]	; (8002704 <regulacija+0x1374>)
 80025b4:	601a      	str	r2, [r3, #0]
		}
	}


	if (Vl < Vdl)
 80025b6:	4b54      	ldr	r3, [pc, #336]	; (8002708 <regulacija+0x1378>)
 80025b8:	ed93 7a00 	vldr	s14, [r3]
 80025bc:	4b50      	ldr	r3, [pc, #320]	; (8002700 <regulacija+0x1370>)
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ca:	d50a      	bpl.n	80025e2 <regulacija+0x1252>
		Vl += acc;
 80025cc:	4b4f      	ldr	r3, [pc, #316]	; (800270c <regulacija+0x137c>)
 80025ce:	ed93 7a00 	vldr	s14, [r3]
 80025d2:	4b4d      	ldr	r3, [pc, #308]	; (8002708 <regulacija+0x1378>)
 80025d4:	edd3 7a00 	vldr	s15, [r3]
 80025d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025dc:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <regulacija+0x1378>)
 80025de:	edc3 7a00 	vstr	s15, [r3]
	if (Vl > Vdl)
 80025e2:	4b49      	ldr	r3, [pc, #292]	; (8002708 <regulacija+0x1378>)
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	4b45      	ldr	r3, [pc, #276]	; (8002700 <regulacija+0x1370>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	dd0a      	ble.n	800260e <regulacija+0x127e>
		Vl -= acc;
 80025f8:	4b44      	ldr	r3, [pc, #272]	; (800270c <regulacija+0x137c>)
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	4b42      	ldr	r3, [pc, #264]	; (8002708 <regulacija+0x1378>)
 8002600:	ed93 7a00 	vldr	s14, [r3]
 8002604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002608:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <regulacija+0x1378>)
 800260a:	edc3 7a00 	vstr	s15, [r3]
	if (Vr > Vdr)
 800260e:	4b40      	ldr	r3, [pc, #256]	; (8002710 <regulacija+0x1380>)
 8002610:	ed93 7a00 	vldr	s14, [r3]
 8002614:	4b3f      	ldr	r3, [pc, #252]	; (8002714 <regulacija+0x1384>)
 8002616:	edd3 7a00 	vldr	s15, [r3]
 800261a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800261e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002622:	dd0a      	ble.n	800263a <regulacija+0x12aa>
		Vr -= acc;
 8002624:	4b39      	ldr	r3, [pc, #228]	; (800270c <regulacija+0x137c>)
 8002626:	edd3 7a00 	vldr	s15, [r3]
 800262a:	4b39      	ldr	r3, [pc, #228]	; (8002710 <regulacija+0x1380>)
 800262c:	ed93 7a00 	vldr	s14, [r3]
 8002630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002634:	4b36      	ldr	r3, [pc, #216]	; (8002710 <regulacija+0x1380>)
 8002636:	edc3 7a00 	vstr	s15, [r3]
	if (Vr < Vdr){
 800263a:	4b35      	ldr	r3, [pc, #212]	; (8002710 <regulacija+0x1380>)
 800263c:	ed93 7a00 	vldr	s14, [r3]
 8002640:	4b34      	ldr	r3, [pc, #208]	; (8002714 <regulacija+0x1384>)
 8002642:	edd3 7a00 	vldr	s15, [r3]
 8002646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264e:	d50a      	bpl.n	8002666 <regulacija+0x12d6>
		Vr += acc;}
 8002650:	4b2e      	ldr	r3, [pc, #184]	; (800270c <regulacija+0x137c>)
 8002652:	ed93 7a00 	vldr	s14, [r3]
 8002656:	4b2e      	ldr	r3, [pc, #184]	; (8002710 <regulacija+0x1380>)
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002660:	4b2b      	ldr	r3, [pc, #172]	; (8002710 <regulacija+0x1380>)
 8002662:	edc3 7a00 	vstr	s15, [r3]

		//Vr = 0;
		//Vl = 0;

	if (Vl < 0){ // smer 2
 8002666:	4b28      	ldr	r3, [pc, #160]	; (8002708 <regulacija+0x1378>)
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	d509      	bpl.n	800268a <regulacija+0x12fa>
		faktor_ispune_t1_smer2(fabs(Vl));
 8002676:	4b24      	ldr	r3, [pc, #144]	; (8002708 <regulacija+0x1378>)
 8002678:	edd3 7a00 	vldr	s15, [r3]
 800267c:	eef0 7ae7 	vabs.f32	s15, s15
 8002680:	eeb0 0a67 	vmov.f32	s0, s15
 8002684:	f7fe fdf8 	bl	8001278 <faktor_ispune_t1_smer2>
 8002688:	e010      	b.n	80026ac <regulacija+0x131c>
	} else if (Vl > 0) { // smer 1
 800268a:	4b1f      	ldr	r3, [pc, #124]	; (8002708 <regulacija+0x1378>)
 800268c:	edd3 7a00 	vldr	s15, [r3]
 8002690:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002698:	dd08      	ble.n	80026ac <regulacija+0x131c>
		faktor_ispune_t1_smer1(fabs(Vl));
 800269a:	4b1b      	ldr	r3, [pc, #108]	; (8002708 <regulacija+0x1378>)
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	eef0 7ae7 	vabs.f32	s15, s15
 80026a4:	eeb0 0a67 	vmov.f32	s0, s15
 80026a8:	f7fe fdb8 	bl	800121c <faktor_ispune_t1_smer1>
	}
	if (Vr < 0) { //smer 2
 80026ac:	4b18      	ldr	r3, [pc, #96]	; (8002710 <regulacija+0x1380>)
 80026ae:	edd3 7a00 	vldr	s15, [r3]
 80026b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ba:	d509      	bpl.n	80026d0 <regulacija+0x1340>
		faktor_ispune_t2_smer2(fabs(Vr));
 80026bc:	4b14      	ldr	r3, [pc, #80]	; (8002710 <regulacija+0x1380>)
 80026be:	edd3 7a00 	vldr	s15, [r3]
 80026c2:	eef0 7ae7 	vabs.f32	s15, s15
 80026c6:	eeb0 0a67 	vmov.f32	s0, s15
 80026ca:	f7fe fe03 	bl	80012d4 <faktor_ispune_t2_smer2>
	} else if (Vr > 0) { //smer 1
		faktor_ispune_t2_smer1(fabs(Vr));
	}

	}
}
 80026ce:	e011      	b.n	80026f4 <regulacija+0x1364>
	} else if (Vr > 0) { //smer 1
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <regulacija+0x1380>)
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026de:	dc00      	bgt.n	80026e2 <regulacija+0x1352>
}
 80026e0:	e008      	b.n	80026f4 <regulacija+0x1364>
		faktor_ispune_t2_smer1(fabs(Vr));
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <regulacija+0x1380>)
 80026e4:	edd3 7a00 	vldr	s15, [r3]
 80026e8:	eef0 7ae7 	vabs.f32	s15, s15
 80026ec:	eeb0 0a67 	vmov.f32	s0, s15
 80026f0:	f7fe fe1e 	bl	8001330 <faktor_ispune_t2_smer1>
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	ecbd 8b02 	vpop	{d8}
 80026fc:	bdb0      	pop	{r4, r5, r7, pc}
 80026fe:	bf00      	nop
 8002700:	200000f0 	.word	0x200000f0
 8002704:	42c80000 	.word	0x42c80000
 8002708:	200000f4 	.word	0x200000f4
 800270c:	20000004 	.word	0x20000004
 8002710:	200000fc 	.word	0x200000fc
 8002714:	200000f8 	.word	0x200000f8

08002718 <tim5_init>:
uint32_t TIME = 0;


void
tim5_init (void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  RCC->APB1ENR |= (0b1 << 3);
 800271c:	4b1a      	ldr	r3, [pc, #104]	; (8002788 <tim5_init+0x70>)
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	4a19      	ldr	r2, [pc, #100]	; (8002788 <tim5_init+0x70>)
 8002722:	f043 0308 	orr.w	r3, r3, #8
 8002726:	6413      	str	r3, [r2, #64]	; 0x40

  TIM5->CR1 &= ~(0xffff);
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <tim5_init+0x74>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a17      	ldr	r2, [pc, #92]	; (800278c <tim5_init+0x74>)
 800272e:	0c1b      	lsrs	r3, r3, #16
 8002730:	041b      	lsls	r3, r3, #16
 8002732:	6013      	str	r3, [r2, #0]
  TIM5->CR1 |= ((0b1 << 2) | (0b1 << 7));
 8002734:	4b15      	ldr	r3, [pc, #84]	; (800278c <tim5_init+0x74>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a14      	ldr	r2, [pc, #80]	; (800278c <tim5_init+0x74>)
 800273a:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800273e:	6013      	str	r3, [r2, #0]

  TIM5->DIER |= (0b1 << 0);
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <tim5_init+0x74>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a11      	ldr	r2, [pc, #68]	; (800278c <tim5_init+0x74>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	60d3      	str	r3, [r2, #12]


  TIM5->PSC = (42 - 1);
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <tim5_init+0x74>)
 800274e:	2229      	movs	r2, #41	; 0x29
 8002750:	629a      	str	r2, [r3, #40]	; 0x28
  TIM5->ARR = (1000 - 1);
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <tim5_init+0x74>)
 8002754:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002758:	62da      	str	r2, [r3, #44]	; 0x2c

  TIM5->EGR |= (0b1 << 0);
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <tim5_init+0x74>)
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	4a0b      	ldr	r2, [pc, #44]	; (800278c <tim5_init+0x74>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6153      	str	r3, [r2, #20]

  TIM5->CR1 |= (0b1 << 0);
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <tim5_init+0x74>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a08      	ldr	r2, [pc, #32]	; (800278c <tim5_init+0x74>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6013      	str	r3, [r2, #0]

  NVIC->ISER[1] |= (0b1 << 18);
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <tim5_init+0x78>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4a06      	ldr	r2, [pc, #24]	; (8002790 <tim5_init+0x78>)
 8002778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800277c:	6053      	str	r3, [r2, #4]
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40023800 	.word	0x40023800
 800278c:	40000c00 	.word	0x40000c00
 8002790:	e000e100 	.word	0xe000e100

08002794 <TIM5_IRQHandler>:



void
TIM5_IRQHandler(void) //Ovim interaptom menjati promenjive, a promenjive proveravati (if) pa slati preko UART interapta
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  if (TIM5->SR & (0b1 << 0))
 8002798:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <TIM5_IRQHandler+0xf0>)
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d06d      	beq.n	8002880 <TIM5_IRQHandler+0xec>
    {
      TIM5->SR &= ~(0b1 << 0);
 80027a4:	4b37      	ldr	r3, [pc, #220]	; (8002884 <TIM5_IRQHandler+0xf0>)
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	4a36      	ldr	r2, [pc, #216]	; (8002884 <TIM5_IRQHandler+0xf0>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	6113      	str	r3, [r2, #16]
      TIME ++;
 80027b0:	4b35      	ldr	r3, [pc, #212]	; (8002888 <TIM5_IRQHandler+0xf4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3301      	adds	r3, #1
 80027b6:	4a34      	ldr	r2, [pc, #208]	; (8002888 <TIM5_IRQHandler+0xf4>)
 80027b8:	6013      	str	r3, [r2, #0]
      sens_robot();
 80027ba:	f7fe fb8d 	bl	8000ed8 <sens_robot>
      regulacija();
 80027be:	f7fe fde7 	bl	8001390 <regulacija>
      //regulacija_ugla();


      if ((GPIOC->IDR & (0b1 << 0)) == (0b1 << 0))
 80027c2:	4b32      	ldr	r3, [pc, #200]	; (800288c <TIM5_IRQHandler+0xf8>)
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d103      	bne.n	80027d6 <TIM5_IRQHandler+0x42>
	{
    	  senzor1 = 150;
 80027ce:	4b30      	ldr	r3, [pc, #192]	; (8002890 <TIM5_IRQHandler+0xfc>)
 80027d0:	2296      	movs	r2, #150	; 0x96
 80027d2:	701a      	strb	r2, [r3, #0]
 80027d4:	e008      	b.n	80027e8 <TIM5_IRQHandler+0x54>
	}

      else if ((GPIOC->IDR & (0b1 << 0)) == 0)
 80027d6:	4b2d      	ldr	r3, [pc, #180]	; (800288c <TIM5_IRQHandler+0xf8>)
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <TIM5_IRQHandler+0x54>
	{
    	  senzor1 = 0;
 80027e2:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <TIM5_IRQHandler+0xfc>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
	}

      if ((GPIOC->IDR & (0b1 << 1)) == (0b1 << 1))
 80027e8:	4b28      	ldr	r3, [pc, #160]	; (800288c <TIM5_IRQHandler+0xf8>)
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d103      	bne.n	80027fc <TIM5_IRQHandler+0x68>
	{
    	  senzor2 = 150;
 80027f4:	4b27      	ldr	r3, [pc, #156]	; (8002894 <TIM5_IRQHandler+0x100>)
 80027f6:	2296      	movs	r2, #150	; 0x96
 80027f8:	701a      	strb	r2, [r3, #0]
 80027fa:	e008      	b.n	800280e <TIM5_IRQHandler+0x7a>
	}

      else if ((GPIOC->IDR & (0b1 << 1)) == 0)
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <TIM5_IRQHandler+0xf8>)
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <TIM5_IRQHandler+0x7a>
	{
    	  senzor2 = 0;
 8002808:	4b22      	ldr	r3, [pc, #136]	; (8002894 <TIM5_IRQHandler+0x100>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
	}

      if ((GPIOC->IDR & (0b1 << 2)) == (0b1 << 2))
 800280e:	4b1f      	ldr	r3, [pc, #124]	; (800288c <TIM5_IRQHandler+0xf8>)
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b04      	cmp	r3, #4
 8002818:	d103      	bne.n	8002822 <TIM5_IRQHandler+0x8e>
	{
    	  senzor3 = 150;
 800281a:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <TIM5_IRQHandler+0x104>)
 800281c:	2296      	movs	r2, #150	; 0x96
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e008      	b.n	8002834 <TIM5_IRQHandler+0xa0>
	}

      else if ((GPIOC->IDR & (0b1 << 2)) == 0)
 8002822:	4b1a      	ldr	r3, [pc, #104]	; (800288c <TIM5_IRQHandler+0xf8>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d102      	bne.n	8002834 <TIM5_IRQHandler+0xa0>
	{
    	  senzor3 = 0;
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <TIM5_IRQHandler+0x104>)
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
	}

      if ((GPIOC->IDR & (0b1 << 3)) == (0b1 << 3))
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <TIM5_IRQHandler+0xf8>)
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b08      	cmp	r3, #8
 800283e:	d103      	bne.n	8002848 <TIM5_IRQHandler+0xb4>
	{
    	  senzor4 = 150;
 8002840:	4b16      	ldr	r3, [pc, #88]	; (800289c <TIM5_IRQHandler+0x108>)
 8002842:	2296      	movs	r2, #150	; 0x96
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e008      	b.n	800285a <TIM5_IRQHandler+0xc6>
	}

      else if ((GPIOC->IDR & (0b1 << 3)) == 0)
 8002848:	4b10      	ldr	r3, [pc, #64]	; (800288c <TIM5_IRQHandler+0xf8>)
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d102      	bne.n	800285a <TIM5_IRQHandler+0xc6>
	{
    	  senzor4 = 0;
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <TIM5_IRQHandler+0x108>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
	}

      if (((GPIOC->IDR & (0b1 << 5))) == (0b1 << 5))
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <TIM5_IRQHandler+0xf8>)
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b20      	cmp	r3, #32
 8002864:	d103      	bne.n	800286e <TIM5_IRQHandler+0xda>
	{
    	  senzor5 = 150;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <TIM5_IRQHandler+0x10c>)
 8002868:	2296      	movs	r2, #150	; 0x96
 800286a:	701a      	strb	r2, [r3, #0]
	}

      //TESTIRANJE ///////////////////////////////////////////////////////////////////////////
      //////////////////////////////////////////////////////////////////////////////////////
    }
}
 800286c:	e008      	b.n	8002880 <TIM5_IRQHandler+0xec>
      else if (((GPIOC->IDR & (0b1 << 5))) == 0)
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <TIM5_IRQHandler+0xf8>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <TIM5_IRQHandler+0xec>
    	  senzor5 = 0;
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <TIM5_IRQHandler+0x10c>)
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
}
 8002880:	bf00      	nop
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40000c00 	.word	0x40000c00
 8002888:	2000015c 	.word	0x2000015c
 800288c:	40020800 	.word	0x40020800
 8002890:	20000155 	.word	0x20000155
 8002894:	20000156 	.word	0x20000156
 8002898:	20000157 	.word	0x20000157
 800289c:	20000158 	.word	0x20000158
 80028a0:	20000159 	.word	0x20000159

080028a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80028aa:	f001 fbe5 	bl	8004078 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80028ae:	f000 ff39 	bl	8003724 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80028b2:	f001 f937 	bl	8003b24 <MX_GPIO_Init>
	MX_TIM3_Init();
 80028b6:	f001 f863 	bl	8003980 <MX_TIM3_Init>
	MX_TIM4_Init();
 80028ba:	f001 f8b5 	bl	8003a28 <MX_TIM4_Init>
	MX_TIM1_Init();
 80028be:	f000 ff9b 	bl	80037f8 <MX_TIM1_Init>
	MX_USART6_UART_Init();
 80028c2:	f001 f905 	bl	8003ad0 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	tim5_init();
 80028c6:	f7ff ff27 	bl	8002718 <tim5_init>
	pid_init();
 80028ca:	f7fe fc49 	bl	8001160 <pid_init>
	extern float teta_d;
	extern float teta_min, x_d, y_d, teta_ei;
	extern float teta_ei;
	extern uint8_t faza;
	extern int kreni;
	teta_min = 0.045;
 80028ce:	4bc8      	ldr	r3, [pc, #800]	; (8002bf0 <main+0x34c>)
 80028d0:	4ac8      	ldr	r2, [pc, #800]	; (8002bf4 <main+0x350>)
 80028d2:	601a      	str	r2, [r3, #0]
	teta_d = 0; //M_PI/2.0;
 80028d4:	4bc8      	ldr	r3, [pc, #800]	; (8002bf8 <main+0x354>)
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

	x_d = 0.0;
 80028dc:	4bc7      	ldr	r3, [pc, #796]	; (8002bfc <main+0x358>)
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
	y_d = 0.0;
 80028e4:	4bc6      	ldr	r3, [pc, #792]	; (8002c00 <main+0x35c>)
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
	teta_d = 0.0;
 80028ec:	4bc2      	ldr	r3, [pc, #776]	; (8002bf8 <main+0x354>)
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

	faza = 0;
 80028f4:	4bc3      	ldr	r3, [pc, #780]	; (8002c04 <main+0x360>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]
	teta_ei = 0.0;
 80028fa:	4bc3      	ldr	r3, [pc, #780]	; (8002c08 <main+0x364>)
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
	upravljanje = 40;
 8002902:	4bc2      	ldr	r3, [pc, #776]	; (8002c0c <main+0x368>)
 8002904:	2228      	movs	r2, #40	; 0x28
 8002906:	701a      	strb	r2, [r3, #0]

	volatile uint8_t flag_send = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	70fb      	strb	r3, [r7, #3]
	int step_init = 1;
 800290c:	2301      	movs	r3, #1
 800290e:	607b      	str	r3, [r7, #4]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002910:	213c      	movs	r1, #60	; 0x3c
 8002912:	48bf      	ldr	r0, [pc, #764]	; (8002c10 <main+0x36c>)
 8002914:	f002 fd8c 	bl	8005430 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002918:	213c      	movs	r1, #60	; 0x3c
 800291a:	48be      	ldr	r0, [pc, #760]	; (8002c14 <main+0x370>)
 800291c:	f002 fd88 	bl	8005430 <HAL_TIM_Encoder_Start>

	//faktor_ispune_t2_smer1((float)upravljanje);
	//faktor_ispune_t1_smer1((float)upravljanje);
	//pokreni_traku(upravljanje);

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002920:	2100      	movs	r1, #0
 8002922:	48bd      	ldr	r0, [pc, #756]	; (8002c18 <main+0x374>)
 8002924:	f002 fc2e 	bl	8005184 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002928:	2104      	movs	r1, #4
 800292a:	48bb      	ldr	r0, [pc, #748]	; (8002c18 <main+0x374>)
 800292c:	f002 fc2a 	bl	8005184 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002930:	2108      	movs	r1, #8
 8002932:	48b9      	ldr	r0, [pc, #740]	; (8002c18 <main+0x374>)
 8002934:	f002 fc26 	bl	8005184 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002938:	210c      	movs	r1, #12
 800293a:	48b7      	ldr	r0, [pc, #732]	; (8002c18 <main+0x374>)
 800293c:	f002 fc22 	bl	8005184 <HAL_TIM_PWM_Start>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1) {

		switch (step) { //ljubicasta strana, sto 1
 8002940:	4bb6      	ldr	r3, [pc, #728]	; (8002c1c <main+0x378>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b97      	cmp	r3, #151	; 0x97
 8002946:	d8fb      	bhi.n	8002940 <main+0x9c>
 8002948:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <main+0xac>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002bb1 	.word	0x08002bb1
 8002954:	08002c31 	.word	0x08002c31
 8002958:	08002c93 	.word	0x08002c93
 800295c:	08002d05 	.word	0x08002d05
 8002960:	08002d63 	.word	0x08002d63
 8002964:	08002e13 	.word	0x08002e13
 8002968:	08002f1d 	.word	0x08002f1d
 800296c:	08002f5f 	.word	0x08002f5f
 8002970:	08002fd5 	.word	0x08002fd5
 8002974:	08003019 	.word	0x08003019
 8002978:	08003091 	.word	0x08003091
 800297c:	080031ed 	.word	0x080031ed
 8002980:	08003259 	.word	0x08003259
 8002984:	0800334b 	.word	0x0800334b
 8002988:	080033a7 	.word	0x080033a7
 800298c:	080033e9 	.word	0x080033e9
 8002990:	08003517 	.word	0x08003517
 8002994:	08003563 	.word	0x08003563
 8002998:	080035af 	.word	0x080035af
 800299c:	080035f5 	.word	0x080035f5
 80029a0:	0800363b 	.word	0x0800363b
 80029a4:	08002941 	.word	0x08002941
 80029a8:	08002941 	.word	0x08002941
 80029ac:	08002941 	.word	0x08002941
 80029b0:	08002941 	.word	0x08002941
 80029b4:	08002941 	.word	0x08002941
 80029b8:	08002941 	.word	0x08002941
 80029bc:	08002941 	.word	0x08002941
 80029c0:	08002941 	.word	0x08002941
 80029c4:	08002941 	.word	0x08002941
 80029c8:	08002941 	.word	0x08002941
 80029cc:	08002941 	.word	0x08002941
 80029d0:	08002941 	.word	0x08002941
 80029d4:	08002941 	.word	0x08002941
 80029d8:	08002941 	.word	0x08002941
 80029dc:	08002941 	.word	0x08002941
 80029e0:	08002941 	.word	0x08002941
 80029e4:	08002941 	.word	0x08002941
 80029e8:	08002941 	.word	0x08002941
 80029ec:	08002941 	.word	0x08002941
 80029f0:	08002941 	.word	0x08002941
 80029f4:	08002941 	.word	0x08002941
 80029f8:	08002941 	.word	0x08002941
 80029fc:	08002941 	.word	0x08002941
 8002a00:	08002941 	.word	0x08002941
 8002a04:	08002941 	.word	0x08002941
 8002a08:	08002941 	.word	0x08002941
 8002a0c:	08002941 	.word	0x08002941
 8002a10:	08002941 	.word	0x08002941
 8002a14:	08002941 	.word	0x08002941
 8002a18:	08002941 	.word	0x08002941
 8002a1c:	08002941 	.word	0x08002941
 8002a20:	08002941 	.word	0x08002941
 8002a24:	08002941 	.word	0x08002941
 8002a28:	08002941 	.word	0x08002941
 8002a2c:	08002941 	.word	0x08002941
 8002a30:	08002941 	.word	0x08002941
 8002a34:	08002941 	.word	0x08002941
 8002a38:	08002941 	.word	0x08002941
 8002a3c:	08002941 	.word	0x08002941
 8002a40:	08002941 	.word	0x08002941
 8002a44:	08002941 	.word	0x08002941
 8002a48:	08002941 	.word	0x08002941
 8002a4c:	08002941 	.word	0x08002941
 8002a50:	08002941 	.word	0x08002941
 8002a54:	08002941 	.word	0x08002941
 8002a58:	08002941 	.word	0x08002941
 8002a5c:	08002941 	.word	0x08002941
 8002a60:	08002941 	.word	0x08002941
 8002a64:	08002941 	.word	0x08002941
 8002a68:	08002941 	.word	0x08002941
 8002a6c:	08002941 	.word	0x08002941
 8002a70:	08002941 	.word	0x08002941
 8002a74:	08002941 	.word	0x08002941
 8002a78:	08002941 	.word	0x08002941
 8002a7c:	08002941 	.word	0x08002941
 8002a80:	08002941 	.word	0x08002941
 8002a84:	08002941 	.word	0x08002941
 8002a88:	08002941 	.word	0x08002941
 8002a8c:	08002941 	.word	0x08002941
 8002a90:	08002941 	.word	0x08002941
 8002a94:	08002941 	.word	0x08002941
 8002a98:	08002941 	.word	0x08002941
 8002a9c:	08002941 	.word	0x08002941
 8002aa0:	08002941 	.word	0x08002941
 8002aa4:	08002941 	.word	0x08002941
 8002aa8:	08002941 	.word	0x08002941
 8002aac:	08002941 	.word	0x08002941
 8002ab0:	08002941 	.word	0x08002941
 8002ab4:	08002941 	.word	0x08002941
 8002ab8:	08002941 	.word	0x08002941
 8002abc:	08002941 	.word	0x08002941
 8002ac0:	08002941 	.word	0x08002941
 8002ac4:	08002941 	.word	0x08002941
 8002ac8:	08002941 	.word	0x08002941
 8002acc:	08002941 	.word	0x08002941
 8002ad0:	08002941 	.word	0x08002941
 8002ad4:	08002941 	.word	0x08002941
 8002ad8:	08002941 	.word	0x08002941
 8002adc:	08002941 	.word	0x08002941
 8002ae0:	08002941 	.word	0x08002941
 8002ae4:	0800311b 	.word	0x0800311b
 8002ae8:	08002941 	.word	0x08002941
 8002aec:	08002941 	.word	0x08002941
 8002af0:	08002941 	.word	0x08002941
 8002af4:	08002941 	.word	0x08002941
 8002af8:	08002941 	.word	0x08002941
 8002afc:	08002941 	.word	0x08002941
 8002b00:	08002941 	.word	0x08002941
 8002b04:	08002941 	.word	0x08002941
 8002b08:	08002941 	.word	0x08002941
 8002b0c:	08002941 	.word	0x08002941
 8002b10:	08002941 	.word	0x08002941
 8002b14:	08002941 	.word	0x08002941
 8002b18:	08002941 	.word	0x08002941
 8002b1c:	08002941 	.word	0x08002941
 8002b20:	08002941 	.word	0x08002941
 8002b24:	08002941 	.word	0x08002941
 8002b28:	08002941 	.word	0x08002941
 8002b2c:	08002941 	.word	0x08002941
 8002b30:	08002941 	.word	0x08002941
 8002b34:	080032eb 	.word	0x080032eb
 8002b38:	08002941 	.word	0x08002941
 8002b3c:	08002941 	.word	0x08002941
 8002b40:	08002941 	.word	0x08002941
 8002b44:	08002941 	.word	0x08002941
 8002b48:	08002941 	.word	0x08002941
 8002b4c:	08002941 	.word	0x08002941
 8002b50:	08002941 	.word	0x08002941
 8002b54:	08002941 	.word	0x08002941
 8002b58:	08002941 	.word	0x08002941
 8002b5c:	08002941 	.word	0x08002941
 8002b60:	08002941 	.word	0x08002941
 8002b64:	08002941 	.word	0x08002941
 8002b68:	08002941 	.word	0x08002941
 8002b6c:	08002941 	.word	0x08002941
 8002b70:	08002941 	.word	0x08002941
 8002b74:	08002941 	.word	0x08002941
 8002b78:	08002941 	.word	0x08002941
 8002b7c:	08002941 	.word	0x08002941
 8002b80:	08002941 	.word	0x08002941
 8002b84:	08002941 	.word	0x08002941
 8002b88:	08002941 	.word	0x08002941
 8002b8c:	08002941 	.word	0x08002941
 8002b90:	08002941 	.word	0x08002941
 8002b94:	08002941 	.word	0x08002941
 8002b98:	08002941 	.word	0x08002941
 8002b9c:	08002941 	.word	0x08002941
 8002ba0:	08002941 	.word	0x08002941
 8002ba4:	08002941 	.word	0x08002941
 8002ba8:	08002941 	.word	0x08002941
 8002bac:	080034d5 	.word	0x080034d5
		case 0:
			if(step_init){
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d010      	beq.n	8002bd8 <main+0x334>
				step_init = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	607b      	str	r3, [r7, #4]
				smer = 2;
 8002bba:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <main+0x37c>)
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	701a      	strb	r2, [r3, #0]
				faza = 0;
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <main+0x360>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
				x_d = -688.93;
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <main+0x358>)
 8002bc8:	4a16      	ldr	r2, [pc, #88]	; (8002c24 <main+0x380>)
 8002bca:	601a      	str	r2, [r3, #0]
				y_d = 132.35;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <main+0x35c>)
 8002bce:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <main+0x384>)
 8002bd0:	601a      	str	r2, [r3, #0]
				teta_d = -0.794889677;
 8002bd2:	4b09      	ldr	r3, [pc, #36]	; (8002bf8 <main+0x354>)
 8002bd4:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <main+0x388>)
 8002bd6:	601a      	str	r2, [r3, #0]
			}
			if(faza == 3){
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <main+0x360>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	f040 8535 	bne.w	800364c <main+0xda8>
				step_init = 1;
 8002be2:	2301      	movs	r3, #1
 8002be4:	607b      	str	r3, [r7, #4]
				step = 1;
 8002be6:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <main+0x378>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002bec:	f000 bd2e 	b.w	800364c <main+0xda8>
 8002bf0:	20000120 	.word	0x20000120
 8002bf4:	3d3851ec 	.word	0x3d3851ec
 8002bf8:	20000110 	.word	0x20000110
 8002bfc:	20000148 	.word	0x20000148
 8002c00:	2000014c 	.word	0x2000014c
 8002c04:	20000154 	.word	0x20000154
 8002c08:	20000124 	.word	0x20000124
 8002c0c:	2000027d 	.word	0x2000027d
 8002c10:	200001a8 	.word	0x200001a8
 8002c14:	200001f0 	.word	0x200001f0
 8002c18:	20000160 	.word	0x20000160
 8002c1c:	2000027e 	.word	0x2000027e
 8002c20:	20000008 	.word	0x20000008
 8002c24:	c42c3b85 	.word	0xc42c3b85
 8002c28:	4304599a 	.word	0x4304599a
 8002c2c:	bf4b7de4 	.word	0xbf4b7de4
		case 1:
			if (flag_send == 0) //ide na prvi
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d107      	bne.n	8002c48 <main+0x3a4>
			{
				HAL_UART_Transmit(&huart6, (uint8_t*) "d", 1, 100);
 8002c38:	2364      	movs	r3, #100	; 0x64
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	4994      	ldr	r1, [pc, #592]	; (8002e90 <main+0x5ec>)
 8002c3e:	4895      	ldr	r0, [pc, #596]	; (8002e94 <main+0x5f0>)
 8002c40:	f003 fb35 	bl	80062ae <HAL_UART_Transmit>
				flag_send = 1;
 8002c44:	2301      	movs	r3, #1
 8002c46:	70fb      	strb	r3, [r7, #3]
			}
			if (step_init) {
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d013      	beq.n	8002c76 <main+0x3d2>
				teta_min  = 0.06;
 8002c4e:	4b92      	ldr	r3, [pc, #584]	; (8002e98 <main+0x5f4>)
 8002c50:	4a92      	ldr	r2, [pc, #584]	; (8002e9c <main+0x5f8>)
 8002c52:	601a      	str	r2, [r3, #0]
				step_init = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	607b      	str	r3, [r7, #4]
				smer = 2;
 8002c58:	4b91      	ldr	r3, [pc, #580]	; (8002ea0 <main+0x5fc>)
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	701a      	strb	r2, [r3, #0]
				faza = 0;
 8002c5e:	4b91      	ldr	r3, [pc, #580]	; (8002ea4 <main+0x600>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
				x_d = -920.0;
 8002c64:	4b90      	ldr	r3, [pc, #576]	; (8002ea8 <main+0x604>)
 8002c66:	4a91      	ldr	r2, [pc, #580]	; (8002eac <main+0x608>)
 8002c68:	601a      	str	r2, [r3, #0]
				y_d = 410.0; //prva
 8002c6a:	4b91      	ldr	r3, [pc, #580]	; (8002eb0 <main+0x60c>)
 8002c6c:	4a91      	ldr	r2, [pc, #580]	; (8002eb4 <main+0x610>)
 8002c6e:	601a      	str	r2, [r3, #0]
				teta_d = -(M_PI/2);
 8002c70:	4b91      	ldr	r3, [pc, #580]	; (8002eb8 <main+0x614>)
 8002c72:	4a92      	ldr	r2, [pc, #584]	; (8002ebc <main+0x618>)
 8002c74:	601a      	str	r2, [r3, #0]

			}
			if (faza == 3) {
 8002c76:	4b8b      	ldr	r3, [pc, #556]	; (8002ea4 <main+0x600>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	f040 84e9 	bne.w	8003652 <main+0xdae>
				step_init = 1;
 8002c80:	2301      	movs	r3, #1
 8002c82:	607b      	str	r3, [r7, #4]
				step = 2;
 8002c84:	4b8e      	ldr	r3, [pc, #568]	; (8002ec0 <main+0x61c>)
 8002c86:	2202      	movs	r2, #2
 8002c88:	701a      	strb	r2, [r3, #0]
				flag_send= 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	70fb      	strb	r3, [r7, #3]
			}
			break;
 8002c8e:	f000 bce0 	b.w	8003652 <main+0xdae>
		case 2:
			if (flag_send == 0) //meri prvi
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d107      	bne.n	8002caa <main+0x406>
			{
				HAL_UART_Transmit(&huart6, (uint8_t*) "e", 1, 100);
 8002c9a:	2364      	movs	r3, #100	; 0x64
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	4989      	ldr	r1, [pc, #548]	; (8002ec4 <main+0x620>)
 8002ca0:	487c      	ldr	r0, [pc, #496]	; (8002e94 <main+0x5f0>)
 8002ca2:	f003 fb04 	bl	80062ae <HAL_UART_Transmit>
				flag_send = 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	70fb      	strb	r3, [r7, #3]
			}
			if (step_init) {
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 84d3 	beq.w	8003658 <main+0xdb4>
				step_init = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	607b      	str	r3, [r7, #4]

				teta_min = 0.055;
 8002cb6:	4b78      	ldr	r3, [pc, #480]	; (8002e98 <main+0x5f4>)
 8002cb8:	4a83      	ldr	r2, [pc, #524]	; (8002ec8 <main+0x624>)
 8002cba:	601a      	str	r2, [r3, #0]
				Kpd = 100; //44
 8002cbc:	4b83      	ldr	r3, [pc, #524]	; (8002ecc <main+0x628>)
 8002cbe:	4a84      	ldr	r2, [pc, #528]	; (8002ed0 <main+0x62c>)
 8002cc0:	601a      	str	r2, [r3, #0]
				Kid = 0.165; //	0.085
 8002cc2:	4b84      	ldr	r3, [pc, #528]	; (8002ed4 <main+0x630>)
 8002cc4:	4a84      	ldr	r2, [pc, #528]	; (8002ed8 <main+0x634>)
 8002cc6:	601a      	str	r2, [r3, #0]
				Kdd = 150000; //24k
 8002cc8:	4b84      	ldr	r3, [pc, #528]	; (8002edc <main+0x638>)
 8002cca:	4a85      	ldr	r2, [pc, #532]	; (8002ee0 <main+0x63c>)
 8002ccc:	601a      	str	r2, [r3, #0]
				teta_ei_max = 110;
 8002cce:	4b85      	ldr	r3, [pc, #532]	; (8002ee4 <main+0x640>)
 8002cd0:	4a85      	ldr	r2, [pc, #532]	; (8002ee8 <main+0x644>)
 8002cd2:	601a      	str	r2, [r3, #0]
				teta_ei_min = -110;
 8002cd4:	4b85      	ldr	r3, [pc, #532]	; (8002eec <main+0x648>)
 8002cd6:	4a86      	ldr	r2, [pc, #536]	; (8002ef0 <main+0x64c>)
 8002cd8:	601a      	str	r2, [r3, #0]

				kreni = 2;
 8002cda:	4b86      	ldr	r3, [pc, #536]	; (8002ef4 <main+0x650>)
 8002cdc:	2202      	movs	r2, #2
 8002cde:	601a      	str	r2, [r3, #0]
				faza = 4;
 8002ce0:	4b70      	ldr	r3, [pc, #448]	; (8002ea4 <main+0x600>)
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	701a      	strb	r2, [r3, #0]
				medju_stanje();
 8002ce6:	f7fe fa89 	bl	80011fc <medju_stanje>
				HAL_Delay(1000);
 8002cea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cee:	f001 fa35 	bl	800415c <HAL_Delay>
				flag_send = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	70fb      	strb	r3, [r7, #3]
				step_init = 1;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	607b      	str	r3, [r7, #4]
				step = 3;
 8002cfa:	4b71      	ldr	r3, [pc, #452]	; (8002ec0 <main+0x61c>)
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d00:	f000 bcaa 	b.w	8003658 <main+0xdb4>
		case 3:
			if (step_init){ //ide na drugi
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01f      	beq.n	8002d4a <main+0x4a6>
				step_init = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]

				kreni = 2;
 8002d0e:	4b79      	ldr	r3, [pc, #484]	; (8002ef4 <main+0x650>)
 8002d10:	2202      	movs	r2, #2
 8002d12:	601a      	str	r2, [r3, #0]
				faza = 4;
 8002d14:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <main+0x600>)
 8002d16:	2204      	movs	r2, #4
 8002d18:	701a      	strb	r2, [r3, #0]
				medju_stanje();
 8002d1a:	f7fe fa6f 	bl	80011fc <medju_stanje>
				HAL_Delay(750);
 8002d1e:	f240 20ee 	movw	r0, #750	; 0x2ee
 8002d22:	f001 fa1b 	bl	800415c <HAL_Delay>

				smer = 2;
 8002d26:	4b5e      	ldr	r3, [pc, #376]	; (8002ea0 <main+0x5fc>)
 8002d28:	2202      	movs	r2, #2
 8002d2a:	701a      	strb	r2, [r3, #0]
				kreni = 1;
 8002d2c:	4b71      	ldr	r3, [pc, #452]	; (8002ef4 <main+0x650>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]
				x_d = -925.0;
 8002d32:	4b5d      	ldr	r3, [pc, #372]	; (8002ea8 <main+0x604>)
 8002d34:	4a70      	ldr	r2, [pc, #448]	; (8002ef8 <main+0x654>)
 8002d36:	601a      	str	r2, [r3, #0]
				y_d = 623.5; //druga
 8002d38:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <main+0x60c>)
 8002d3a:	4a70      	ldr	r2, [pc, #448]	; (8002efc <main+0x658>)
 8002d3c:	601a      	str	r2, [r3, #0]
				teta_d = -1.555;
 8002d3e:	4b5e      	ldr	r3, [pc, #376]	; (8002eb8 <main+0x614>)
 8002d40:	4a6f      	ldr	r2, [pc, #444]	; (8002f00 <main+0x65c>)
 8002d42:	601a      	str	r2, [r3, #0]
				faza = 0;
 8002d44:	4b57      	ldr	r3, [pc, #348]	; (8002ea4 <main+0x600>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 8002d4a:	4b56      	ldr	r3, [pc, #344]	; (8002ea4 <main+0x600>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	f040 8485 	bne.w	800365e <main+0xdba>
				step_init = 1;
 8002d54:	2301      	movs	r3, #1
 8002d56:	607b      	str	r3, [r7, #4]
				step = 4;
 8002d58:	4b59      	ldr	r3, [pc, #356]	; (8002ec0 <main+0x61c>)
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d5e:	f000 bc7e 	b.w	800365e <main+0xdba>
		case 4:
			if (flag_send == 0) //obara drugi, ide na treci
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d107      	bne.n	8002d7a <main+0x4d6>
			{
				HAL_UART_Transmit(&huart6, (uint8_t*) "f", 1, 100);
 8002d6a:	2364      	movs	r3, #100	; 0x64
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	4965      	ldr	r1, [pc, #404]	; (8002f04 <main+0x660>)
 8002d70:	4848      	ldr	r0, [pc, #288]	; (8002e94 <main+0x5f0>)
 8002d72:	f003 fa9c 	bl	80062ae <HAL_UART_Transmit>
				flag_send = 1;
 8002d76:	2301      	movs	r3, #1
 8002d78:	70fb      	strb	r3, [r7, #3]
			}
			if (step_init){
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d022      	beq.n	8002dc6 <main+0x522>
				step_init = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	607b      	str	r3, [r7, #4]

				kreni = 2;
 8002d84:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <main+0x650>)
 8002d86:	2202      	movs	r2, #2
 8002d88:	601a      	str	r2, [r3, #0]
				faza = 4;
 8002d8a:	4b46      	ldr	r3, [pc, #280]	; (8002ea4 <main+0x600>)
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	701a      	strb	r2, [r3, #0]
				medju_stanje();
 8002d90:	f7fe fa34 	bl	80011fc <medju_stanje>
				HAL_Delay(750);
 8002d94:	f240 20ee 	movw	r0, #750	; 0x2ee
 8002d98:	f001 f9e0 	bl	800415c <HAL_Delay>
				kreni = 1;
 8002d9c:	4b55      	ldr	r3, [pc, #340]	; (8002ef4 <main+0x650>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

				smer = 2;
 8002da2:	4b3f      	ldr	r3, [pc, #252]	; (8002ea0 <main+0x5fc>)
 8002da4:	2202      	movs	r2, #2
 8002da6:	701a      	strb	r2, [r3, #0]
				Kid = 0.135;
 8002da8:	4b4a      	ldr	r3, [pc, #296]	; (8002ed4 <main+0x630>)
 8002daa:	4a57      	ldr	r2, [pc, #348]	; (8002f08 <main+0x664>)
 8002dac:	601a      	str	r2, [r3, #0]
				x_d = -920.0;
 8002dae:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <main+0x604>)
 8002db0:	4a3e      	ldr	r2, [pc, #248]	; (8002eac <main+0x608>)
 8002db2:	601a      	str	r2, [r3, #0]
				y_d = 822.2; //treca 815.5
 8002db4:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <main+0x60c>)
 8002db6:	4a55      	ldr	r2, [pc, #340]	; (8002f0c <main+0x668>)
 8002db8:	601a      	str	r2, [r3, #0]
				teta_d = -1.555;
 8002dba:	4b3f      	ldr	r3, [pc, #252]	; (8002eb8 <main+0x614>)
 8002dbc:	4a50      	ldr	r2, [pc, #320]	; (8002f00 <main+0x65c>)
 8002dbe:	601a      	str	r2, [r3, #0]
				faza = 0;
 8002dc0:	4b38      	ldr	r3, [pc, #224]	; (8002ea4 <main+0x600>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 8002dc6:	4b37      	ldr	r3, [pc, #220]	; (8002ea4 <main+0x600>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b03      	cmp	r3, #3
 8002dcc:	f040 844a 	bne.w	8003664 <main+0xdc0>
				if(prijem == 'm'){
 8002dd0:	4b4f      	ldr	r3, [pc, #316]	; (8002f10 <main+0x66c>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b6d      	cmp	r3, #109	; 0x6d
 8002dd6:	d10b      	bne.n	8002df0 <main+0x54c>
					step_init = 1;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	607b      	str	r3, [r7, #4]
					step = 6;
 8002ddc:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <main+0x61c>)
 8002dde:	2206      	movs	r2, #6
 8002de0:	701a      	strb	r2, [r3, #0]
					prijem = 0;
 8002de2:	4b4b      	ldr	r3, [pc, #300]	; (8002f10 <main+0x66c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
					flag_send = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	70fb      	strb	r3, [r7, #3]
					step = 5;
					prijem = 0;
					flag_send = 0;
				}
			}
			break;
 8002dec:	f000 bc3a 	b.w	8003664 <main+0xdc0>
				} else if (prijem == 'n'){
 8002df0:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <main+0x66c>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b6e      	cmp	r3, #110	; 0x6e
 8002df6:	f040 8435 	bne.w	8003664 <main+0xdc0>
					step_init = 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	607b      	str	r3, [r7, #4]
					step = 5;
 8002dfe:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <main+0x61c>)
 8002e00:	2205      	movs	r2, #5
 8002e02:	701a      	strb	r2, [r3, #0]
					prijem = 0;
 8002e04:	4b42      	ldr	r3, [pc, #264]	; (8002f10 <main+0x66c>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
					flag_send = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	70fb      	strb	r3, [r7, #3]
			break;
 8002e0e:	f000 bc29 	b.w	8003664 <main+0xdc0>
		case 5:
			if (flag_send == 0) //nije nas, obara treci i ide na cetvrti
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d107      	bne.n	8002e2a <main+0x586>
				{
				HAL_UART_Transmit(&huart6, (uint8_t*) "f", 1, 100);
 8002e1a:	2364      	movs	r3, #100	; 0x64
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	4939      	ldr	r1, [pc, #228]	; (8002f04 <main+0x660>)
 8002e20:	481c      	ldr	r0, [pc, #112]	; (8002e94 <main+0x5f0>)
 8002e22:	f003 fa44 	bl	80062ae <HAL_UART_Transmit>
				flag_send = 1;
 8002e26:	2301      	movs	r3, #1
 8002e28:	70fb      	strb	r3, [r7, #3]
				}
			if (step_init){
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d022      	beq.n	8002e76 <main+0x5d2>
				step_init = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	607b      	str	r3, [r7, #4]
				smer = 2;
 8002e34:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <main+0x5fc>)
 8002e36:	2202      	movs	r2, #2
 8002e38:	701a      	strb	r2, [r3, #0]

				kreni = 2;
 8002e3a:	4b2e      	ldr	r3, [pc, #184]	; (8002ef4 <main+0x650>)
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	601a      	str	r2, [r3, #0]
				faza = 4;
 8002e40:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <main+0x600>)
 8002e42:	2204      	movs	r2, #4
 8002e44:	701a      	strb	r2, [r3, #0]
				medju_stanje();
 8002e46:	f7fe f9d9 	bl	80011fc <medju_stanje>
				HAL_Delay(750);
 8002e4a:	f240 20ee 	movw	r0, #750	; 0x2ee
 8002e4e:	f001 f985 	bl	800415c <HAL_Delay>
				kreni = 1;
 8002e52:	4b28      	ldr	r3, [pc, #160]	; (8002ef4 <main+0x650>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

				Kid = 0.165;
 8002e58:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <main+0x630>)
 8002e5a:	4a1f      	ldr	r2, [pc, #124]	; (8002ed8 <main+0x634>)
 8002e5c:	601a      	str	r2, [r3, #0]
				x_d = -920.0;
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <main+0x604>)
 8002e60:	4a12      	ldr	r2, [pc, #72]	; (8002eac <main+0x608>)
 8002e62:	601a      	str	r2, [r3, #0]
				y_d = 1010.5; //cetvrta
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <main+0x60c>)
 8002e66:	4a2b      	ldr	r2, [pc, #172]	; (8002f14 <main+0x670>)
 8002e68:	601a      	str	r2, [r3, #0]
				teta_d = -1.55;
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <main+0x614>)
 8002e6c:	4a2a      	ldr	r2, [pc, #168]	; (8002f18 <main+0x674>)
 8002e6e:	601a      	str	r2, [r3, #0]
				faza = 0;
 8002e70:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <main+0x600>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <main+0x600>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	f040 83f5 	bne.w	800366a <main+0xdc6>
				step_init = 1;
 8002e80:	2301      	movs	r3, #1
 8002e82:	607b      	str	r3, [r7, #4]
				step = 7;
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <main+0x61c>)
 8002e86:	2207      	movs	r2, #7
 8002e88:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	70fb      	strb	r3, [r7, #3]
			}
			break;
 8002e8e:	e3ec      	b.n	800366a <main+0xdc6>
 8002e90:	08008b48 	.word	0x08008b48
 8002e94:	20000238 	.word	0x20000238
 8002e98:	20000120 	.word	0x20000120
 8002e9c:	3d75c28f 	.word	0x3d75c28f
 8002ea0:	20000008 	.word	0x20000008
 8002ea4:	20000154 	.word	0x20000154
 8002ea8:	20000148 	.word	0x20000148
 8002eac:	c4660000 	.word	0xc4660000
 8002eb0:	2000014c 	.word	0x2000014c
 8002eb4:	43cd0000 	.word	0x43cd0000
 8002eb8:	20000110 	.word	0x20000110
 8002ebc:	bfc90fdb 	.word	0xbfc90fdb
 8002ec0:	2000027e 	.word	0x2000027e
 8002ec4:	08008b4c 	.word	0x08008b4c
 8002ec8:	3d6147ae 	.word	0x3d6147ae
 8002ecc:	200000d8 	.word	0x200000d8
 8002ed0:	42c80000 	.word	0x42c80000
 8002ed4:	200000dc 	.word	0x200000dc
 8002ed8:	3e28f5c3 	.word	0x3e28f5c3
 8002edc:	200000e0 	.word	0x200000e0
 8002ee0:	48127c00 	.word	0x48127c00
 8002ee4:	20000100 	.word	0x20000100
 8002ee8:	42dc0000 	.word	0x42dc0000
 8002eec:	20000104 	.word	0x20000104
 8002ef0:	c2dc0000 	.word	0xc2dc0000
 8002ef4:	2000000c 	.word	0x2000000c
 8002ef8:	c4674000 	.word	0xc4674000
 8002efc:	441be000 	.word	0x441be000
 8002f00:	bfc70a3d 	.word	0xbfc70a3d
 8002f04:	08008b50 	.word	0x08008b50
 8002f08:	3e0a3d71 	.word	0x3e0a3d71
 8002f0c:	444d8ccd 	.word	0x444d8ccd
 8002f10:	2000027c 	.word	0x2000027c
 8002f14:	447ca000 	.word	0x447ca000
 8002f18:	bfc66666 	.word	0xbfc66666
		case 6:
			if (step_init){ //nas je, ide do cetvrte
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d010      	beq.n	8002f44 <main+0x6a0>
				step_init = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
				smer = 2;
 8002f26:	4b94      	ldr	r3, [pc, #592]	; (8003178 <main+0x8d4>)
 8002f28:	2202      	movs	r2, #2
 8002f2a:	701a      	strb	r2, [r3, #0]
				x_d = -920.0;
 8002f2c:	4b93      	ldr	r3, [pc, #588]	; (800317c <main+0x8d8>)
 8002f2e:	4a94      	ldr	r2, [pc, #592]	; (8003180 <main+0x8dc>)
 8002f30:	601a      	str	r2, [r3, #0]
				y_d = 1010.5; //cetvrta
 8002f32:	4b94      	ldr	r3, [pc, #592]	; (8003184 <main+0x8e0>)
 8002f34:	4a94      	ldr	r2, [pc, #592]	; (8003188 <main+0x8e4>)
 8002f36:	601a      	str	r2, [r3, #0]
				teta_d = -1.55;
 8002f38:	4b94      	ldr	r3, [pc, #592]	; (800318c <main+0x8e8>)
 8002f3a:	4a95      	ldr	r2, [pc, #596]	; (8003190 <main+0x8ec>)
 8002f3c:	601a      	str	r2, [r3, #0]
				faza = 0;
 8002f3e:	4b95      	ldr	r3, [pc, #596]	; (8003194 <main+0x8f0>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 8002f44:	4b93      	ldr	r3, [pc, #588]	; (8003194 <main+0x8f0>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	f040 8391 	bne.w	8003670 <main+0xdcc>
				step_init = 1;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	607b      	str	r3, [r7, #4]
				step = 7;
 8002f52:	4b91      	ldr	r3, [pc, #580]	; (8003198 <main+0x8f4>)
 8002f54:	2207      	movs	r2, #7
 8002f56:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	70fb      	strb	r3, [r7, #3]
			}
			break;
 8002f5c:	e388      	b.n	8003670 <main+0xdcc>
		case 7:
			if (flag_send == 0) //meri cetvrti
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d107      	bne.n	8002f76 <main+0x6d2>
			{
				HAL_UART_Transmit(&huart6, (uint8_t*) "e", 1, 100);
 8002f66:	2364      	movs	r3, #100	; 0x64
 8002f68:	2201      	movs	r2, #1
 8002f6a:	498c      	ldr	r1, [pc, #560]	; (800319c <main+0x8f8>)
 8002f6c:	488c      	ldr	r0, [pc, #560]	; (80031a0 <main+0x8fc>)
 8002f6e:	f003 f99e 	bl	80062ae <HAL_UART_Transmit>
				flag_send = 1;
 8002f72:	2301      	movs	r3, #1
 8002f74:	70fb      	strb	r3, [r7, #3]
			}
			if (step_init) {
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 837c 	beq.w	8003676 <main+0xdd2>
				step_init = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
				kreni = 2;
 8002f82:	4b88      	ldr	r3, [pc, #544]	; (80031a4 <main+0x900>)
 8002f84:	2202      	movs	r2, #2
 8002f86:	601a      	str	r2, [r3, #0]
				faza = 4;
 8002f88:	4b82      	ldr	r3, [pc, #520]	; (8003194 <main+0x8f0>)
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	701a      	strb	r2, [r3, #0]
				medju_stanje();
 8002f8e:	f7fe f935 	bl	80011fc <medju_stanje>
				HAL_Delay(1500);
 8002f92:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002f96:	f001 f8e1 	bl	800415c <HAL_Delay>
				step_init = 1;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	607b      	str	r3, [r7, #4]

				if (prijem == 'n'){
 8002f9e:	4b82      	ldr	r3, [pc, #520]	; (80031a8 <main+0x904>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b6e      	cmp	r3, #110	; 0x6e
 8002fa4:	d108      	bne.n	8002fb8 <main+0x714>
					prijem = 0;
 8002fa6:	4b80      	ldr	r3, [pc, #512]	; (80031a8 <main+0x904>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
					step = 8;
 8002fac:	4b7a      	ldr	r3, [pc, #488]	; (8003198 <main+0x8f4>)
 8002fae:	2208      	movs	r2, #8
 8002fb0:	701a      	strb	r2, [r3, #0]
					flag_send = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	70fb      	strb	r3, [r7, #3]
					prijem = 0;
					step = 11;
					flag_send = 0;
				}
			}
			break;
 8002fb6:	e35e      	b.n	8003676 <main+0xdd2>
				} else if(prijem == 'm'){
 8002fb8:	4b7b      	ldr	r3, [pc, #492]	; (80031a8 <main+0x904>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b6d      	cmp	r3, #109	; 0x6d
 8002fbe:	f040 835a 	bne.w	8003676 <main+0xdd2>
					prijem = 0;
 8002fc2:	4b79      	ldr	r3, [pc, #484]	; (80031a8 <main+0x904>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
					step = 11;
 8002fc8:	4b73      	ldr	r3, [pc, #460]	; (8003198 <main+0x8f4>)
 8002fca:	220b      	movs	r2, #11
 8002fcc:	701a      	strb	r2, [r3, #0]
					flag_send = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	70fb      	strb	r3, [r7, #3]
			break;
 8002fd2:	e350      	b.n	8003676 <main+0xdd2>
		case 8:
			if (step_init){ //nije nas, ide na peti
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d013      	beq.n	8003002 <main+0x75e>
				step_init = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
				smer = 2;
 8002fde:	4b66      	ldr	r3, [pc, #408]	; (8003178 <main+0x8d4>)
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	701a      	strb	r2, [r3, #0]
				kreni = 1;
 8002fe4:	4b6f      	ldr	r3, [pc, #444]	; (80031a4 <main+0x900>)
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
				x_d = -910.0;
 8002fea:	4b64      	ldr	r3, [pc, #400]	; (800317c <main+0x8d8>)
 8002fec:	4a6f      	ldr	r2, [pc, #444]	; (80031ac <main+0x908>)
 8002fee:	601a      	str	r2, [r3, #0]
				y_d = 1200.5; //peta
 8002ff0:	4b64      	ldr	r3, [pc, #400]	; (8003184 <main+0x8e0>)
 8002ff2:	4a6f      	ldr	r2, [pc, #444]	; (80031b0 <main+0x90c>)
 8002ff4:	601a      	str	r2, [r3, #0]
				teta_d = -1.555;
 8002ff6:	4b65      	ldr	r3, [pc, #404]	; (800318c <main+0x8e8>)
 8002ff8:	4a6e      	ldr	r2, [pc, #440]	; (80031b4 <main+0x910>)
 8002ffa:	601a      	str	r2, [r3, #0]
				faza = 0;
 8002ffc:	4b65      	ldr	r3, [pc, #404]	; (8003194 <main+0x8f0>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 8003002:	4b64      	ldr	r3, [pc, #400]	; (8003194 <main+0x8f0>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b03      	cmp	r3, #3
 8003008:	f040 8338 	bne.w	800367c <main+0xdd8>
				step_init = 1;
 800300c:	2301      	movs	r3, #1
 800300e:	607b      	str	r3, [r7, #4]
				step = 9;
 8003010:	4b61      	ldr	r3, [pc, #388]	; (8003198 <main+0x8f4>)
 8003012:	2209      	movs	r2, #9
 8003014:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003016:	e331      	b.n	800367c <main+0xdd8>
		case 9:
			if (flag_send == 0) //obara peti, ide na sesti
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d107      	bne.n	8003030 <main+0x78c>
				{
				HAL_UART_Transmit(&huart6, (uint8_t*) "f", 1, 100);
 8003020:	2364      	movs	r3, #100	; 0x64
 8003022:	2201      	movs	r2, #1
 8003024:	4964      	ldr	r1, [pc, #400]	; (80031b8 <main+0x914>)
 8003026:	485e      	ldr	r0, [pc, #376]	; (80031a0 <main+0x8fc>)
 8003028:	f003 f941 	bl	80062ae <HAL_UART_Transmit>
				flag_send = 1;
 800302c:	2301      	movs	r3, #1
 800302e:	70fb      	strb	r3, [r7, #3]
				}
			if (step_init){
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01f      	beq.n	8003076 <main+0x7d2>
				step_init = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	607b      	str	r3, [r7, #4]

				kreni = 2;
 800303a:	4b5a      	ldr	r3, [pc, #360]	; (80031a4 <main+0x900>)
 800303c:	2202      	movs	r2, #2
 800303e:	601a      	str	r2, [r3, #0]
				faza = 4;
 8003040:	4b54      	ldr	r3, [pc, #336]	; (8003194 <main+0x8f0>)
 8003042:	2204      	movs	r2, #4
 8003044:	701a      	strb	r2, [r3, #0]
				medju_stanje();
 8003046:	f7fe f8d9 	bl	80011fc <medju_stanje>
				HAL_Delay(750);
 800304a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800304e:	f001 f885 	bl	800415c <HAL_Delay>
				kreni = 1;
 8003052:	4b54      	ldr	r3, [pc, #336]	; (80031a4 <main+0x900>)
 8003054:	2201      	movs	r2, #1
 8003056:	601a      	str	r2, [r3, #0]

				smer = 2;
 8003058:	4b47      	ldr	r3, [pc, #284]	; (8003178 <main+0x8d4>)
 800305a:	2202      	movs	r2, #2
 800305c:	701a      	strb	r2, [r3, #0]
				x_d = -910.0;
 800305e:	4b47      	ldr	r3, [pc, #284]	; (800317c <main+0x8d8>)
 8003060:	4a52      	ldr	r2, [pc, #328]	; (80031ac <main+0x908>)
 8003062:	601a      	str	r2, [r3, #0]
				y_d = 1386.0; //sesta
 8003064:	4b47      	ldr	r3, [pc, #284]	; (8003184 <main+0x8e0>)
 8003066:	4a55      	ldr	r2, [pc, #340]	; (80031bc <main+0x918>)
 8003068:	601a      	str	r2, [r3, #0]
				teta_d = -1.555;
 800306a:	4b48      	ldr	r3, [pc, #288]	; (800318c <main+0x8e8>)
 800306c:	4a51      	ldr	r2, [pc, #324]	; (80031b4 <main+0x910>)
 800306e:	601a      	str	r2, [r3, #0]
				faza = 0;
 8003070:	4b48      	ldr	r3, [pc, #288]	; (8003194 <main+0x8f0>)
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 8003076:	4b47      	ldr	r3, [pc, #284]	; (8003194 <main+0x8f0>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b03      	cmp	r3, #3
 800307c:	f040 8301 	bne.w	8003682 <main+0xdde>
				step_init = 1;
 8003080:	2301      	movs	r3, #1
 8003082:	607b      	str	r3, [r7, #4]
				step = 10;
 8003084:	4b44      	ldr	r3, [pc, #272]	; (8003198 <main+0x8f4>)
 8003086:	220a      	movs	r2, #10
 8003088:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	70fb      	strb	r3, [r7, #3]
			}
			break;
 800308e:	e2f8      	b.n	8003682 <main+0xdde>
		case 10:
			if (flag_send == 0) //obara sesti, ide do sedmog ('n')
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d107      	bne.n	80030a8 <main+0x804>
				{
				HAL_UART_Transmit(&huart6, (uint8_t*) "f", 1, 100);
 8003098:	2364      	movs	r3, #100	; 0x64
 800309a:	2201      	movs	r2, #1
 800309c:	4946      	ldr	r1, [pc, #280]	; (80031b8 <main+0x914>)
 800309e:	4840      	ldr	r0, [pc, #256]	; (80031a0 <main+0x8fc>)
 80030a0:	f003 f905 	bl	80062ae <HAL_UART_Transmit>
				flag_send = 1;
 80030a4:	2301      	movs	r3, #1
 80030a6:	70fb      	strb	r3, [r7, #3]
				}
			if (step_init){
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d028      	beq.n	8003100 <main+0x85c>
				step_init = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	607b      	str	r3, [r7, #4]

				kreni = 2;
 80030b2:	4b3c      	ldr	r3, [pc, #240]	; (80031a4 <main+0x900>)
 80030b4:	2202      	movs	r2, #2
 80030b6:	601a      	str	r2, [r3, #0]
				faza = 4;
 80030b8:	4b36      	ldr	r3, [pc, #216]	; (8003194 <main+0x8f0>)
 80030ba:	2204      	movs	r2, #4
 80030bc:	701a      	strb	r2, [r3, #0]
				medju_stanje();
 80030be:	f7fe f89d 	bl	80011fc <medju_stanje>
				HAL_Delay(750);
 80030c2:	f240 20ee 	movw	r0, #750	; 0x2ee
 80030c6:	f001 f849 	bl	800415c <HAL_Delay>
				kreni = 1;
 80030ca:	4b36      	ldr	r3, [pc, #216]	; (80031a4 <main+0x900>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

				Kpd = 35; //40
 80030d0:	4b3b      	ldr	r3, [pc, #236]	; (80031c0 <main+0x91c>)
 80030d2:	4a3c      	ldr	r2, [pc, #240]	; (80031c4 <main+0x920>)
 80030d4:	601a      	str	r2, [r3, #0]
				Kid = 0.13; //	0.15
 80030d6:	4b3c      	ldr	r3, [pc, #240]	; (80031c8 <main+0x924>)
 80030d8:	4a3c      	ldr	r2, [pc, #240]	; (80031cc <main+0x928>)
 80030da:	601a      	str	r2, [r3, #0]
				Kdd = 22000; //25k
 80030dc:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <main+0x92c>)
 80030de:	4a3d      	ldr	r2, [pc, #244]	; (80031d4 <main+0x930>)
 80030e0:	601a      	str	r2, [r3, #0]

				//Kpd = 31; //44
				//Kid = 0.11; //	0.085
				//Kdd = 20000; //24k

				smer = 2;
 80030e2:	4b25      	ldr	r3, [pc, #148]	; (8003178 <main+0x8d4>)
 80030e4:	2202      	movs	r2, #2
 80030e6:	701a      	strb	r2, [r3, #0]
				x_d = -915.0; //sedma
 80030e8:	4b24      	ldr	r3, [pc, #144]	; (800317c <main+0x8d8>)
 80030ea:	4a3b      	ldr	r2, [pc, #236]	; (80031d8 <main+0x934>)
 80030ec:	601a      	str	r2, [r3, #0]
				y_d = 1580.5;
 80030ee:	4b25      	ldr	r3, [pc, #148]	; (8003184 <main+0x8e0>)
 80030f0:	4a3a      	ldr	r2, [pc, #232]	; (80031dc <main+0x938>)
 80030f2:	601a      	str	r2, [r3, #0]
				teta_d = -1.54;
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <main+0x8e8>)
 80030f6:	4a3a      	ldr	r2, [pc, #232]	; (80031e0 <main+0x93c>)
 80030f8:	601a      	str	r2, [r3, #0]
				faza = 0;
 80030fa:	4b26      	ldr	r3, [pc, #152]	; (8003194 <main+0x8f0>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 8003100:	4b24      	ldr	r3, [pc, #144]	; (8003194 <main+0x8f0>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b03      	cmp	r3, #3
 8003106:	f040 82bf 	bne.w	8003688 <main+0xde4>
				step_init = 1;
 800310a:	2301      	movs	r3, #1
 800310c:	607b      	str	r3, [r7, #4]
				step = 101;
 800310e:	4b22      	ldr	r3, [pc, #136]	; (8003198 <main+0x8f4>)
 8003110:	2265      	movs	r2, #101	; 0x65
 8003112:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	70fb      	strb	r3, [r7, #3]
			}
			break;
 8003118:	e2b6      	b.n	8003688 <main+0xde4>
		case 101:
			if (step_init){ //zavrsava sa kvadratima
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01d      	beq.n	800315c <main+0x8b8>
				step_init = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	607b      	str	r3, [r7, #4]

				Kpd = 35; //40
 8003124:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <main+0x91c>)
 8003126:	4a27      	ldr	r2, [pc, #156]	; (80031c4 <main+0x920>)
 8003128:	601a      	str	r2, [r3, #0]
				Kid = 0.13; //	0.15
 800312a:	4b27      	ldr	r3, [pc, #156]	; (80031c8 <main+0x924>)
 800312c:	4a27      	ldr	r2, [pc, #156]	; (80031cc <main+0x928>)
 800312e:	601a      	str	r2, [r3, #0]
				Kdd = 22000; //25k
 8003130:	4b27      	ldr	r3, [pc, #156]	; (80031d0 <main+0x92c>)
 8003132:	4a28      	ldr	r2, [pc, #160]	; (80031d4 <main+0x930>)
 8003134:	601a      	str	r2, [r3, #0]

				//Kpd = 31; //44
				//Kid = 0.11; //	0.085
				//Kdd = 20000; //24k

				smer = 1;
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <main+0x8d4>)
 8003138:	2201      	movs	r2, #1
 800313a:	701a      	strb	r2, [r3, #0]
				kreni = 1;
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <main+0x900>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]
				x_d = -889.64967913063435; //gotovi kvadrati
 8003142:	4b0e      	ldr	r3, [pc, #56]	; (800317c <main+0x8d8>)
 8003144:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <main+0x940>)
 8003146:	601a      	str	r2, [r3, #0]
				y_d = 1723.5882749804816; //gotovi kvadrati
 8003148:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <main+0x8e0>)
 800314a:	4a27      	ldr	r2, [pc, #156]	; (80031e8 <main+0x944>)
 800314c:	601a      	str	r2, [r3, #0]
				teta_d = 0;
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <main+0x8e8>)
 8003150:	f04f 0200 	mov.w	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
				faza = 0;
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <main+0x8f0>)
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 800315c:	4b0d      	ldr	r3, [pc, #52]	; (8003194 <main+0x8f0>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b03      	cmp	r3, #3
 8003162:	f040 8294 	bne.w	800368e <main+0xdea>
				step_init = 1;
 8003166:	2301      	movs	r3, #1
 8003168:	607b      	str	r3, [r7, #4]
				step = 121;
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <main+0x8f4>)
 800316c:	2279      	movs	r2, #121	; 0x79
 800316e:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	70fb      	strb	r3, [r7, #3]
			}
			break;
 8003174:	e28b      	b.n	800368e <main+0xdea>
 8003176:	bf00      	nop
 8003178:	20000008 	.word	0x20000008
 800317c:	20000148 	.word	0x20000148
 8003180:	c4660000 	.word	0xc4660000
 8003184:	2000014c 	.word	0x2000014c
 8003188:	447ca000 	.word	0x447ca000
 800318c:	20000110 	.word	0x20000110
 8003190:	bfc66666 	.word	0xbfc66666
 8003194:	20000154 	.word	0x20000154
 8003198:	2000027e 	.word	0x2000027e
 800319c:	08008b4c 	.word	0x08008b4c
 80031a0:	20000238 	.word	0x20000238
 80031a4:	2000000c 	.word	0x2000000c
 80031a8:	2000027c 	.word	0x2000027c
 80031ac:	c4638000 	.word	0xc4638000
 80031b0:	44961000 	.word	0x44961000
 80031b4:	bfc70a3d 	.word	0xbfc70a3d
 80031b8:	08008b50 	.word	0x08008b50
 80031bc:	44ad4000 	.word	0x44ad4000
 80031c0:	200000d8 	.word	0x200000d8
 80031c4:	420c0000 	.word	0x420c0000
 80031c8:	200000dc 	.word	0x200000dc
 80031cc:	3e051eb8 	.word	0x3e051eb8
 80031d0:	200000e0 	.word	0x200000e0
 80031d4:	46abe000 	.word	0x46abe000
 80031d8:	c464c000 	.word	0xc464c000
 80031dc:	44c59000 	.word	0x44c59000
 80031e0:	bfc51eb8 	.word	0xbfc51eb8
 80031e4:	c45e6994 	.word	0xc45e6994
 80031e8:	44d772d3 	.word	0x44d772d3
		case 11:
			if (step_init){ //ide do sedmog ('m')
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d025      	beq.n	800323e <main+0x99a>
				step_init = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
				smer = 2;
 80031f6:	4b8d      	ldr	r3, [pc, #564]	; (800342c <main+0xb88>)
 80031f8:	2202      	movs	r2, #2
 80031fa:	701a      	strb	r2, [r3, #0]

				teta_min = 0.06;
 80031fc:	4b8c      	ldr	r3, [pc, #560]	; (8003430 <main+0xb8c>)
 80031fe:	4a8d      	ldr	r2, [pc, #564]	; (8003434 <main+0xb90>)
 8003200:	601a      	str	r2, [r3, #0]
				Kpd = 27; //44
 8003202:	4b8d      	ldr	r3, [pc, #564]	; (8003438 <main+0xb94>)
 8003204:	4a8d      	ldr	r2, [pc, #564]	; (800343c <main+0xb98>)
 8003206:	601a      	str	r2, [r3, #0]
				Kid = 0.2; //	0.085
 8003208:	4b8d      	ldr	r3, [pc, #564]	; (8003440 <main+0xb9c>)
 800320a:	4a8e      	ldr	r2, [pc, #568]	; (8003444 <main+0xba0>)
 800320c:	601a      	str	r2, [r3, #0]
				Kdd = 20000; //24k
 800320e:	4b8e      	ldr	r3, [pc, #568]	; (8003448 <main+0xba4>)
 8003210:	4a8e      	ldr	r2, [pc, #568]	; (800344c <main+0xba8>)
 8003212:	601a      	str	r2, [r3, #0]
				teta_ei_max = 110;
 8003214:	4b8e      	ldr	r3, [pc, #568]	; (8003450 <main+0xbac>)
 8003216:	4a8f      	ldr	r2, [pc, #572]	; (8003454 <main+0xbb0>)
 8003218:	601a      	str	r2, [r3, #0]
				teta_ei_min = -110;
 800321a:	4b8f      	ldr	r3, [pc, #572]	; (8003458 <main+0xbb4>)
 800321c:	4a8f      	ldr	r2, [pc, #572]	; (800345c <main+0xbb8>)
 800321e:	601a      	str	r2, [r3, #0]

				kreni = 1;
 8003220:	4b8f      	ldr	r3, [pc, #572]	; (8003460 <main+0xbbc>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]
				x_d = -920.0; //sedma
 8003226:	4b8f      	ldr	r3, [pc, #572]	; (8003464 <main+0xbc0>)
 8003228:	4a8f      	ldr	r2, [pc, #572]	; (8003468 <main+0xbc4>)
 800322a:	601a      	str	r2, [r3, #0]
				y_d = 1555.5;
 800322c:	4b8f      	ldr	r3, [pc, #572]	; (800346c <main+0xbc8>)
 800322e:	4a90      	ldr	r2, [pc, #576]	; (8003470 <main+0xbcc>)
 8003230:	601a      	str	r2, [r3, #0]
				teta_d = -1.555;
 8003232:	4b90      	ldr	r3, [pc, #576]	; (8003474 <main+0xbd0>)
 8003234:	4a90      	ldr	r2, [pc, #576]	; (8003478 <main+0xbd4>)
 8003236:	601a      	str	r2, [r3, #0]
				faza = 0;
 8003238:	4b90      	ldr	r3, [pc, #576]	; (800347c <main+0xbd8>)
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 800323e:	4b8f      	ldr	r3, [pc, #572]	; (800347c <main+0xbd8>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b03      	cmp	r3, #3
 8003244:	f040 8226 	bne.w	8003694 <main+0xdf0>
				step_init = 1;
 8003248:	2301      	movs	r3, #1
 800324a:	607b      	str	r3, [r7, #4]
				step = 12;
 800324c:	4b8c      	ldr	r3, [pc, #560]	; (8003480 <main+0xbdc>)
 800324e:	220c      	movs	r2, #12
 8003250:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	70fb      	strb	r3, [r7, #3]
			}
			break;
 8003256:	e21d      	b.n	8003694 <main+0xdf0>
		case 12:
			if (flag_send == 0) //obara sedmi, zavrsava sa kvadratima
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d107      	bne.n	8003270 <main+0x9cc>
				{
				HAL_UART_Transmit(&huart6, (uint8_t*) "f", 1, 100);
 8003260:	2364      	movs	r3, #100	; 0x64
 8003262:	2201      	movs	r2, #1
 8003264:	4987      	ldr	r1, [pc, #540]	; (8003484 <main+0xbe0>)
 8003266:	4888      	ldr	r0, [pc, #544]	; (8003488 <main+0xbe4>)
 8003268:	f003 f821 	bl	80062ae <HAL_UART_Transmit>
				flag_send = 1;
 800326c:	2301      	movs	r3, #1
 800326e:	70fb      	strb	r3, [r7, #3]
				}
			if (step_init){
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d02c      	beq.n	80032d0 <main+0xa2c>
				step_init = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	607b      	str	r3, [r7, #4]

				kreni = 2;
 800327a:	4b79      	ldr	r3, [pc, #484]	; (8003460 <main+0xbbc>)
 800327c:	2202      	movs	r2, #2
 800327e:	601a      	str	r2, [r3, #0]
				faza = 4;
 8003280:	4b7e      	ldr	r3, [pc, #504]	; (800347c <main+0xbd8>)
 8003282:	2204      	movs	r2, #4
 8003284:	701a      	strb	r2, [r3, #0]
				medju_stanje();
 8003286:	f7fd ffb9 	bl	80011fc <medju_stanje>
				HAL_Delay(750);
 800328a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800328e:	f000 ff65 	bl	800415c <HAL_Delay>
				kreni = 1;
 8003292:	4b73      	ldr	r3, [pc, #460]	; (8003460 <main+0xbbc>)
 8003294:	2201      	movs	r2, #1
 8003296:	601a      	str	r2, [r3, #0]

				smer = 1;
 8003298:	4b64      	ldr	r3, [pc, #400]	; (800342c <main+0xb88>)
 800329a:	2201      	movs	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]
				teta_min = 0.45;
 800329e:	4b64      	ldr	r3, [pc, #400]	; (8003430 <main+0xb8c>)
 80032a0:	4a7a      	ldr	r2, [pc, #488]	; (800348c <main+0xbe8>)
 80032a2:	601a      	str	r2, [r3, #0]

				Kpd = 35; //40
 80032a4:	4b64      	ldr	r3, [pc, #400]	; (8003438 <main+0xb94>)
 80032a6:	4a7a      	ldr	r2, [pc, #488]	; (8003490 <main+0xbec>)
 80032a8:	601a      	str	r2, [r3, #0]
				Kid = 0.13; //	0.15
 80032aa:	4b65      	ldr	r3, [pc, #404]	; (8003440 <main+0xb9c>)
 80032ac:	4a79      	ldr	r2, [pc, #484]	; (8003494 <main+0xbf0>)
 80032ae:	601a      	str	r2, [r3, #0]
				Kdd = 22000; //25k
 80032b0:	4b65      	ldr	r3, [pc, #404]	; (8003448 <main+0xba4>)
 80032b2:	4a79      	ldr	r2, [pc, #484]	; (8003498 <main+0xbf4>)
 80032b4:	601a      	str	r2, [r3, #0]

				//Kpd = 31; //44
				//Kid = 0.11; //	0.085
				//Kdd = 20000; //24k

				x_d = -889.64967913063435; //gotovi kvadrati
 80032b6:	4b6b      	ldr	r3, [pc, #428]	; (8003464 <main+0xbc0>)
 80032b8:	4a78      	ldr	r2, [pc, #480]	; (800349c <main+0xbf8>)
 80032ba:	601a      	str	r2, [r3, #0]
				y_d = 1723.5882749804816; //gotovi kvadrati
 80032bc:	4b6b      	ldr	r3, [pc, #428]	; (800346c <main+0xbc8>)
 80032be:	4a78      	ldr	r2, [pc, #480]	; (80034a0 <main+0xbfc>)
 80032c0:	601a      	str	r2, [r3, #0]
				teta_d = 0;
 80032c2:	4b6c      	ldr	r3, [pc, #432]	; (8003474 <main+0xbd0>)
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
				faza = 0;
 80032ca:	4b6c      	ldr	r3, [pc, #432]	; (800347c <main+0xbd8>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 80032d0:	4b6a      	ldr	r3, [pc, #424]	; (800347c <main+0xbd8>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	f040 81e0 	bne.w	800369a <main+0xdf6>
				step_init = 1;
 80032da:	2301      	movs	r3, #1
 80032dc:	607b      	str	r3, [r7, #4]
				step = 121;
 80032de:	4b68      	ldr	r3, [pc, #416]	; (8003480 <main+0xbdc>)
 80032e0:	2279      	movs	r2, #121	; 0x79
 80032e2:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	70fb      	strb	r3, [r7, #3]
			}
			break;
 80032e8:	e1d7      	b.n	800369a <main+0xdf6>
		case 121:
			if (flag_send == 0) //zatvara mernu ruku
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <main+0xa5e>
				{
				HAL_UART_Transmit(&huart6, (uint8_t*) "g", 1, 100);
 80032f2:	2364      	movs	r3, #100	; 0x64
 80032f4:	2201      	movs	r2, #1
 80032f6:	496b      	ldr	r1, [pc, #428]	; (80034a4 <main+0xc00>)
 80032f8:	4863      	ldr	r0, [pc, #396]	; (8003488 <main+0xbe4>)
 80032fa:	f002 ffd8 	bl	80062ae <HAL_UART_Transmit>
				flag_send = 1;
 80032fe:	2301      	movs	r3, #1
 8003300:	70fb      	strb	r3, [r7, #3]
				}
			if (step_init){
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d013      	beq.n	8003330 <main+0xa8c>
				step_init = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	607b      	str	r3, [r7, #4]
				smer = 1;
 800330c:	4b47      	ldr	r3, [pc, #284]	; (800342c <main+0xb88>)
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
				kreni = 1;
 8003312:	4b53      	ldr	r3, [pc, #332]	; (8003460 <main+0xbbc>)
 8003314:	2201      	movs	r2, #1
 8003316:	601a      	str	r2, [r3, #0]
				x_d = -68.783264755755852; //
 8003318:	4b52      	ldr	r3, [pc, #328]	; (8003464 <main+0xbc0>)
 800331a:	4a63      	ldr	r2, [pc, #396]	; (80034a8 <main+0xc04>)
 800331c:	601a      	str	r2, [r3, #0]
				y_d = 1425.3779902611661; //
 800331e:	4b53      	ldr	r3, [pc, #332]	; (800346c <main+0xbc8>)
 8003320:	4a62      	ldr	r2, [pc, #392]	; (80034ac <main+0xc08>)
 8003322:	601a      	str	r2, [r3, #0]
				teta_d = -0.79460203669441398;
 8003324:	4b53      	ldr	r3, [pc, #332]	; (8003474 <main+0xbd0>)
 8003326:	4a62      	ldr	r2, [pc, #392]	; (80034b0 <main+0xc0c>)
 8003328:	601a      	str	r2, [r3, #0]
				faza = 0;
 800332a:	4b54      	ldr	r3, [pc, #336]	; (800347c <main+0xbd8>)
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 8003330:	4b52      	ldr	r3, [pc, #328]	; (800347c <main+0xbd8>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b03      	cmp	r3, #3
 8003336:	f040 81b3 	bne.w	80036a0 <main+0xdfc>
				step_init = 1;
 800333a:	2301      	movs	r3, #1
 800333c:	607b      	str	r3, [r7, #4]
				step = 13;
 800333e:	4b50      	ldr	r3, [pc, #320]	; (8003480 <main+0xbdc>)
 8003340:	220d      	movs	r2, #13
 8003342:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	70fb      	strb	r3, [r7, #3]
			}
			break;
 8003348:	e1aa      	b.n	80036a0 <main+0xdfc>
		case 13:
			if (flag_send == 0) //otvara rucice i gura u kamp
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d107      	bne.n	8003362 <main+0xabe>
				{
				HAL_UART_Transmit(&huart6, (uint8_t*) "a", 1, 100);
 8003352:	2364      	movs	r3, #100	; 0x64
 8003354:	2201      	movs	r2, #1
 8003356:	4957      	ldr	r1, [pc, #348]	; (80034b4 <main+0xc10>)
 8003358:	484b      	ldr	r0, [pc, #300]	; (8003488 <main+0xbe4>)
 800335a:	f002 ffa8 	bl	80062ae <HAL_UART_Transmit>
				flag_send = 1;
 800335e:	2301      	movs	r3, #1
 8003360:	70fb      	strb	r3, [r7, #3]
				}
			if (step_init){
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d011      	beq.n	800338c <main+0xae8>
				step_init = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	607b      	str	r3, [r7, #4]
				smer = 1;
 800336c:	4b2f      	ldr	r3, [pc, #188]	; (800342c <main+0xb88>)
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
				x_d = 233.08653425554098;
 8003372:	4b3c      	ldr	r3, [pc, #240]	; (8003464 <main+0xbc0>)
 8003374:	4a50      	ldr	r2, [pc, #320]	; (80034b8 <main+0xc14>)
 8003376:	601a      	str	r2, [r3, #0]
				y_d = 0.0;
 8003378:	4b3c      	ldr	r3, [pc, #240]	; (800346c <main+0xbc8>)
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
				teta_d = -1.5980244544771267;
 8003380:	4b3c      	ldr	r3, [pc, #240]	; (8003474 <main+0xbd0>)
 8003382:	4a4e      	ldr	r2, [pc, #312]	; (80034bc <main+0xc18>)
 8003384:	601a      	str	r2, [r3, #0]
				faza = 0;
 8003386:	4b3d      	ldr	r3, [pc, #244]	; (800347c <main+0xbd8>)
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 800338c:	4b3b      	ldr	r3, [pc, #236]	; (800347c <main+0xbd8>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b03      	cmp	r3, #3
 8003392:	f040 8188 	bne.w	80036a6 <main+0xe02>
				step_init = 1;
 8003396:	2301      	movs	r3, #1
 8003398:	607b      	str	r3, [r7, #4]
				step = 14;
 800339a:	4b39      	ldr	r3, [pc, #228]	; (8003480 <main+0xbdc>)
 800339c:	220e      	movs	r2, #14
 800339e:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	70fb      	strb	r3, [r7, #3]
			}
			break;
 80033a4:	e17f      	b.n	80036a6 <main+0xe02>
		case 14:
			if (step_init){ //ide na sredinu terena
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d010      	beq.n	80033ce <main+0xb2a>
				step_init = 0;
 80033ac:	2300      	movs	r3, #0
 80033ae:	607b      	str	r3, [r7, #4]
				smer = 2;
 80033b0:	4b1e      	ldr	r3, [pc, #120]	; (800342c <main+0xb88>)
 80033b2:	2202      	movs	r2, #2
 80033b4:	701a      	strb	r2, [r3, #0]
				x_d = 233.08653425554098;
 80033b6:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <main+0xbc0>)
 80033b8:	4a3f      	ldr	r2, [pc, #252]	; (80034b8 <main+0xc14>)
 80033ba:	601a      	str	r2, [r3, #0]
				y_d = 1185.0;
 80033bc:	4b2b      	ldr	r3, [pc, #172]	; (800346c <main+0xbc8>)
 80033be:	4a40      	ldr	r2, [pc, #256]	; (80034c0 <main+0xc1c>)
 80033c0:	601a      	str	r2, [r3, #0]
				teta_d = -(M_PI/2);
 80033c2:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <main+0xbd0>)
 80033c4:	4a3f      	ldr	r2, [pc, #252]	; (80034c4 <main+0xc20>)
 80033c6:	601a      	str	r2, [r3, #0]
				faza = 0;
 80033c8:	4b2c      	ldr	r3, [pc, #176]	; (800347c <main+0xbd8>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 80033ce:	4b2b      	ldr	r3, [pc, #172]	; (800347c <main+0xbd8>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	f040 816a 	bne.w	80036ac <main+0xe08>
				step_init = 1;
 80033d8:	2301      	movs	r3, #1
 80033da:	607b      	str	r3, [r7, #4]
				step = 15;
 80033dc:	4b28      	ldr	r3, [pc, #160]	; (8003480 <main+0xbdc>)
 80033de:	220f      	movs	r2, #15
 80033e0:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	70fb      	strb	r3, [r7, #3]
			}
			break;
 80033e6:	e161      	b.n	80036ac <main+0xe08>
		case 15:
			if (step_init){ //pozicija pre iskopa
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d010      	beq.n	8003410 <main+0xb6c>
				step_init = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	607b      	str	r3, [r7, #4]
				smer = 1;
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <main+0xb88>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
				x_d = -282.6;
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <main+0xbc0>)
 80033fa:	4a33      	ldr	r2, [pc, #204]	; (80034c8 <main+0xc24>)
 80033fc:	601a      	str	r2, [r3, #0]
				y_d = 1116.9;
 80033fe:	4b1b      	ldr	r3, [pc, #108]	; (800346c <main+0xbc8>)
 8003400:	4a32      	ldr	r2, [pc, #200]	; (80034cc <main+0xc28>)
 8003402:	601a      	str	r2, [r3, #0]
				teta_d = -1.934445591410622;
 8003404:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <main+0xbd0>)
 8003406:	4a32      	ldr	r2, [pc, #200]	; (80034d0 <main+0xc2c>)
 8003408:	601a      	str	r2, [r3, #0]
				faza = 0;
 800340a:	4b1c      	ldr	r3, [pc, #112]	; (800347c <main+0xbd8>)
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <main+0xbd8>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b03      	cmp	r3, #3
 8003416:	f040 814c 	bne.w	80036b2 <main+0xe0e>
				step_init = 1;
 800341a:	2301      	movs	r3, #1
 800341c:	607b      	str	r3, [r7, #4]
				step = 151;
 800341e:	4b18      	ldr	r3, [pc, #96]	; (8003480 <main+0xbdc>)
 8003420:	2297      	movs	r2, #151	; 0x97
 8003422:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	70fb      	strb	r3, [r7, #3]
			}
			break;
 8003428:	e143      	b.n	80036b2 <main+0xe0e>
 800342a:	bf00      	nop
 800342c:	20000008 	.word	0x20000008
 8003430:	20000120 	.word	0x20000120
 8003434:	3d75c28f 	.word	0x3d75c28f
 8003438:	200000d8 	.word	0x200000d8
 800343c:	41d80000 	.word	0x41d80000
 8003440:	200000dc 	.word	0x200000dc
 8003444:	3e4ccccd 	.word	0x3e4ccccd
 8003448:	200000e0 	.word	0x200000e0
 800344c:	469c4000 	.word	0x469c4000
 8003450:	20000100 	.word	0x20000100
 8003454:	42dc0000 	.word	0x42dc0000
 8003458:	20000104 	.word	0x20000104
 800345c:	c2dc0000 	.word	0xc2dc0000
 8003460:	2000000c 	.word	0x2000000c
 8003464:	20000148 	.word	0x20000148
 8003468:	c4660000 	.word	0xc4660000
 800346c:	2000014c 	.word	0x2000014c
 8003470:	44c27000 	.word	0x44c27000
 8003474:	20000110 	.word	0x20000110
 8003478:	bfc70a3d 	.word	0xbfc70a3d
 800347c:	20000154 	.word	0x20000154
 8003480:	2000027e 	.word	0x2000027e
 8003484:	08008b50 	.word	0x08008b50
 8003488:	20000238 	.word	0x20000238
 800348c:	3ee66666 	.word	0x3ee66666
 8003490:	420c0000 	.word	0x420c0000
 8003494:	3e051eb8 	.word	0x3e051eb8
 8003498:	46abe000 	.word	0x46abe000
 800349c:	c45e6994 	.word	0xc45e6994
 80034a0:	44d772d3 	.word	0x44d772d3
 80034a4:	08008b54 	.word	0x08008b54
 80034a8:	c2899108 	.word	0xc2899108
 80034ac:	44b22c18 	.word	0x44b22c18
 80034b0:	bf4b6b0a 	.word	0xbf4b6b0a
 80034b4:	08008b58 	.word	0x08008b58
 80034b8:	43691627 	.word	0x43691627
 80034bc:	bfcc8c11 	.word	0xbfcc8c11
 80034c0:	44942000 	.word	0x44942000
 80034c4:	bfc90fdb 	.word	0xbfc90fdb
 80034c8:	c38d4ccd 	.word	0xc38d4ccd
 80034cc:	448b9ccd 	.word	0x448b9ccd
 80034d0:	bff79bea 	.word	0xbff79bea
		case 151:
			if (step_init){ //gura zetone u supu
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d010      	beq.n	80034fc <main+0xc58>
				step_init = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	607b      	str	r3, [r7, #4]
				smer = 1;
 80034de:	4b7e      	ldr	r3, [pc, #504]	; (80036d8 <main+0xe34>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]

				x_d = -795.36357318251066;
 80034e4:	4b7d      	ldr	r3, [pc, #500]	; (80036dc <main+0xe38>)
 80034e6:	4a7e      	ldr	r2, [pc, #504]	; (80036e0 <main+0xe3c>)
 80034e8:	601a      	str	r2, [r3, #0]
				y_d = 53.929638001396214;
 80034ea:	4b7e      	ldr	r3, [pc, #504]	; (80036e4 <main+0xe40>)
 80034ec:	4a7e      	ldr	r2, [pc, #504]	; (80036e8 <main+0xe44>)
 80034ee:	601a      	str	r2, [r3, #0]
				teta_d = -2.3770949414320057;
 80034f0:	4b7e      	ldr	r3, [pc, #504]	; (80036ec <main+0xe48>)
 80034f2:	4a7f      	ldr	r2, [pc, #508]	; (80036f0 <main+0xe4c>)
 80034f4:	601a      	str	r2, [r3, #0]

				faza = 0;
 80034f6:	4b7f      	ldr	r3, [pc, #508]	; (80036f4 <main+0xe50>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 80034fc:	4b7d      	ldr	r3, [pc, #500]	; (80036f4 <main+0xe50>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b03      	cmp	r3, #3
 8003502:	f040 80d9 	bne.w	80036b8 <main+0xe14>
				step_init = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	607b      	str	r3, [r7, #4]
				step = 16;
 800350a:	4b7b      	ldr	r3, [pc, #492]	; (80036f8 <main+0xe54>)
 800350c:	2210      	movs	r2, #16
 800350e:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	70fb      	strb	r3, [r7, #3]
			}
			break;
 8003514:	e0d0      	b.n	80036b8 <main+0xe14>
		case 16:
			if (flag_send == 0) //zatvara rucice i staje
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d107      	bne.n	800352e <main+0xc8a>
				{
				HAL_UART_Transmit(&huart6, (uint8_t*) "b", 1, 200);
 800351e:	23c8      	movs	r3, #200	; 0xc8
 8003520:	2201      	movs	r2, #1
 8003522:	4976      	ldr	r1, [pc, #472]	; (80036fc <main+0xe58>)
 8003524:	4876      	ldr	r0, [pc, #472]	; (8003700 <main+0xe5c>)
 8003526:	f002 fec2 	bl	80062ae <HAL_UART_Transmit>
				flag_send = 1;
 800352a:	2301      	movs	r3, #1
 800352c:	70fb      	strb	r3, [r7, #3]
				}
			if (step_init){
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80c4 	beq.w	80036be <main+0xe1a>
				step_init = 0;
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]

				kreni = 2;
 800353a:	4b72      	ldr	r3, [pc, #456]	; (8003704 <main+0xe60>)
 800353c:	2202      	movs	r2, #2
 800353e:	601a      	str	r2, [r3, #0]
				faza = 4;
 8003540:	4b6c      	ldr	r3, [pc, #432]	; (80036f4 <main+0xe50>)
 8003542:	2204      	movs	r2, #4
 8003544:	701a      	strb	r2, [r3, #0]
				medju_stanje();
 8003546:	f7fd fe59 	bl	80011fc <medju_stanje>
				HAL_Delay(1500);
 800354a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800354e:	f000 fe05 	bl	800415c <HAL_Delay>
				step_init = 1;
 8003552:	2301      	movs	r3, #1
 8003554:	607b      	str	r3, [r7, #4]
				step = 17;
 8003556:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <main+0xe54>)
 8003558:	2211      	movs	r2, #17
 800355a:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	70fb      	strb	r3, [r7, #3]
				//x_d = -584.54;
				//y_d = 270.536;
				//teta_d = -2.3842854956674273;
				//faza = 0;
			}
			break;
 8003560:	e0ad      	b.n	80036be <main+0xe1a>
		case 17:
			if (flag_send == 0) //izbacuje repliku i stoji
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d107      	bne.n	800357a <main+0xcd6>
				{
				HAL_UART_Transmit(&huart6, (uint8_t*) "c", 1, 200);
 800356a:	23c8      	movs	r3, #200	; 0xc8
 800356c:	2201      	movs	r2, #1
 800356e:	4966      	ldr	r1, [pc, #408]	; (8003708 <main+0xe64>)
 8003570:	4863      	ldr	r0, [pc, #396]	; (8003700 <main+0xe5c>)
 8003572:	f002 fe9c 	bl	80062ae <HAL_UART_Transmit>
				flag_send = 1;
 8003576:	2301      	movs	r3, #1
 8003578:	70fb      	strb	r3, [r7, #3]
				}
			if (step_init){ //dolazi do supe
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80a1 	beq.w	80036c4 <main+0xe20>
				step_init = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	607b      	str	r3, [r7, #4]
				kreni = 2;
 8003586:	4b5f      	ldr	r3, [pc, #380]	; (8003704 <main+0xe60>)
 8003588:	2202      	movs	r2, #2
 800358a:	601a      	str	r2, [r3, #0]
				faza = 4;
 800358c:	4b59      	ldr	r3, [pc, #356]	; (80036f4 <main+0xe50>)
 800358e:	2204      	movs	r2, #4
 8003590:	701a      	strb	r2, [r3, #0]
				medju_stanje();
 8003592:	f7fd fe33 	bl	80011fc <medju_stanje>
				HAL_Delay(1500);
 8003596:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800359a:	f000 fddf 	bl	800415c <HAL_Delay>
				step_init = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	607b      	str	r3, [r7, #4]
				step = 18;
 80035a2:	4b55      	ldr	r3, [pc, #340]	; (80036f8 <main+0xe54>)
 80035a4:	2212      	movs	r2, #18
 80035a6:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	70fb      	strb	r3, [r7, #3]
			}
			break;
 80035ac:	e08a      	b.n	80036c4 <main+0xe20>
		case 18:
			if (step_init){ //vraca se unazad
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <main+0xd38>
				step_init = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	607b      	str	r3, [r7, #4]
				kreni = 1;
 80035b8:	4b52      	ldr	r3, [pc, #328]	; (8003704 <main+0xe60>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
				smer = 2;
 80035be:	4b46      	ldr	r3, [pc, #280]	; (80036d8 <main+0xe34>)
 80035c0:	2202      	movs	r2, #2
 80035c2:	701a      	strb	r2, [r3, #0]
				x_d = 81.434081098829679;
 80035c4:	4b45      	ldr	r3, [pc, #276]	; (80036dc <main+0xe38>)
 80035c6:	4a51      	ldr	r2, [pc, #324]	; (800370c <main+0xe68>)
 80035c8:	601a      	str	r2, [r3, #0]
				y_d = 655.28716262263526;
 80035ca:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <main+0xe40>)
 80035cc:	4a50      	ldr	r2, [pc, #320]	; (8003710 <main+0xe6c>)
 80035ce:	601a      	str	r2, [r3, #0]
				teta_d = -2.8398777764959959;
 80035d0:	4b46      	ldr	r3, [pc, #280]	; (80036ec <main+0xe48>)
 80035d2:	4a50      	ldr	r2, [pc, #320]	; (8003714 <main+0xe70>)
 80035d4:	601a      	str	r2, [r3, #0]
				faza = 0;
 80035d6:	4b47      	ldr	r3, [pc, #284]	; (80036f4 <main+0xe50>)
 80035d8:	2200      	movs	r2, #0
 80035da:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 80035dc:	4b45      	ldr	r3, [pc, #276]	; (80036f4 <main+0xe50>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d172      	bne.n	80036ca <main+0xe26>
				step_init = 1;
 80035e4:	2301      	movs	r3, #1
 80035e6:	607b      	str	r3, [r7, #4]
				step = 19;
 80035e8:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <main+0xe54>)
 80035ea:	2213      	movs	r2, #19
 80035ec:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	70fb      	strb	r3, [r7, #3]
			}
			break;
 80035f2:	e06a      	b.n	80036ca <main+0xe26>
		case 19:
			if (step_init){ //zavrsava
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d013      	beq.n	8003622 <main+0xd7e>
				step_init = 0;
 80035fa:	2300      	movs	r3, #0
 80035fc:	607b      	str	r3, [r7, #4]
				kreni = 1;
 80035fe:	4b41      	ldr	r3, [pc, #260]	; (8003704 <main+0xe60>)
 8003600:	2201      	movs	r2, #1
 8003602:	601a      	str	r2, [r3, #0]
				smer = 2;
 8003604:	4b34      	ldr	r3, [pc, #208]	; (80036d8 <main+0xe34>)
 8003606:	2202      	movs	r2, #2
 8003608:	701a      	strb	r2, [r3, #0]
				x_d = 510.75763405124746;
 800360a:	4b34      	ldr	r3, [pc, #208]	; (80036dc <main+0xe38>)
 800360c:	4a42      	ldr	r2, [pc, #264]	; (8003718 <main+0xe74>)
 800360e:	601a      	str	r2, [r3, #0]
				y_d = 189.07135436795926;
 8003610:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <main+0xe40>)
 8003612:	4a42      	ldr	r2, [pc, #264]	; (800371c <main+0xe78>)
 8003614:	601a      	str	r2, [r3, #0]
				teta_d = 2.4549445368059182;
 8003616:	4b35      	ldr	r3, [pc, #212]	; (80036ec <main+0xe48>)
 8003618:	4a41      	ldr	r2, [pc, #260]	; (8003720 <main+0xe7c>)
 800361a:	601a      	str	r2, [r3, #0]
				faza = 0;
 800361c:	4b35      	ldr	r3, [pc, #212]	; (80036f4 <main+0xe50>)
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
			}
			if (faza == 3){
 8003622:	4b34      	ldr	r3, [pc, #208]	; (80036f4 <main+0xe50>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b03      	cmp	r3, #3
 8003628:	d152      	bne.n	80036d0 <main+0xe2c>
				step_init = 2;
 800362a:	2302      	movs	r3, #2
 800362c:	607b      	str	r3, [r7, #4]
				step = 20;
 800362e:	4b32      	ldr	r3, [pc, #200]	; (80036f8 <main+0xe54>)
 8003630:	2214      	movs	r2, #20
 8003632:	701a      	strb	r2, [r3, #0]
				flag_send = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	70fb      	strb	r3, [r7, #3]
			}
			break;
 8003638:	e04a      	b.n	80036d0 <main+0xe2c>
		case 20:
			kreni = 2;
 800363a:	4b32      	ldr	r3, [pc, #200]	; (8003704 <main+0xe60>)
 800363c:	2202      	movs	r2, #2
 800363e:	601a      	str	r2, [r3, #0]
			faza = 4;
 8003640:	4b2c      	ldr	r3, [pc, #176]	; (80036f4 <main+0xe50>)
 8003642:	2204      	movs	r2, #4
 8003644:	701a      	strb	r2, [r3, #0]
			medju_stanje();
 8003646:	f7fd fdd9 	bl	80011fc <medju_stanje>
			break;
 800364a:	e042      	b.n	80036d2 <main+0xe2e>
			break;
 800364c:	bf00      	nop
 800364e:	f7ff b977 	b.w	8002940 <main+0x9c>
			break;
 8003652:	bf00      	nop
 8003654:	f7ff b974 	b.w	8002940 <main+0x9c>
			break;
 8003658:	bf00      	nop
 800365a:	f7ff b971 	b.w	8002940 <main+0x9c>
			break;
 800365e:	bf00      	nop
 8003660:	f7ff b96e 	b.w	8002940 <main+0x9c>
			break;
 8003664:	bf00      	nop
 8003666:	f7ff b96b 	b.w	8002940 <main+0x9c>
			break;
 800366a:	bf00      	nop
 800366c:	f7ff b968 	b.w	8002940 <main+0x9c>
			break;
 8003670:	bf00      	nop
 8003672:	f7ff b965 	b.w	8002940 <main+0x9c>
			break;
 8003676:	bf00      	nop
 8003678:	f7ff b962 	b.w	8002940 <main+0x9c>
			break;
 800367c:	bf00      	nop
 800367e:	f7ff b95f 	b.w	8002940 <main+0x9c>
			break;
 8003682:	bf00      	nop
 8003684:	f7ff b95c 	b.w	8002940 <main+0x9c>
			break;
 8003688:	bf00      	nop
 800368a:	f7ff b959 	b.w	8002940 <main+0x9c>
			break;
 800368e:	bf00      	nop
 8003690:	f7ff b956 	b.w	8002940 <main+0x9c>
			break;
 8003694:	bf00      	nop
 8003696:	f7ff b953 	b.w	8002940 <main+0x9c>
			break;
 800369a:	bf00      	nop
 800369c:	f7ff b950 	b.w	8002940 <main+0x9c>
			break;
 80036a0:	bf00      	nop
 80036a2:	f7ff b94d 	b.w	8002940 <main+0x9c>
			break;
 80036a6:	bf00      	nop
 80036a8:	f7ff b94a 	b.w	8002940 <main+0x9c>
			break;
 80036ac:	bf00      	nop
 80036ae:	f7ff b947 	b.w	8002940 <main+0x9c>
			break;
 80036b2:	bf00      	nop
 80036b4:	f7ff b944 	b.w	8002940 <main+0x9c>
			break;
 80036b8:	bf00      	nop
 80036ba:	f7ff b941 	b.w	8002940 <main+0x9c>
			break;
 80036be:	bf00      	nop
 80036c0:	f7ff b93e 	b.w	8002940 <main+0x9c>
			break;
 80036c4:	bf00      	nop
 80036c6:	f7ff b93b 	b.w	8002940 <main+0x9c>
			break;
 80036ca:	bf00      	nop
 80036cc:	f7ff b938 	b.w	8002940 <main+0x9c>
			break;
 80036d0:	bf00      	nop
		switch (step) { //ljubicasta strana, sto 1
 80036d2:	f7ff b935 	b.w	8002940 <main+0x9c>
 80036d6:	bf00      	nop
 80036d8:	20000008 	.word	0x20000008
 80036dc:	20000148 	.word	0x20000148
 80036e0:	c446d745 	.word	0xc446d745
 80036e4:	2000014c 	.word	0x2000014c
 80036e8:	4257b7f3 	.word	0x4257b7f3
 80036ec:	20000110 	.word	0x20000110
 80036f0:	c0182253 	.word	0xc0182253
 80036f4:	20000154 	.word	0x20000154
 80036f8:	2000027e 	.word	0x2000027e
 80036fc:	08008b5c 	.word	0x08008b5c
 8003700:	20000238 	.word	0x20000238
 8003704:	2000000c 	.word	0x2000000c
 8003708:	08008b60 	.word	0x08008b60
 800370c:	42a2de40 	.word	0x42a2de40
 8003710:	4423d261 	.word	0x4423d261
 8003714:	c035c08f 	.word	0xc035c08f
 8003718:	43ff60fa 	.word	0x43ff60fa
 800371c:	433d1244 	.word	0x433d1244
 8003720:	401d1dd0 	.word	0x401d1dd0

08003724 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003724:	b580      	push	{r7, lr}
 8003726:	b094      	sub	sp, #80	; 0x50
 8003728:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800372a:	f107 0320 	add.w	r3, r7, #32
 800372e:	2230      	movs	r2, #48	; 0x30
 8003730:	2100      	movs	r1, #0
 8003732:	4618      	mov	r0, r3
 8003734:	f003 f95a 	bl	80069ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003738:	f107 030c 	add.w	r3, r7, #12
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003748:	2300      	movs	r3, #0
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	4b28      	ldr	r3, [pc, #160]	; (80037f0 <SystemClock_Config+0xcc>)
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	4a27      	ldr	r2, [pc, #156]	; (80037f0 <SystemClock_Config+0xcc>)
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003756:	6413      	str	r3, [r2, #64]	; 0x40
 8003758:	4b25      	ldr	r3, [pc, #148]	; (80037f0 <SystemClock_Config+0xcc>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003764:	2300      	movs	r3, #0
 8003766:	607b      	str	r3, [r7, #4]
 8003768:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <SystemClock_Config+0xd0>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003770:	4a20      	ldr	r2, [pc, #128]	; (80037f4 <SystemClock_Config+0xd0>)
 8003772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <SystemClock_Config+0xd0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003784:	2301      	movs	r3, #1
 8003786:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800378e:	2302      	movs	r3, #2
 8003790:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003792:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003796:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8003798:	2304      	movs	r3, #4
 800379a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 800379c:	2354      	movs	r3, #84	; 0x54
 800379e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037a0:	2302      	movs	r3, #2
 80037a2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80037a4:	2304      	movs	r3, #4
 80037a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80037a8:	f107 0320 	add.w	r3, r7, #32
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 ffa9 	bl	8004704 <HAL_RCC_OscConfig>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <SystemClock_Config+0x98>
		Error_Handler();
 80037b8:	f000 fa36 	bl	8003c28 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80037bc:	230f      	movs	r3, #15
 80037be:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037c0:	2302      	movs	r3, #2
 80037c2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037cc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037ce:	2300      	movs	r3, #0
 80037d0:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80037d2:	f107 030c 	add.w	r3, r7, #12
 80037d6:	2102      	movs	r1, #2
 80037d8:	4618      	mov	r0, r3
 80037da:	f001 fa0b 	bl	8004bf4 <HAL_RCC_ClockConfig>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <SystemClock_Config+0xc4>
		Error_Handler();
 80037e4:	f000 fa20 	bl	8003c28 <Error_Handler>
	}
}
 80037e8:	bf00      	nop
 80037ea:	3750      	adds	r7, #80	; 0x50
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40007000 	.word	0x40007000

080037f8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b096      	sub	sp, #88	; 0x58
 80037fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80037fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800380c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	60da      	str	r2, [r3, #12]
 8003824:	611a      	str	r2, [r3, #16]
 8003826:	615a      	str	r2, [r3, #20]
 8003828:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800382a:	1d3b      	adds	r3, r7, #4
 800382c:	2220      	movs	r2, #32
 800382e:	2100      	movs	r1, #0
 8003830:	4618      	mov	r0, r3
 8003832:	f003 f8db 	bl	80069ec <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003836:	4b50      	ldr	r3, [pc, #320]	; (8003978 <MX_TIM1_Init+0x180>)
 8003838:	4a50      	ldr	r2, [pc, #320]	; (800397c <MX_TIM1_Init+0x184>)
 800383a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800383c:	4b4e      	ldr	r3, [pc, #312]	; (8003978 <MX_TIM1_Init+0x180>)
 800383e:	2200      	movs	r2, #0
 8003840:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003842:	4b4d      	ldr	r3, [pc, #308]	; (8003978 <MX_TIM1_Init+0x180>)
 8003844:	2200      	movs	r2, #0
 8003846:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4200;
 8003848:	4b4b      	ldr	r3, [pc, #300]	; (8003978 <MX_TIM1_Init+0x180>)
 800384a:	f241 0268 	movw	r2, #4200	; 0x1068
 800384e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003850:	4b49      	ldr	r3, [pc, #292]	; (8003978 <MX_TIM1_Init+0x180>)
 8003852:	2200      	movs	r2, #0
 8003854:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003856:	4b48      	ldr	r3, [pc, #288]	; (8003978 <MX_TIM1_Init+0x180>)
 8003858:	2200      	movs	r2, #0
 800385a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800385c:	4b46      	ldr	r3, [pc, #280]	; (8003978 <MX_TIM1_Init+0x180>)
 800385e:	2200      	movs	r2, #0
 8003860:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8003862:	4845      	ldr	r0, [pc, #276]	; (8003978 <MX_TIM1_Init+0x180>)
 8003864:	f001 fbe6 	bl	8005034 <HAL_TIM_Base_Init>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_TIM1_Init+0x7a>
		Error_Handler();
 800386e:	f000 f9db 	bl	8003c28 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003876:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003878:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800387c:	4619      	mov	r1, r3
 800387e:	483e      	ldr	r0, [pc, #248]	; (8003978 <MX_TIM1_Init+0x180>)
 8003880:	f002 f82e 	bl	80058e0 <HAL_TIM_ConfigClockSource>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_TIM1_Init+0x96>
		Error_Handler();
 800388a:	f000 f9cd 	bl	8003c28 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800388e:	483a      	ldr	r0, [pc, #232]	; (8003978 <MX_TIM1_Init+0x180>)
 8003890:	f001 fc1f 	bl	80050d2 <HAL_TIM_PWM_Init>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <MX_TIM1_Init+0xa6>
		Error_Handler();
 800389a:	f000 f9c5 	bl	8003c28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800389e:	2300      	movs	r3, #0
 80038a0:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80038a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038aa:	4619      	mov	r1, r3
 80038ac:	4832      	ldr	r0, [pc, #200]	; (8003978 <MX_TIM1_Init+0x180>)
 80038ae:	f002 fbdd 	bl	800606c <HAL_TIMEx_MasterConfigSynchronization>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80038b8:	f000 f9b6 	bl	8003c28 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038bc:	2360      	movs	r3, #96	; 0x60
 80038be:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038c4:	2300      	movs	r3, #0
 80038c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038c8:	2300      	movs	r3, #0
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038d0:	2300      	movs	r3, #0
 80038d2:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038d4:	2300      	movs	r3, #0
 80038d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80038d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038dc:	2200      	movs	r2, #0
 80038de:	4619      	mov	r1, r3
 80038e0:	4825      	ldr	r0, [pc, #148]	; (8003978 <MX_TIM1_Init+0x180>)
 80038e2:	f001 ff3b 	bl	800575c <HAL_TIM_PWM_ConfigChannel>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 80038ec:	f000 f99c 	bl	8003c28 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80038f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f4:	2204      	movs	r2, #4
 80038f6:	4619      	mov	r1, r3
 80038f8:	481f      	ldr	r0, [pc, #124]	; (8003978 <MX_TIM1_Init+0x180>)
 80038fa:	f001 ff2f 	bl	800575c <HAL_TIM_PWM_ConfigChannel>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <MX_TIM1_Init+0x110>
			!= HAL_OK) {
		Error_Handler();
 8003904:	f000 f990 	bl	8003c28 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8003908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800390c:	2208      	movs	r2, #8
 800390e:	4619      	mov	r1, r3
 8003910:	4819      	ldr	r0, [pc, #100]	; (8003978 <MX_TIM1_Init+0x180>)
 8003912:	f001 ff23 	bl	800575c <HAL_TIM_PWM_ConfigChannel>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 800391c:	f000 f984 	bl	8003c28 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 8003920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003924:	220c      	movs	r2, #12
 8003926:	4619      	mov	r1, r3
 8003928:	4813      	ldr	r0, [pc, #76]	; (8003978 <MX_TIM1_Init+0x180>)
 800392a:	f001 ff17 	bl	800575c <HAL_TIM_PWM_ConfigChannel>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_TIM1_Init+0x140>
			!= HAL_OK) {
		Error_Handler();
 8003934:	f000 f978 	bl	8003c28 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003938:	2300      	movs	r3, #0
 800393a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800394c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003950:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003952:	2300      	movs	r3, #0
 8003954:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	4619      	mov	r1, r3
 800395a:	4807      	ldr	r0, [pc, #28]	; (8003978 <MX_TIM1_Init+0x180>)
 800395c:	f002 fbf4 	bl	8006148 <HAL_TIMEx_ConfigBreakDeadTime>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <MX_TIM1_Init+0x172>
			!= HAL_OK) {
		Error_Handler();
 8003966:	f000 f95f 	bl	8003c28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800396a:	4803      	ldr	r0, [pc, #12]	; (8003978 <MX_TIM1_Init+0x180>)
 800396c:	f000 fa48 	bl	8003e00 <HAL_TIM_MspPostInit>

}
 8003970:	bf00      	nop
 8003972:	3758      	adds	r7, #88	; 0x58
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000160 	.word	0x20000160
 800397c:	40010000 	.word	0x40010000

08003980 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b08c      	sub	sp, #48	; 0x30
 8003984:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003986:	f107 030c 	add.w	r3, r7, #12
 800398a:	2224      	movs	r2, #36	; 0x24
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f003 f82c 	bl	80069ec <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800399c:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <MX_TIM3_Init+0xa0>)
 800399e:	4a21      	ldr	r2, [pc, #132]	; (8003a24 <MX_TIM3_Init+0xa4>)
 80039a0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80039a2:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <MX_TIM3_Init+0xa0>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a8:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <MX_TIM3_Init+0xa0>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80039ae:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <MX_TIM3_Init+0xa0>)
 80039b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039b4:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039b6:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <MX_TIM3_Init+0xa0>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <MX_TIM3_Init+0xa0>)
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80039c2:	2303      	movs	r3, #3
 80039c4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80039c6:	2302      	movs	r3, #2
 80039c8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80039ca:	2301      	movs	r3, #1
 80039cc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80039d6:	2302      	movs	r3, #2
 80039d8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80039da:	2301      	movs	r3, #1
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80039de:	2300      	movs	r3, #0
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 80039e6:	f107 030c 	add.w	r3, r7, #12
 80039ea:	4619      	mov	r1, r3
 80039ec:	480c      	ldr	r0, [pc, #48]	; (8003a20 <MX_TIM3_Init+0xa0>)
 80039ee:	f001 fc79 	bl	80052e4 <HAL_TIM_Encoder_Init>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <MX_TIM3_Init+0x7c>
		Error_Handler();
 80039f8:	f000 f916 	bl	8003c28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039fc:	2300      	movs	r3, #0
 80039fe:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	4805      	ldr	r0, [pc, #20]	; (8003a20 <MX_TIM3_Init+0xa0>)
 8003a0a:	f002 fb2f 	bl	800606c <HAL_TIMEx_MasterConfigSynchronization>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8003a14:	f000 f908 	bl	8003c28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003a18:	bf00      	nop
 8003a1a:	3730      	adds	r7, #48	; 0x30
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	200001a8 	.word	0x200001a8
 8003a24:	40000400 	.word	0x40000400

08003a28 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08c      	sub	sp, #48	; 0x30
 8003a2c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003a2e:	f107 030c 	add.w	r3, r7, #12
 8003a32:	2224      	movs	r2, #36	; 0x24
 8003a34:	2100      	movs	r1, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	f002 ffd8 	bl	80069ec <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003a3c:	1d3b      	adds	r3, r7, #4
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003a44:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <MX_TIM4_Init+0xa0>)
 8003a46:	4a21      	ldr	r2, [pc, #132]	; (8003acc <MX_TIM4_Init+0xa4>)
 8003a48:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003a4a:	4b1f      	ldr	r3, [pc, #124]	; (8003ac8 <MX_TIM4_Init+0xa0>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a50:	4b1d      	ldr	r3, [pc, #116]	; (8003ac8 <MX_TIM4_Init+0xa0>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003a56:	4b1c      	ldr	r3, [pc, #112]	; (8003ac8 <MX_TIM4_Init+0xa0>)
 8003a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a5c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <MX_TIM4_Init+0xa0>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a64:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <MX_TIM4_Init+0xa0>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a72:	2301      	movs	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a82:	2301      	movs	r3, #1
 8003a84:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a86:	2300      	movs	r3, #0
 8003a88:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK) {
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	4619      	mov	r1, r3
 8003a94:	480c      	ldr	r0, [pc, #48]	; (8003ac8 <MX_TIM4_Init+0xa0>)
 8003a96:	f001 fc25 	bl	80052e4 <HAL_TIM_Encoder_Init>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_TIM4_Init+0x7c>
		Error_Handler();
 8003aa0:	f000 f8c2 	bl	8003c28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003aac:	1d3b      	adds	r3, r7, #4
 8003aae:	4619      	mov	r1, r3
 8003ab0:	4805      	ldr	r0, [pc, #20]	; (8003ac8 <MX_TIM4_Init+0xa0>)
 8003ab2:	f002 fadb 	bl	800606c <HAL_TIMEx_MasterConfigSynchronization>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM4_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8003abc:	f000 f8b4 	bl	8003c28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003ac0:	bf00      	nop
 8003ac2:	3730      	adds	r7, #48	; 0x30
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	200001f0 	.word	0x200001f0
 8003acc:	40000800 	.word	0x40000800

08003ad0 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <MX_USART6_UART_Init+0x50>)
 8003ad8:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ae0:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003af6:	220c      	movs	r2, #12
 8003af8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8003b06:	4805      	ldr	r0, [pc, #20]	; (8003b1c <MX_USART6_UART_Init+0x4c>)
 8003b08:	f002 fb84 	bl	8006214 <HAL_UART_Init>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8003b12:	f000 f889 	bl	8003c28 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000238 	.word	0x20000238
 8003b20:	40011400 	.word	0x40011400

08003b24 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003b2a:	f107 0314 	add.w	r3, r7, #20
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	605a      	str	r2, [r3, #4]
 8003b34:	609a      	str	r2, [r3, #8]
 8003b36:	60da      	str	r2, [r3, #12]
 8003b38:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	4b36      	ldr	r3, [pc, #216]	; (8003c18 <MX_GPIO_Init+0xf4>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	4a35      	ldr	r2, [pc, #212]	; (8003c18 <MX_GPIO_Init+0xf4>)
 8003b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b48:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4a:	4b33      	ldr	r3, [pc, #204]	; (8003c18 <MX_GPIO_Init+0xf4>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <MX_GPIO_Init+0xf4>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	4a2e      	ldr	r2, [pc, #184]	; (8003c18 <MX_GPIO_Init+0xf4>)
 8003b60:	f043 0304 	orr.w	r3, r3, #4
 8003b64:	6313      	str	r3, [r2, #48]	; 0x30
 8003b66:	4b2c      	ldr	r3, [pc, #176]	; (8003c18 <MX_GPIO_Init+0xf4>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f003 0304 	and.w	r3, r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <MX_GPIO_Init+0xf4>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	4a27      	ldr	r2, [pc, #156]	; (8003c18 <MX_GPIO_Init+0xf4>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	6313      	str	r3, [r2, #48]	; 0x30
 8003b82:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <MX_GPIO_Init+0xf4>)
 8003b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <MX_GPIO_Init+0xf4>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	4a20      	ldr	r2, [pc, #128]	; (8003c18 <MX_GPIO_Init+0xf4>)
 8003b98:	f043 0302 	orr.w	r3, r3, #2
 8003b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9e:	4b1e      	ldr	r3, [pc, #120]	; (8003c18 <MX_GPIO_Init+0xf4>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8003baa:	2200      	movs	r2, #0
 8003bac:	2130      	movs	r1, #48	; 0x30
 8003bae:	481b      	ldr	r0, [pc, #108]	; (8003c1c <MX_GPIO_Init+0xf8>)
 8003bb0:	f000 fd8e 	bl	80046d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	213b      	movs	r1, #59	; 0x3b
 8003bb8:	4819      	ldr	r0, [pc, #100]	; (8003c20 <MX_GPIO_Init+0xfc>)
 8003bba:	f000 fd89 	bl	80046d0 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC0 PC1 PC2 PC3
	 PC5 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8003bbe:	f240 232f 	movw	r3, #559	; 0x22f
 8003bc2:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_5 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bcc:	f107 0314 	add.w	r3, r7, #20
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4814      	ldr	r0, [pc, #80]	; (8003c24 <MX_GPIO_Init+0x100>)
 8003bd4:	f000 fbf8 	bl	80043c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8003bd8:	2330      	movs	r3, #48	; 0x30
 8003bda:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be4:	2300      	movs	r3, #0
 8003be6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	4619      	mov	r1, r3
 8003bee:	480b      	ldr	r0, [pc, #44]	; (8003c1c <MX_GPIO_Init+0xf8>)
 8003bf0:	f000 fbea 	bl	80043c8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB3 PB4
	 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4
 8003bf4:	233b      	movs	r3, #59	; 0x3b
 8003bf6:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_5;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c00:	2300      	movs	r3, #0
 8003c02:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c04:	f107 0314 	add.w	r3, r7, #20
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4805      	ldr	r0, [pc, #20]	; (8003c20 <MX_GPIO_Init+0xfc>)
 8003c0c:	f000 fbdc 	bl	80043c8 <HAL_GPIO_Init>

}
 8003c10:	bf00      	nop
 8003c12:	3728      	adds	r7, #40	; 0x28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40020000 	.word	0x40020000
 8003c20:	40020400 	.word	0x40020400
 8003c24:	40020800 	.word	0x40020800

08003c28 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c2c:	b672      	cpsid	i
}
 8003c2e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003c30:	e7fe      	b.n	8003c30 <Error_Handler+0x8>
	...

08003c34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	4a0f      	ldr	r2, [pc, #60]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c48:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	4b09      	ldr	r3, [pc, #36]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_MspInit+0x4c>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800

08003c84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <HAL_TIM_Base_MspInit+0x58>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d11d      	bne.n	8003cd2 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <HAL_TIM_Base_MspInit+0x5c>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <HAL_TIM_Base_MspInit+0x5c>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <HAL_TIM_Base_MspInit+0x5c>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	2018      	movs	r0, #24
 8003cb8:	f000 fb4f 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003cbc:	2018      	movs	r0, #24
 8003cbe:	f000 fb68 	bl	8004392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	201b      	movs	r0, #27
 8003cc8:	f000 fb47 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003ccc:	201b      	movs	r0, #27
 8003cce:	f000 fb60 	bl	8004392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003cd2:	bf00      	nop
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	40023800 	.word	0x40023800

08003ce4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08c      	sub	sp, #48	; 0x30
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cec:	f107 031c 	add.w	r3, r7, #28
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a3a      	ldr	r2, [pc, #232]	; (8003dec <HAL_TIM_Encoder_MspInit+0x108>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d134      	bne.n	8003d70 <HAL_TIM_Encoder_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	4a38      	ldr	r2, [pc, #224]	; (8003df0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d10:	f043 0302 	orr.w	r3, r3, #2
 8003d14:	6413      	str	r3, [r2, #64]	; 0x40
 8003d16:	4b36      	ldr	r3, [pc, #216]	; (8003df0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	4b32      	ldr	r3, [pc, #200]	; (8003df0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	4a31      	ldr	r2, [pc, #196]	; (8003df0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6313      	str	r3, [r2, #48]	; 0x30
 8003d32:	4b2f      	ldr	r3, [pc, #188]	; (8003df0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d3e:	23c0      	movs	r3, #192	; 0xc0
 8003d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d42:	2302      	movs	r3, #2
 8003d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d4e:	2302      	movs	r3, #2
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d52:	f107 031c 	add.w	r3, r7, #28
 8003d56:	4619      	mov	r1, r3
 8003d58:	4826      	ldr	r0, [pc, #152]	; (8003df4 <HAL_TIM_Encoder_MspInit+0x110>)
 8003d5a:	f000 fb35 	bl	80043c8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2100      	movs	r1, #0
 8003d62:	201d      	movs	r0, #29
 8003d64:	f000 faf9 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003d68:	201d      	movs	r0, #29
 8003d6a:	f000 fb12 	bl	8004392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d6e:	e038      	b.n	8003de2 <HAL_TIM_Encoder_MspInit+0xfe>
  else if(htim_encoder->Instance==TIM4)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a20      	ldr	r2, [pc, #128]	; (8003df8 <HAL_TIM_Encoder_MspInit+0x114>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d133      	bne.n	8003de2 <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a1b      	ldr	r2, [pc, #108]	; (8003df0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8a:	4b19      	ldr	r3, [pc, #100]	; (8003df0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003db2:	23c0      	movs	r3, #192	; 0xc0
 8003db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db6:	2302      	movs	r3, #2
 8003db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc6:	f107 031c 	add.w	r3, r7, #28
 8003dca:	4619      	mov	r1, r3
 8003dcc:	480b      	ldr	r0, [pc, #44]	; (8003dfc <HAL_TIM_Encoder_MspInit+0x118>)
 8003dce:	f000 fafb 	bl	80043c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	201e      	movs	r0, #30
 8003dd8:	f000 fabf 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ddc:	201e      	movs	r0, #30
 8003dde:	f000 fad8 	bl	8004392 <HAL_NVIC_EnableIRQ>
}
 8003de2:	bf00      	nop
 8003de4:	3730      	adds	r7, #48	; 0x30
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40000400 	.word	0x40000400
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40020000 	.word	0x40020000
 8003df8:	40000800 	.word	0x40000800
 8003dfc:	40020400 	.word	0x40020400

08003e00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	609a      	str	r2, [r3, #8]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <HAL_TIM_MspPostInit+0x68>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d11e      	bne.n	8003e60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <HAL_TIM_MspPostInit+0x6c>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <HAL_TIM_MspPostInit+0x6c>)
 8003e2c:	f043 0301 	orr.w	r3, r3, #1
 8003e30:	6313      	str	r3, [r2, #48]	; 0x30
 8003e32:	4b0e      	ldr	r3, [pc, #56]	; (8003e6c <HAL_TIM_MspPostInit+0x6c>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003e3e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003e42:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e44:	2302      	movs	r3, #2
 8003e46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e50:	2301      	movs	r3, #1
 8003e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e54:	f107 030c 	add.w	r3, r7, #12
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4805      	ldr	r0, [pc, #20]	; (8003e70 <HAL_TIM_MspPostInit+0x70>)
 8003e5c:	f000 fab4 	bl	80043c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003e60:	bf00      	nop
 8003e62:	3720      	adds	r7, #32
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40010000 	.word	0x40010000
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40020000 	.word	0x40020000

08003e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7c:	f107 0314 	add.w	r3, r7, #20
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a21      	ldr	r2, [pc, #132]	; (8003f18 <HAL_UART_MspInit+0xa4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d13b      	bne.n	8003f0e <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e96:	2300      	movs	r3, #0
 8003e98:	613b      	str	r3, [r7, #16]
 8003e9a:	4b20      	ldr	r3, [pc, #128]	; (8003f1c <HAL_UART_MspInit+0xa8>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9e:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <HAL_UART_MspInit+0xa8>)
 8003ea0:	f043 0320 	orr.w	r3, r3, #32
 8003ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ea6:	4b1d      	ldr	r3, [pc, #116]	; (8003f1c <HAL_UART_MspInit+0xa8>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <HAL_UART_MspInit+0xa8>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	4a18      	ldr	r2, [pc, #96]	; (8003f1c <HAL_UART_MspInit+0xa8>)
 8003ebc:	f043 0304 	orr.w	r3, r3, #4
 8003ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec2:	4b16      	ldr	r3, [pc, #88]	; (8003f1c <HAL_UART_MspInit+0xa8>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ece:	23c0      	movs	r3, #192	; 0xc0
 8003ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eda:	2303      	movs	r3, #3
 8003edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003ede:	2308      	movs	r3, #8
 8003ee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ee2:	f107 0314 	add.w	r3, r7, #20
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	480d      	ldr	r0, [pc, #52]	; (8003f20 <HAL_UART_MspInit+0xac>)
 8003eea:	f000 fa6d 	bl	80043c8 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	2047      	movs	r0, #71	; 0x47
 8003ef4:	f000 fa31 	bl	800435a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003ef8:	2047      	movs	r0, #71	; 0x47
 8003efa:	f000 fa4a 	bl	8004392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0220 	orr.w	r2, r2, #32
 8003f0c:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003f0e:	bf00      	nop
 8003f10:	3728      	adds	r7, #40	; 0x28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40011400 	.word	0x40011400
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40020800 	.word	0x40020800

08003f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003f28:	e7fe      	b.n	8003f28 <NMI_Handler+0x4>

08003f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f2e:	e7fe      	b.n	8003f2e <HardFault_Handler+0x4>

08003f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f34:	e7fe      	b.n	8003f34 <MemManage_Handler+0x4>

08003f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f36:	b480      	push	{r7}
 8003f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f3a:	e7fe      	b.n	8003f3a <BusFault_Handler+0x4>

08003f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f40:	e7fe      	b.n	8003f40 <UsageFault_Handler+0x4>

08003f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f42:	b480      	push	{r7}
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f70:	f000 f8d4 	bl	800411c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f74:	bf00      	nop
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f7c:	4802      	ldr	r0, [pc, #8]	; (8003f88 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003f7e:	f001 fae5 	bl	800554c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000160 	.word	0x20000160

08003f8c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f90:	4802      	ldr	r0, [pc, #8]	; (8003f9c <TIM1_CC_IRQHandler+0x10>)
 8003f92:	f001 fadb 	bl	800554c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000160 	.word	0x20000160

08003fa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003fa4:	4802      	ldr	r0, [pc, #8]	; (8003fb0 <TIM3_IRQHandler+0x10>)
 8003fa6:	f001 fad1 	bl	800554c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003faa:	bf00      	nop
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	200001a8 	.word	0x200001a8

08003fb4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003fb8:	4802      	ldr	r0, [pc, #8]	; (8003fc4 <TIM4_IRQHandler+0x10>)
 8003fba:	f001 fac7 	bl	800554c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003fbe:	bf00      	nop
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	200001f0 	.word	0x200001f0

08003fc8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if ((USART6->SR & (0b1 << 5)) != 0)
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <USART6_IRQHandler+0x30>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <USART6_IRQHandler+0x26>
	    {

	      // Vršimo ciitanje podatka
	      prijem = USART6->DR;
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <USART6_IRQHandler+0x30>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <USART6_IRQHandler+0x34>)
 8003fe0:	701a      	strb	r2, [r3, #0]

	      USART6->SR &= ~(0b1 << 5);
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <USART6_IRQHandler+0x30>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <USART6_IRQHandler+0x30>)
 8003fe8:	f023 0320 	bic.w	r3, r3, #32
 8003fec:	6013      	str	r3, [r2, #0]
	    }
	return;
 8003fee:	bf00      	nop
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	40011400 	.word	0x40011400
 8003ffc:	2000027c 	.word	0x2000027c

08004000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <SystemInit+0x20>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	4a05      	ldr	r2, [pc, #20]	; (8004020 <SystemInit+0x20>)
 800400c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  


  ldr   sp, =_estack    		 /* set stack pointer */
 8004024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800405c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004028:	480d      	ldr	r0, [pc, #52]	; (8004060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800402a:	490e      	ldr	r1, [pc, #56]	; (8004064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800402c:	4a0e      	ldr	r2, [pc, #56]	; (8004068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800402e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004030:	e002      	b.n	8004038 <LoopCopyDataInit>

08004032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004036:	3304      	adds	r3, #4

08004038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800403a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800403c:	d3f9      	bcc.n	8004032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800403e:	4a0b      	ldr	r2, [pc, #44]	; (800406c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004040:	4c0b      	ldr	r4, [pc, #44]	; (8004070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004044:	e001      	b.n	800404a <LoopFillZerobss>

08004046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004048:	3204      	adds	r2, #4

0800404a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800404a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800404c:	d3fb      	bcc.n	8004046 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800404e:	f7ff ffd7 	bl	8004000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004052:	f002 fca7 	bl	80069a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004056:	f7fe fc25 	bl	80028a4 <main>
  bx  lr    
 800405a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800405c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004064:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8004068:	08009170 	.word	0x08009170
  ldr r2, =_sbss
 800406c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004070:	20000284 	.word	0x20000284

08004074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004074:	e7fe      	b.n	8004074 <ADC_IRQHandler>
	...

08004078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800407c:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <HAL_Init+0x40>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0d      	ldr	r2, [pc, #52]	; (80040b8 <HAL_Init+0x40>)
 8004082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_Init+0x40>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <HAL_Init+0x40>)
 800408e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004094:	4b08      	ldr	r3, [pc, #32]	; (80040b8 <HAL_Init+0x40>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a07      	ldr	r2, [pc, #28]	; (80040b8 <HAL_Init+0x40>)
 800409a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040a0:	2003      	movs	r0, #3
 80040a2:	f000 f94f 	bl	8004344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040a6:	200f      	movs	r0, #15
 80040a8:	f000 f808 	bl	80040bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040ac:	f7ff fdc2 	bl	8003c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	40023c00 	.word	0x40023c00

080040bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040c4:	4b12      	ldr	r3, [pc, #72]	; (8004110 <HAL_InitTick+0x54>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_InitTick+0x58>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	4619      	mov	r1, r3
 80040ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 f967 	bl	80043ae <HAL_SYSTICK_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e00e      	b.n	8004108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b0f      	cmp	r3, #15
 80040ee:	d80a      	bhi.n	8004106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040f0:	2200      	movs	r2, #0
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
 80040f8:	f000 f92f 	bl	800435a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040fc:	4a06      	ldr	r2, [pc, #24]	; (8004118 <HAL_InitTick+0x5c>)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	e000      	b.n	8004108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20000010 	.word	0x20000010
 8004114:	20000018 	.word	0x20000018
 8004118:	20000014 	.word	0x20000014

0800411c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_IncTick+0x20>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	4b06      	ldr	r3, [pc, #24]	; (8004140 <HAL_IncTick+0x24>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4413      	add	r3, r2
 800412c:	4a04      	ldr	r2, [pc, #16]	; (8004140 <HAL_IncTick+0x24>)
 800412e:	6013      	str	r3, [r2, #0]
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000018 	.word	0x20000018
 8004140:	20000280 	.word	0x20000280

08004144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  return uwTick;
 8004148:	4b03      	ldr	r3, [pc, #12]	; (8004158 <HAL_GetTick+0x14>)
 800414a:	681b      	ldr	r3, [r3, #0]
}
 800414c:	4618      	mov	r0, r3
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	20000280 	.word	0x20000280

0800415c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004164:	f7ff ffee 	bl	8004144 <HAL_GetTick>
 8004168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d005      	beq.n	8004182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <HAL_Delay+0x44>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004182:	bf00      	nop
 8004184:	f7ff ffde 	bl	8004144 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d8f7      	bhi.n	8004184 <HAL_Delay+0x28>
  {
  }
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000018 	.word	0x20000018

080041a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <__NVIC_SetPriorityGrouping+0x44>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041c0:	4013      	ands	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041d6:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <__NVIC_SetPriorityGrouping+0x44>)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	60d3      	str	r3, [r2, #12]
}
 80041dc:	bf00      	nop
 80041de:	3714      	adds	r7, #20
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	e000ed00 	.word	0xe000ed00

080041ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <__NVIC_GetPriorityGrouping+0x18>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	f003 0307 	and.w	r3, r3, #7
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	e000ed00 	.word	0xe000ed00

08004208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004216:	2b00      	cmp	r3, #0
 8004218:	db0b      	blt.n	8004232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800421a:	79fb      	ldrb	r3, [r7, #7]
 800421c:	f003 021f 	and.w	r2, r3, #31
 8004220:	4907      	ldr	r1, [pc, #28]	; (8004240 <__NVIC_EnableIRQ+0x38>)
 8004222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	2001      	movs	r0, #1
 800422a:	fa00 f202 	lsl.w	r2, r0, r2
 800422e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000e100 	.word	0xe000e100

08004244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	4603      	mov	r3, r0
 800424c:	6039      	str	r1, [r7, #0]
 800424e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004254:	2b00      	cmp	r3, #0
 8004256:	db0a      	blt.n	800426e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	490c      	ldr	r1, [pc, #48]	; (8004290 <__NVIC_SetPriority+0x4c>)
 800425e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004262:	0112      	lsls	r2, r2, #4
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	440b      	add	r3, r1
 8004268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800426c:	e00a      	b.n	8004284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	4908      	ldr	r1, [pc, #32]	; (8004294 <__NVIC_SetPriority+0x50>)
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	3b04      	subs	r3, #4
 800427c:	0112      	lsls	r2, r2, #4
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	440b      	add	r3, r1
 8004282:	761a      	strb	r2, [r3, #24]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	e000e100 	.word	0xe000e100
 8004294:	e000ed00 	.word	0xe000ed00

08004298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004298:	b480      	push	{r7}
 800429a:	b089      	sub	sp, #36	; 0x24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	f1c3 0307 	rsb	r3, r3, #7
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	bf28      	it	cs
 80042b6:	2304      	movcs	r3, #4
 80042b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3304      	adds	r3, #4
 80042be:	2b06      	cmp	r3, #6
 80042c0:	d902      	bls.n	80042c8 <NVIC_EncodePriority+0x30>
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3b03      	subs	r3, #3
 80042c6:	e000      	b.n	80042ca <NVIC_EncodePriority+0x32>
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042cc:	f04f 32ff 	mov.w	r2, #4294967295
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43da      	mvns	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	401a      	ands	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e0:	f04f 31ff 	mov.w	r1, #4294967295
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ea:	43d9      	mvns	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f0:	4313      	orrs	r3, r2
         );
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3724      	adds	r7, #36	; 0x24
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3b01      	subs	r3, #1
 800430c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004310:	d301      	bcc.n	8004316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004312:	2301      	movs	r3, #1
 8004314:	e00f      	b.n	8004336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004316:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <SysTick_Config+0x40>)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800431e:	210f      	movs	r1, #15
 8004320:	f04f 30ff 	mov.w	r0, #4294967295
 8004324:	f7ff ff8e 	bl	8004244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <SysTick_Config+0x40>)
 800432a:	2200      	movs	r2, #0
 800432c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800432e:	4b04      	ldr	r3, [pc, #16]	; (8004340 <SysTick_Config+0x40>)
 8004330:	2207      	movs	r2, #7
 8004332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	e000e010 	.word	0xe000e010

08004344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff ff29 	bl	80041a4 <__NVIC_SetPriorityGrouping>
}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800435a:	b580      	push	{r7, lr}
 800435c:	b086      	sub	sp, #24
 800435e:	af00      	add	r7, sp, #0
 8004360:	4603      	mov	r3, r0
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800436c:	f7ff ff3e 	bl	80041ec <__NVIC_GetPriorityGrouping>
 8004370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	6978      	ldr	r0, [r7, #20]
 8004378:	f7ff ff8e 	bl	8004298 <NVIC_EncodePriority>
 800437c:	4602      	mov	r2, r0
 800437e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004382:	4611      	mov	r1, r2
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff ff5d 	bl	8004244 <__NVIC_SetPriority>
}
 800438a:	bf00      	nop
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b082      	sub	sp, #8
 8004396:	af00      	add	r7, sp, #0
 8004398:	4603      	mov	r3, r0
 800439a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800439c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff31 	bl	8004208 <__NVIC_EnableIRQ>
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff ffa2 	bl	8004300 <SysTick_Config>
 80043bc:	4603      	mov	r3, r0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b089      	sub	sp, #36	; 0x24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043da:	2300      	movs	r3, #0
 80043dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	e159      	b.n	8004698 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80043e4:	2201      	movs	r2, #1
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4013      	ands	r3, r2
 80043f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	f040 8148 	bne.w	8004692 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f003 0303 	and.w	r3, r3, #3
 800440a:	2b01      	cmp	r3, #1
 800440c:	d005      	beq.n	800441a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004416:	2b02      	cmp	r3, #2
 8004418:	d130      	bne.n	800447c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	2203      	movs	r2, #3
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	4013      	ands	r3, r2
 8004430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4313      	orrs	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004450:	2201      	movs	r2, #1
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	091b      	lsrs	r3, r3, #4
 8004466:	f003 0201 	and.w	r2, r3, #1
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b03      	cmp	r3, #3
 8004486:	d017      	beq.n	80044b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	2203      	movs	r2, #3
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	689a      	ldr	r2, [r3, #8]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d123      	bne.n	800450c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	08da      	lsrs	r2, r3, #3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	3208      	adds	r2, #8
 80044cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	220f      	movs	r2, #15
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	43db      	mvns	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4013      	ands	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	08da      	lsrs	r2, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3208      	adds	r2, #8
 8004506:	69b9      	ldr	r1, [r7, #24]
 8004508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	2203      	movs	r2, #3
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	43db      	mvns	r3, r3
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	4013      	ands	r3, r2
 8004522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0203 	and.w	r2, r3, #3
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4313      	orrs	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80a2 	beq.w	8004692 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	4b57      	ldr	r3, [pc, #348]	; (80046b0 <HAL_GPIO_Init+0x2e8>)
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	4a56      	ldr	r2, [pc, #344]	; (80046b0 <HAL_GPIO_Init+0x2e8>)
 8004558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800455c:	6453      	str	r3, [r2, #68]	; 0x44
 800455e:	4b54      	ldr	r3, [pc, #336]	; (80046b0 <HAL_GPIO_Init+0x2e8>)
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800456a:	4a52      	ldr	r2, [pc, #328]	; (80046b4 <HAL_GPIO_Init+0x2ec>)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	089b      	lsrs	r3, r3, #2
 8004570:	3302      	adds	r3, #2
 8004572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	220f      	movs	r2, #15
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4013      	ands	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a49      	ldr	r2, [pc, #292]	; (80046b8 <HAL_GPIO_Init+0x2f0>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d019      	beq.n	80045ca <HAL_GPIO_Init+0x202>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a48      	ldr	r2, [pc, #288]	; (80046bc <HAL_GPIO_Init+0x2f4>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d013      	beq.n	80045c6 <HAL_GPIO_Init+0x1fe>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a47      	ldr	r2, [pc, #284]	; (80046c0 <HAL_GPIO_Init+0x2f8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00d      	beq.n	80045c2 <HAL_GPIO_Init+0x1fa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a46      	ldr	r2, [pc, #280]	; (80046c4 <HAL_GPIO_Init+0x2fc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d007      	beq.n	80045be <HAL_GPIO_Init+0x1f6>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a45      	ldr	r2, [pc, #276]	; (80046c8 <HAL_GPIO_Init+0x300>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <HAL_GPIO_Init+0x1f2>
 80045b6:	2304      	movs	r3, #4
 80045b8:	e008      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045ba:	2307      	movs	r3, #7
 80045bc:	e006      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045be:	2303      	movs	r3, #3
 80045c0:	e004      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e002      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <HAL_GPIO_Init+0x204>
 80045ca:	2300      	movs	r3, #0
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	f002 0203 	and.w	r2, r2, #3
 80045d2:	0092      	lsls	r2, r2, #2
 80045d4:	4093      	lsls	r3, r2
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045dc:	4935      	ldr	r1, [pc, #212]	; (80046b4 <HAL_GPIO_Init+0x2ec>)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	3302      	adds	r3, #2
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045ea:	4b38      	ldr	r3, [pc, #224]	; (80046cc <HAL_GPIO_Init+0x304>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	43db      	mvns	r3, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800460e:	4a2f      	ldr	r2, [pc, #188]	; (80046cc <HAL_GPIO_Init+0x304>)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004614:	4b2d      	ldr	r3, [pc, #180]	; (80046cc <HAL_GPIO_Init+0x304>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004638:	4a24      	ldr	r2, [pc, #144]	; (80046cc <HAL_GPIO_Init+0x304>)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800463e:	4b23      	ldr	r3, [pc, #140]	; (80046cc <HAL_GPIO_Init+0x304>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004662:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <HAL_GPIO_Init+0x304>)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004668:	4b18      	ldr	r3, [pc, #96]	; (80046cc <HAL_GPIO_Init+0x304>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800468c:	4a0f      	ldr	r2, [pc, #60]	; (80046cc <HAL_GPIO_Init+0x304>)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	3301      	adds	r3, #1
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2b0f      	cmp	r3, #15
 800469c:	f67f aea2 	bls.w	80043e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046a0:	bf00      	nop
 80046a2:	bf00      	nop
 80046a4:	3724      	adds	r7, #36	; 0x24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800
 80046b4:	40013800 	.word	0x40013800
 80046b8:	40020000 	.word	0x40020000
 80046bc:	40020400 	.word	0x40020400
 80046c0:	40020800 	.word	0x40020800
 80046c4:	40020c00 	.word	0x40020c00
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40013c00 	.word	0x40013c00

080046d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	807b      	strh	r3, [r7, #2]
 80046dc:	4613      	mov	r3, r2
 80046de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046e0:	787b      	ldrb	r3, [r7, #1]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046e6:	887a      	ldrh	r2, [r7, #2]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046ec:	e003      	b.n	80046f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ee:	887b      	ldrh	r3, [r7, #2]
 80046f0:	041a      	lsls	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	619a      	str	r2, [r3, #24]
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
	...

08004704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e267      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d075      	beq.n	800480e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004722:	4b88      	ldr	r3, [pc, #544]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b04      	cmp	r3, #4
 800472c:	d00c      	beq.n	8004748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800472e:	4b85      	ldr	r3, [pc, #532]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004736:	2b08      	cmp	r3, #8
 8004738:	d112      	bne.n	8004760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800473a:	4b82      	ldr	r3, [pc, #520]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004746:	d10b      	bne.n	8004760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004748:	4b7e      	ldr	r3, [pc, #504]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d05b      	beq.n	800480c <HAL_RCC_OscConfig+0x108>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d157      	bne.n	800480c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e242      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004768:	d106      	bne.n	8004778 <HAL_RCC_OscConfig+0x74>
 800476a:	4b76      	ldr	r3, [pc, #472]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a75      	ldr	r2, [pc, #468]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e01d      	b.n	80047b4 <HAL_RCC_OscConfig+0xb0>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x98>
 8004782:	4b70      	ldr	r3, [pc, #448]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a6f      	ldr	r2, [pc, #444]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4b6d      	ldr	r3, [pc, #436]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a6c      	ldr	r2, [pc, #432]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e00b      	b.n	80047b4 <HAL_RCC_OscConfig+0xb0>
 800479c:	4b69      	ldr	r3, [pc, #420]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a68      	ldr	r2, [pc, #416]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 80047a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	4b66      	ldr	r3, [pc, #408]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a65      	ldr	r2, [pc, #404]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 80047ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d013      	beq.n	80047e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7ff fcc2 	bl	8004144 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047c4:	f7ff fcbe 	bl	8004144 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	; 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e207      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	4b5b      	ldr	r3, [pc, #364]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0xc0>
 80047e2:	e014      	b.n	800480e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7ff fcae 	bl	8004144 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ec:	f7ff fcaa 	bl	8004144 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	; 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e1f3      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fe:	4b51      	ldr	r3, [pc, #324]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0xe8>
 800480a:	e000      	b.n	800480e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800480c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d063      	beq.n	80048e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800481a:	4b4a      	ldr	r3, [pc, #296]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00b      	beq.n	800483e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004826:	4b47      	ldr	r3, [pc, #284]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800482e:	2b08      	cmp	r3, #8
 8004830:	d11c      	bne.n	800486c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004832:	4b44      	ldr	r3, [pc, #272]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d116      	bne.n	800486c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483e:	4b41      	ldr	r3, [pc, #260]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <HAL_RCC_OscConfig+0x152>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d001      	beq.n	8004856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e1c7      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004856:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	00db      	lsls	r3, r3, #3
 8004864:	4937      	ldr	r1, [pc, #220]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004866:	4313      	orrs	r3, r2
 8004868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486a:	e03a      	b.n	80048e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d020      	beq.n	80048b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004874:	4b34      	ldr	r3, [pc, #208]	; (8004948 <HAL_RCC_OscConfig+0x244>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487a:	f7ff fc63 	bl	8004144 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004882:	f7ff fc5f 	bl	8004144 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e1a8      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004894:	4b2b      	ldr	r3, [pc, #172]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a0:	4b28      	ldr	r3, [pc, #160]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	4925      	ldr	r1, [pc, #148]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]
 80048b4:	e015      	b.n	80048e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048b6:	4b24      	ldr	r3, [pc, #144]	; (8004948 <HAL_RCC_OscConfig+0x244>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048bc:	f7ff fc42 	bl	8004144 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048c4:	f7ff fc3e 	bl	8004144 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e187      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d6:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d036      	beq.n	800495c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d016      	beq.n	8004924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048f6:	4b15      	ldr	r3, [pc, #84]	; (800494c <HAL_RCC_OscConfig+0x248>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048fc:	f7ff fc22 	bl	8004144 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004904:	f7ff fc1e 	bl	8004144 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e167      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004916:	4b0b      	ldr	r3, [pc, #44]	; (8004944 <HAL_RCC_OscConfig+0x240>)
 8004918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCC_OscConfig+0x200>
 8004922:	e01b      	b.n	800495c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004924:	4b09      	ldr	r3, [pc, #36]	; (800494c <HAL_RCC_OscConfig+0x248>)
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492a:	f7ff fc0b 	bl	8004144 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004930:	e00e      	b.n	8004950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004932:	f7ff fc07 	bl	8004144 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d907      	bls.n	8004950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e150      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
 8004944:	40023800 	.word	0x40023800
 8004948:	42470000 	.word	0x42470000
 800494c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004950:	4b88      	ldr	r3, [pc, #544]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1ea      	bne.n	8004932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8097 	beq.w	8004a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800496a:	2300      	movs	r3, #0
 800496c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496e:	4b81      	ldr	r3, [pc, #516]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10f      	bne.n	800499a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800497a:	2300      	movs	r3, #0
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	4b7d      	ldr	r3, [pc, #500]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	4a7c      	ldr	r2, [pc, #496]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004988:	6413      	str	r3, [r2, #64]	; 0x40
 800498a:	4b7a      	ldr	r3, [pc, #488]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004992:	60bb      	str	r3, [r7, #8]
 8004994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004996:	2301      	movs	r3, #1
 8004998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499a:	4b77      	ldr	r3, [pc, #476]	; (8004b78 <HAL_RCC_OscConfig+0x474>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d118      	bne.n	80049d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049a6:	4b74      	ldr	r3, [pc, #464]	; (8004b78 <HAL_RCC_OscConfig+0x474>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a73      	ldr	r2, [pc, #460]	; (8004b78 <HAL_RCC_OscConfig+0x474>)
 80049ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b2:	f7ff fbc7 	bl	8004144 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ba:	f7ff fbc3 	bl	8004144 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e10c      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049cc:	4b6a      	ldr	r3, [pc, #424]	; (8004b78 <HAL_RCC_OscConfig+0x474>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d106      	bne.n	80049ee <HAL_RCC_OscConfig+0x2ea>
 80049e0:	4b64      	ldr	r3, [pc, #400]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	4a63      	ldr	r2, [pc, #396]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	6713      	str	r3, [r2, #112]	; 0x70
 80049ec:	e01c      	b.n	8004a28 <HAL_RCC_OscConfig+0x324>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d10c      	bne.n	8004a10 <HAL_RCC_OscConfig+0x30c>
 80049f6:	4b5f      	ldr	r3, [pc, #380]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	4a5e      	ldr	r2, [pc, #376]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 80049fc:	f043 0304 	orr.w	r3, r3, #4
 8004a00:	6713      	str	r3, [r2, #112]	; 0x70
 8004a02:	4b5c      	ldr	r3, [pc, #368]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	4a5b      	ldr	r2, [pc, #364]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a08:	f043 0301 	orr.w	r3, r3, #1
 8004a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a0e:	e00b      	b.n	8004a28 <HAL_RCC_OscConfig+0x324>
 8004a10:	4b58      	ldr	r3, [pc, #352]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a14:	4a57      	ldr	r2, [pc, #348]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a1c:	4b55      	ldr	r3, [pc, #340]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a20:	4a54      	ldr	r2, [pc, #336]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a22:	f023 0304 	bic.w	r3, r3, #4
 8004a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d015      	beq.n	8004a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a30:	f7ff fb88 	bl	8004144 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a36:	e00a      	b.n	8004a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a38:	f7ff fb84 	bl	8004144 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e0cb      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4e:	4b49      	ldr	r3, [pc, #292]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0ee      	beq.n	8004a38 <HAL_RCC_OscConfig+0x334>
 8004a5a:	e014      	b.n	8004a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a5c:	f7ff fb72 	bl	8004144 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a62:	e00a      	b.n	8004a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a64:	f7ff fb6e 	bl	8004144 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e0b5      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7a:	4b3e      	ldr	r3, [pc, #248]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	f003 0302 	and.w	r3, r3, #2
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1ee      	bne.n	8004a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d105      	bne.n	8004a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a8c:	4b39      	ldr	r3, [pc, #228]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	4a38      	ldr	r2, [pc, #224]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 80a1 	beq.w	8004be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aa2:	4b34      	ldr	r3, [pc, #208]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d05c      	beq.n	8004b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d141      	bne.n	8004b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab6:	4b31      	ldr	r3, [pc, #196]	; (8004b7c <HAL_RCC_OscConfig+0x478>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abc:	f7ff fb42 	bl	8004144 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac4:	f7ff fb3e 	bl	8004144 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e087      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69da      	ldr	r2, [r3, #28]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	019b      	lsls	r3, r3, #6
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af8:	085b      	lsrs	r3, r3, #1
 8004afa:	3b01      	subs	r3, #1
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	061b      	lsls	r3, r3, #24
 8004b06:	491b      	ldr	r1, [pc, #108]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <HAL_RCC_OscConfig+0x478>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7ff fb17 	bl	8004144 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b1a:	f7ff fb13 	bl	8004144 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e05c      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2c:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d0f0      	beq.n	8004b1a <HAL_RCC_OscConfig+0x416>
 8004b38:	e054      	b.n	8004be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3a:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <HAL_RCC_OscConfig+0x478>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7ff fb00 	bl	8004144 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b48:	f7ff fafc 	bl	8004144 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e045      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1f0      	bne.n	8004b48 <HAL_RCC_OscConfig+0x444>
 8004b66:	e03d      	b.n	8004be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d107      	bne.n	8004b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e038      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
 8004b74:	40023800 	.word	0x40023800
 8004b78:	40007000 	.word	0x40007000
 8004b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b80:	4b1b      	ldr	r3, [pc, #108]	; (8004bf0 <HAL_RCC_OscConfig+0x4ec>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d028      	beq.n	8004be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d121      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d11a      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d111      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc6:	085b      	lsrs	r3, r3, #1
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d107      	bne.n	8004be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d001      	beq.n	8004be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40023800 	.word	0x40023800

08004bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0cc      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c08:	4b68      	ldr	r3, [pc, #416]	; (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d90c      	bls.n	8004c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c16:	4b65      	ldr	r3, [pc, #404]	; (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b63      	ldr	r3, [pc, #396]	; (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0b8      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d020      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c48:	4b59      	ldr	r3, [pc, #356]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	4a58      	ldr	r2, [pc, #352]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c60:	4b53      	ldr	r3, [pc, #332]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a52      	ldr	r2, [pc, #328]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c6c:	4b50      	ldr	r3, [pc, #320]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	494d      	ldr	r1, [pc, #308]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d044      	beq.n	8004d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c92:	4b47      	ldr	r3, [pc, #284]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d119      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e07f      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d003      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d107      	bne.n	8004cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb2:	4b3f      	ldr	r3, [pc, #252]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d109      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e06f      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc2:	4b3b      	ldr	r3, [pc, #236]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e067      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cd2:	4b37      	ldr	r3, [pc, #220]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f023 0203 	bic.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	4934      	ldr	r1, [pc, #208]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ce4:	f7ff fa2e 	bl	8004144 <HAL_GetTick>
 8004ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cea:	e00a      	b.n	8004d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cec:	f7ff fa2a 	bl	8004144 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e04f      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d02:	4b2b      	ldr	r3, [pc, #172]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 020c 	and.w	r2, r3, #12
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d1eb      	bne.n	8004cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d14:	4b25      	ldr	r3, [pc, #148]	; (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d20c      	bcs.n	8004d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b22      	ldr	r3, [pc, #136]	; (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2a:	4b20      	ldr	r3, [pc, #128]	; (8004dac <HAL_RCC_ClockConfig+0x1b8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d001      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e032      	b.n	8004da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d008      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d48:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4916      	ldr	r1, [pc, #88]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d66:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	490e      	ldr	r1, [pc, #56]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d7a:	f000 f821 	bl	8004dc0 <HAL_RCC_GetSysClockFreq>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	091b      	lsrs	r3, r3, #4
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	490a      	ldr	r1, [pc, #40]	; (8004db4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d8c:	5ccb      	ldrb	r3, [r1, r3]
 8004d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d92:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d96:	4b09      	ldr	r3, [pc, #36]	; (8004dbc <HAL_RCC_ClockConfig+0x1c8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff f98e 	bl	80040bc <HAL_InitTick>

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40023c00 	.word	0x40023c00
 8004db0:	40023800 	.word	0x40023800
 8004db4:	08008b64 	.word	0x08008b64
 8004db8:	20000010 	.word	0x20000010
 8004dbc:	20000014 	.word	0x20000014

08004dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc4:	b094      	sub	sp, #80	; 0x50
 8004dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	647b      	str	r3, [r7, #68]	; 0x44
 8004dcc:	2300      	movs	r3, #0
 8004dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dd8:	4b79      	ldr	r3, [pc, #484]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	f003 030c 	and.w	r3, r3, #12
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d00d      	beq.n	8004e00 <HAL_RCC_GetSysClockFreq+0x40>
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	f200 80e1 	bhi.w	8004fac <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_RCC_GetSysClockFreq+0x34>
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d003      	beq.n	8004dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8004df2:	e0db      	b.n	8004fac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004df4:	4b73      	ldr	r3, [pc, #460]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004df6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004df8:	e0db      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dfa:	4b73      	ldr	r3, [pc, #460]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dfe:	e0d8      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e00:	4b6f      	ldr	r3, [pc, #444]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e0a:	4b6d      	ldr	r3, [pc, #436]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d063      	beq.n	8004ede <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e16:	4b6a      	ldr	r3, [pc, #424]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	099b      	lsrs	r3, r3, #6
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e28:	633b      	str	r3, [r7, #48]	; 0x30
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e32:	4622      	mov	r2, r4
 8004e34:	462b      	mov	r3, r5
 8004e36:	f04f 0000 	mov.w	r0, #0
 8004e3a:	f04f 0100 	mov.w	r1, #0
 8004e3e:	0159      	lsls	r1, r3, #5
 8004e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e44:	0150      	lsls	r0, r2, #5
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	1a51      	subs	r1, r2, r1
 8004e4e:	6139      	str	r1, [r7, #16]
 8004e50:	4629      	mov	r1, r5
 8004e52:	eb63 0301 	sbc.w	r3, r3, r1
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e64:	4659      	mov	r1, fp
 8004e66:	018b      	lsls	r3, r1, #6
 8004e68:	4651      	mov	r1, sl
 8004e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e6e:	4651      	mov	r1, sl
 8004e70:	018a      	lsls	r2, r1, #6
 8004e72:	4651      	mov	r1, sl
 8004e74:	ebb2 0801 	subs.w	r8, r2, r1
 8004e78:	4659      	mov	r1, fp
 8004e7a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e92:	4690      	mov	r8, r2
 8004e94:	4699      	mov	r9, r3
 8004e96:	4623      	mov	r3, r4
 8004e98:	eb18 0303 	adds.w	r3, r8, r3
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	462b      	mov	r3, r5
 8004ea0:	eb49 0303 	adc.w	r3, r9, r3
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	024b      	lsls	r3, r1, #9
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ebc:	4621      	mov	r1, r4
 8004ebe:	024a      	lsls	r2, r1, #9
 8004ec0:	4610      	mov	r0, r2
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ed0:	f7fb fe66 	bl	8000ba0 <__aeabi_uldivmod>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4613      	mov	r3, r2
 8004eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004edc:	e058      	b.n	8004f90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ede:	4b38      	ldr	r3, [pc, #224]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	099b      	lsrs	r3, r3, #6
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	4611      	mov	r1, r2
 8004eea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eee:	623b      	str	r3, [r7, #32]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ef8:	4642      	mov	r2, r8
 8004efa:	464b      	mov	r3, r9
 8004efc:	f04f 0000 	mov.w	r0, #0
 8004f00:	f04f 0100 	mov.w	r1, #0
 8004f04:	0159      	lsls	r1, r3, #5
 8004f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f0a:	0150      	lsls	r0, r2, #5
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4641      	mov	r1, r8
 8004f12:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f16:	4649      	mov	r1, r9
 8004f18:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f30:	ebb2 040a 	subs.w	r4, r2, sl
 8004f34:	eb63 050b 	sbc.w	r5, r3, fp
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	00eb      	lsls	r3, r5, #3
 8004f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f46:	00e2      	lsls	r2, r4, #3
 8004f48:	4614      	mov	r4, r2
 8004f4a:	461d      	mov	r5, r3
 8004f4c:	4643      	mov	r3, r8
 8004f4e:	18e3      	adds	r3, r4, r3
 8004f50:	603b      	str	r3, [r7, #0]
 8004f52:	464b      	mov	r3, r9
 8004f54:	eb45 0303 	adc.w	r3, r5, r3
 8004f58:	607b      	str	r3, [r7, #4]
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f66:	4629      	mov	r1, r5
 8004f68:	028b      	lsls	r3, r1, #10
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f70:	4621      	mov	r1, r4
 8004f72:	028a      	lsls	r2, r1, #10
 8004f74:	4610      	mov	r0, r2
 8004f76:	4619      	mov	r1, r3
 8004f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	61bb      	str	r3, [r7, #24]
 8004f7e:	61fa      	str	r2, [r7, #28]
 8004f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f84:	f7fb fe0c 	bl	8000ba0 <__aeabi_uldivmod>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	0c1b      	lsrs	r3, r3, #16
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004faa:	e002      	b.n	8004fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fac:	4b05      	ldr	r3, [pc, #20]	; (8004fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3750      	adds	r7, #80	; 0x50
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	00f42400 	.word	0x00f42400
 8004fc8:	007a1200 	.word	0x007a1200

08004fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fd0:	4b03      	ldr	r3, [pc, #12]	; (8004fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000010 	.word	0x20000010

08004fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fe8:	f7ff fff0 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
 8004fec:	4602      	mov	r2, r0
 8004fee:	4b05      	ldr	r3, [pc, #20]	; (8005004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	0a9b      	lsrs	r3, r3, #10
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	4903      	ldr	r1, [pc, #12]	; (8005008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ffa:	5ccb      	ldrb	r3, [r1, r3]
 8004ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005000:	4618      	mov	r0, r3
 8005002:	bd80      	pop	{r7, pc}
 8005004:	40023800 	.word	0x40023800
 8005008:	08008b74 	.word	0x08008b74

0800500c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005010:	f7ff ffdc 	bl	8004fcc <HAL_RCC_GetHCLKFreq>
 8005014:	4602      	mov	r2, r0
 8005016:	4b05      	ldr	r3, [pc, #20]	; (800502c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	0b5b      	lsrs	r3, r3, #13
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	4903      	ldr	r1, [pc, #12]	; (8005030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005022:	5ccb      	ldrb	r3, [r1, r3]
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005028:	4618      	mov	r0, r3
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40023800 	.word	0x40023800
 8005030:	08008b74 	.word	0x08008b74

08005034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e041      	b.n	80050ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fe fe12 	bl	8003c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3304      	adds	r3, #4
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f000 fd2e 	bl	8005ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e041      	b.n	8005168 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d106      	bne.n	80050fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f839 	bl	8005170 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2202      	movs	r2, #2
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3304      	adds	r3, #4
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f000 fcdf 	bl	8005ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d109      	bne.n	80051a8 <HAL_TIM_PWM_Start+0x24>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	bf14      	ite	ne
 80051a0:	2301      	movne	r3, #1
 80051a2:	2300      	moveq	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	e022      	b.n	80051ee <HAL_TIM_PWM_Start+0x6a>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d109      	bne.n	80051c2 <HAL_TIM_PWM_Start+0x3e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	bf14      	ite	ne
 80051ba:	2301      	movne	r3, #1
 80051bc:	2300      	moveq	r3, #0
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	e015      	b.n	80051ee <HAL_TIM_PWM_Start+0x6a>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d109      	bne.n	80051dc <HAL_TIM_PWM_Start+0x58>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	bf14      	ite	ne
 80051d4:	2301      	movne	r3, #1
 80051d6:	2300      	moveq	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	e008      	b.n	80051ee <HAL_TIM_PWM_Start+0x6a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	bf14      	ite	ne
 80051e8:	2301      	movne	r3, #1
 80051ea:	2300      	moveq	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e068      	b.n	80052c8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d104      	bne.n	8005206 <HAL_TIM_PWM_Start+0x82>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005204:	e013      	b.n	800522e <HAL_TIM_PWM_Start+0xaa>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b04      	cmp	r3, #4
 800520a:	d104      	bne.n	8005216 <HAL_TIM_PWM_Start+0x92>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005214:	e00b      	b.n	800522e <HAL_TIM_PWM_Start+0xaa>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b08      	cmp	r3, #8
 800521a:	d104      	bne.n	8005226 <HAL_TIM_PWM_Start+0xa2>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005224:	e003      	b.n	800522e <HAL_TIM_PWM_Start+0xaa>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	6839      	ldr	r1, [r7, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fef2 	bl	8006020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a23      	ldr	r2, [pc, #140]	; (80052d0 <HAL_TIM_PWM_Start+0x14c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d107      	bne.n	8005256 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005254:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1d      	ldr	r2, [pc, #116]	; (80052d0 <HAL_TIM_PWM_Start+0x14c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d018      	beq.n	8005292 <HAL_TIM_PWM_Start+0x10e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005268:	d013      	beq.n	8005292 <HAL_TIM_PWM_Start+0x10e>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <HAL_TIM_PWM_Start+0x150>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00e      	beq.n	8005292 <HAL_TIM_PWM_Start+0x10e>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a17      	ldr	r2, [pc, #92]	; (80052d8 <HAL_TIM_PWM_Start+0x154>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d009      	beq.n	8005292 <HAL_TIM_PWM_Start+0x10e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a16      	ldr	r2, [pc, #88]	; (80052dc <HAL_TIM_PWM_Start+0x158>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d004      	beq.n	8005292 <HAL_TIM_PWM_Start+0x10e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a14      	ldr	r2, [pc, #80]	; (80052e0 <HAL_TIM_PWM_Start+0x15c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d111      	bne.n	80052b6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b06      	cmp	r3, #6
 80052a2:	d010      	beq.n	80052c6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b4:	e007      	b.n	80052c6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0201 	orr.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40010000 	.word	0x40010000
 80052d4:	40000400 	.word	0x40000400
 80052d8:	40000800 	.word	0x40000800
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40014000 	.word	0x40014000

080052e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e097      	b.n	8005428 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7fe fce9 	bl	8003ce4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005328:	f023 0307 	bic.w	r3, r3, #7
 800532c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3304      	adds	r3, #4
 8005336:	4619      	mov	r1, r3
 8005338:	4610      	mov	r0, r2
 800533a:	f000 fbcb 	bl	8005ad4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005366:	f023 0303 	bic.w	r3, r3, #3
 800536a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	4313      	orrs	r3, r2
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005384:	f023 030c 	bic.w	r3, r3, #12
 8005388:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005390:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68da      	ldr	r2, [r3, #12]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	4313      	orrs	r3, r2
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	011a      	lsls	r2, r3, #4
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	031b      	lsls	r3, r3, #12
 80053b4:	4313      	orrs	r3, r2
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	011b      	lsls	r3, r3, #4
 80053d6:	4313      	orrs	r3, r2
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005440:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005448:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005450:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005458:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d110      	bne.n	8005482 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005460:	7bfb      	ldrb	r3, [r7, #15]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d102      	bne.n	800546c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005466:	7b7b      	ldrb	r3, [r7, #13]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d001      	beq.n	8005470 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e069      	b.n	8005544 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005480:	e031      	b.n	80054e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b04      	cmp	r3, #4
 8005486:	d110      	bne.n	80054aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005488:	7bbb      	ldrb	r3, [r7, #14]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d102      	bne.n	8005494 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800548e:	7b3b      	ldrb	r3, [r7, #12]
 8005490:	2b01      	cmp	r3, #1
 8005492:	d001      	beq.n	8005498 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e055      	b.n	8005544 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a8:	e01d      	b.n	80054e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d108      	bne.n	80054c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80054b0:	7bbb      	ldrb	r3, [r7, #14]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d105      	bne.n	80054c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80054b6:	7b7b      	ldrb	r3, [r7, #13]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d102      	bne.n	80054c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80054bc:	7b3b      	ldrb	r3, [r7, #12]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d001      	beq.n	80054c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e03e      	b.n	8005544 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2202      	movs	r2, #2
 80054ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2202      	movs	r2, #2
 80054e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_TIM_Encoder_Start+0xc4>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	d008      	beq.n	8005504 <HAL_TIM_Encoder_Start+0xd4>
 80054f2:	e00f      	b.n	8005514 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2201      	movs	r2, #1
 80054fa:	2100      	movs	r1, #0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fd8f 	bl	8006020 <TIM_CCxChannelCmd>
      break;
 8005502:	e016      	b.n	8005532 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2201      	movs	r2, #1
 800550a:	2104      	movs	r1, #4
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fd87 	bl	8006020 <TIM_CCxChannelCmd>
      break;
 8005512:	e00e      	b.n	8005532 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2201      	movs	r2, #1
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fd7f 	bl	8006020 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2201      	movs	r2, #1
 8005528:	2104      	movs	r1, #4
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fd78 	bl	8006020 <TIM_CCxChannelCmd>
      break;
 8005530:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0201 	orr.w	r2, r2, #1
 8005540:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b02      	cmp	r3, #2
 8005560:	d122      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b02      	cmp	r3, #2
 800556e:	d11b      	bne.n	80055a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0202 	mvn.w	r2, #2
 8005578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fa81 	bl	8005a96 <HAL_TIM_IC_CaptureCallback>
 8005594:	e005      	b.n	80055a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fa73 	bl	8005a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 fa84 	bl	8005aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b04      	cmp	r3, #4
 80055b4:	d122      	bne.n	80055fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d11b      	bne.n	80055fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f06f 0204 	mvn.w	r2, #4
 80055cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fa57 	bl	8005a96 <HAL_TIM_IC_CaptureCallback>
 80055e8:	e005      	b.n	80055f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 fa49 	bl	8005a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fa5a 	bl	8005aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b08      	cmp	r3, #8
 8005608:	d122      	bne.n	8005650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b08      	cmp	r3, #8
 8005616:	d11b      	bne.n	8005650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0208 	mvn.w	r2, #8
 8005620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2204      	movs	r2, #4
 8005626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fa2d 	bl	8005a96 <HAL_TIM_IC_CaptureCallback>
 800563c:	e005      	b.n	800564a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fa1f 	bl	8005a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fa30 	bl	8005aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0310 	and.w	r3, r3, #16
 800565a:	2b10      	cmp	r3, #16
 800565c:	d122      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0310 	and.w	r3, r3, #16
 8005668:	2b10      	cmp	r3, #16
 800566a:	d11b      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0210 	mvn.w	r2, #16
 8005674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2208      	movs	r2, #8
 800567a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa03 	bl	8005a96 <HAL_TIM_IC_CaptureCallback>
 8005690:	e005      	b.n	800569e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f9f5 	bl	8005a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fa06 	bl	8005aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d10e      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d107      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0201 	mvn.w	r2, #1
 80056c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f9cf 	bl	8005a6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056da:	2b80      	cmp	r3, #128	; 0x80
 80056dc:	d10e      	bne.n	80056fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e8:	2b80      	cmp	r3, #128	; 0x80
 80056ea:	d107      	bne.n	80056fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fd82 	bl	8006200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d10e      	bne.n	8005728 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005714:	2b40      	cmp	r3, #64	; 0x40
 8005716:	d107      	bne.n	8005728 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f9cb 	bl	8005abe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b20      	cmp	r3, #32
 8005734:	d10e      	bne.n	8005754 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b20      	cmp	r3, #32
 8005742:	d107      	bne.n	8005754 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0220 	mvn.w	r2, #32
 800574c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fd4c 	bl	80061ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005754:	bf00      	nop
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005776:	2302      	movs	r3, #2
 8005778:	e0ae      	b.n	80058d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b0c      	cmp	r3, #12
 8005786:	f200 809f 	bhi.w	80058c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800578a:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800578c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005790:	080057c5 	.word	0x080057c5
 8005794:	080058c9 	.word	0x080058c9
 8005798:	080058c9 	.word	0x080058c9
 800579c:	080058c9 	.word	0x080058c9
 80057a0:	08005805 	.word	0x08005805
 80057a4:	080058c9 	.word	0x080058c9
 80057a8:	080058c9 	.word	0x080058c9
 80057ac:	080058c9 	.word	0x080058c9
 80057b0:	08005847 	.word	0x08005847
 80057b4:	080058c9 	.word	0x080058c9
 80057b8:	080058c9 	.word	0x080058c9
 80057bc:	080058c9 	.word	0x080058c9
 80057c0:	08005887 	.word	0x08005887
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fa02 	bl	8005bd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699a      	ldr	r2, [r3, #24]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0208 	orr.w	r2, r2, #8
 80057de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0204 	bic.w	r2, r2, #4
 80057ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6999      	ldr	r1, [r3, #24]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	619a      	str	r2, [r3, #24]
      break;
 8005802:	e064      	b.n	80058ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fa48 	bl	8005ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800581e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800582e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6999      	ldr	r1, [r3, #24]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	021a      	lsls	r2, r3, #8
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	619a      	str	r2, [r3, #24]
      break;
 8005844:	e043      	b.n	80058ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	4618      	mov	r0, r3
 800584e:	f000 fa93 	bl	8005d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69da      	ldr	r2, [r3, #28]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f042 0208 	orr.w	r2, r2, #8
 8005860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69da      	ldr	r2, [r3, #28]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0204 	bic.w	r2, r2, #4
 8005870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69d9      	ldr	r1, [r3, #28]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	61da      	str	r2, [r3, #28]
      break;
 8005884:	e023      	b.n	80058ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68b9      	ldr	r1, [r7, #8]
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fadd 	bl	8005e4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69d9      	ldr	r1, [r3, #28]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	021a      	lsls	r2, r3, #8
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	61da      	str	r2, [r3, #28]
      break;
 80058c6:	e002      	b.n	80058ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	75fb      	strb	r3, [r7, #23]
      break;
 80058cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3718      	adds	r7, #24
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_TIM_ConfigClockSource+0x1c>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e0b4      	b.n	8005a66 <HAL_TIM_ConfigClockSource+0x186>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800591a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005934:	d03e      	beq.n	80059b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800593a:	f200 8087 	bhi.w	8005a4c <HAL_TIM_ConfigClockSource+0x16c>
 800593e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005942:	f000 8086 	beq.w	8005a52 <HAL_TIM_ConfigClockSource+0x172>
 8005946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800594a:	d87f      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x16c>
 800594c:	2b70      	cmp	r3, #112	; 0x70
 800594e:	d01a      	beq.n	8005986 <HAL_TIM_ConfigClockSource+0xa6>
 8005950:	2b70      	cmp	r3, #112	; 0x70
 8005952:	d87b      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x16c>
 8005954:	2b60      	cmp	r3, #96	; 0x60
 8005956:	d050      	beq.n	80059fa <HAL_TIM_ConfigClockSource+0x11a>
 8005958:	2b60      	cmp	r3, #96	; 0x60
 800595a:	d877      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x16c>
 800595c:	2b50      	cmp	r3, #80	; 0x50
 800595e:	d03c      	beq.n	80059da <HAL_TIM_ConfigClockSource+0xfa>
 8005960:	2b50      	cmp	r3, #80	; 0x50
 8005962:	d873      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x16c>
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	d058      	beq.n	8005a1a <HAL_TIM_ConfigClockSource+0x13a>
 8005968:	2b40      	cmp	r3, #64	; 0x40
 800596a:	d86f      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x16c>
 800596c:	2b30      	cmp	r3, #48	; 0x30
 800596e:	d064      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x15a>
 8005970:	2b30      	cmp	r3, #48	; 0x30
 8005972:	d86b      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x16c>
 8005974:	2b20      	cmp	r3, #32
 8005976:	d060      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x15a>
 8005978:	2b20      	cmp	r3, #32
 800597a:	d867      	bhi.n	8005a4c <HAL_TIM_ConfigClockSource+0x16c>
 800597c:	2b00      	cmp	r3, #0
 800597e:	d05c      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x15a>
 8005980:	2b10      	cmp	r3, #16
 8005982:	d05a      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x15a>
 8005984:	e062      	b.n	8005a4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	6899      	ldr	r1, [r3, #8]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f000 fb23 	bl	8005fe0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	609a      	str	r2, [r3, #8]
      break;
 80059b2:	e04f      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6899      	ldr	r1, [r3, #8]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f000 fb0c 	bl	8005fe0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059d6:	609a      	str	r2, [r3, #8]
      break;
 80059d8:	e03c      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6859      	ldr	r1, [r3, #4]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	461a      	mov	r2, r3
 80059e8:	f000 fa80 	bl	8005eec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2150      	movs	r1, #80	; 0x50
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fad9 	bl	8005faa <TIM_ITRx_SetConfig>
      break;
 80059f8:	e02c      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6818      	ldr	r0, [r3, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	6859      	ldr	r1, [r3, #4]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	461a      	mov	r2, r3
 8005a08:	f000 fa9f 	bl	8005f4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2160      	movs	r1, #96	; 0x60
 8005a12:	4618      	mov	r0, r3
 8005a14:	f000 fac9 	bl	8005faa <TIM_ITRx_SetConfig>
      break;
 8005a18:	e01c      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6859      	ldr	r1, [r3, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f000 fa60 	bl	8005eec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2140      	movs	r1, #64	; 0x40
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fab9 	bl	8005faa <TIM_ITRx_SetConfig>
      break;
 8005a38:	e00c      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4619      	mov	r1, r3
 8005a44:	4610      	mov	r0, r2
 8005a46:	f000 fab0 	bl	8005faa <TIM_ITRx_SetConfig>
      break;
 8005a4a:	e003      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a50:	e000      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a34      	ldr	r2, [pc, #208]	; (8005bb8 <TIM_Base_SetConfig+0xe4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00f      	beq.n	8005b0c <TIM_Base_SetConfig+0x38>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af2:	d00b      	beq.n	8005b0c <TIM_Base_SetConfig+0x38>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a31      	ldr	r2, [pc, #196]	; (8005bbc <TIM_Base_SetConfig+0xe8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d007      	beq.n	8005b0c <TIM_Base_SetConfig+0x38>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a30      	ldr	r2, [pc, #192]	; (8005bc0 <TIM_Base_SetConfig+0xec>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_Base_SetConfig+0x38>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a2f      	ldr	r2, [pc, #188]	; (8005bc4 <TIM_Base_SetConfig+0xf0>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d108      	bne.n	8005b1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a25      	ldr	r2, [pc, #148]	; (8005bb8 <TIM_Base_SetConfig+0xe4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d01b      	beq.n	8005b5e <TIM_Base_SetConfig+0x8a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2c:	d017      	beq.n	8005b5e <TIM_Base_SetConfig+0x8a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a22      	ldr	r2, [pc, #136]	; (8005bbc <TIM_Base_SetConfig+0xe8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d013      	beq.n	8005b5e <TIM_Base_SetConfig+0x8a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a21      	ldr	r2, [pc, #132]	; (8005bc0 <TIM_Base_SetConfig+0xec>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d00f      	beq.n	8005b5e <TIM_Base_SetConfig+0x8a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a20      	ldr	r2, [pc, #128]	; (8005bc4 <TIM_Base_SetConfig+0xf0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00b      	beq.n	8005b5e <TIM_Base_SetConfig+0x8a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a1f      	ldr	r2, [pc, #124]	; (8005bc8 <TIM_Base_SetConfig+0xf4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d007      	beq.n	8005b5e <TIM_Base_SetConfig+0x8a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a1e      	ldr	r2, [pc, #120]	; (8005bcc <TIM_Base_SetConfig+0xf8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d003      	beq.n	8005b5e <TIM_Base_SetConfig+0x8a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1d      	ldr	r2, [pc, #116]	; (8005bd0 <TIM_Base_SetConfig+0xfc>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d108      	bne.n	8005b70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a08      	ldr	r2, [pc, #32]	; (8005bb8 <TIM_Base_SetConfig+0xe4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d103      	bne.n	8005ba4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	615a      	str	r2, [r3, #20]
}
 8005baa:	bf00      	nop
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40010000 	.word	0x40010000
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40000800 	.word	0x40000800
 8005bc4:	40000c00 	.word	0x40000c00
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40014400 	.word	0x40014400
 8005bd0:	40014800 	.word	0x40014800

08005bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f023 0201 	bic.w	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0303 	bic.w	r3, r3, #3
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f023 0302 	bic.w	r3, r3, #2
 8005c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a1c      	ldr	r2, [pc, #112]	; (8005c9c <TIM_OC1_SetConfig+0xc8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d10c      	bne.n	8005c4a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	f023 0308 	bic.w	r3, r3, #8
 8005c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f023 0304 	bic.w	r3, r3, #4
 8005c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a13      	ldr	r2, [pc, #76]	; (8005c9c <TIM_OC1_SetConfig+0xc8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d111      	bne.n	8005c76 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	621a      	str	r2, [r3, #32]
}
 8005c90:	bf00      	nop
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	40010000 	.word	0x40010000

08005ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f023 0210 	bic.w	r2, r3, #16
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f023 0320 	bic.w	r3, r3, #32
 8005cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a1e      	ldr	r2, [pc, #120]	; (8005d74 <TIM_OC2_SetConfig+0xd4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10d      	bne.n	8005d1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a15      	ldr	r2, [pc, #84]	; (8005d74 <TIM_OC2_SetConfig+0xd4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d113      	bne.n	8005d4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000

08005d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0303 	bic.w	r3, r3, #3
 8005dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	021b      	lsls	r3, r3, #8
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1d      	ldr	r2, [pc, #116]	; (8005e48 <TIM_OC3_SetConfig+0xd0>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d10d      	bne.n	8005df2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a14      	ldr	r2, [pc, #80]	; (8005e48 <TIM_OC3_SetConfig+0xd0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d113      	bne.n	8005e22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	621a      	str	r2, [r3, #32]
}
 8005e3c:	bf00      	nop
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	40010000 	.word	0x40010000

08005e4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	021b      	lsls	r3, r3, #8
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	031b      	lsls	r3, r3, #12
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a10      	ldr	r2, [pc, #64]	; (8005ee8 <TIM_OC4_SetConfig+0x9c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d109      	bne.n	8005ec0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	019b      	lsls	r3, r3, #6
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	621a      	str	r2, [r3, #32]
}
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	40010000 	.word	0x40010000

08005eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f023 0201 	bic.w	r2, r3, #1
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f023 030a 	bic.w	r3, r3, #10
 8005f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b087      	sub	sp, #28
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	f023 0210 	bic.w	r2, r3, #16
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	031b      	lsls	r3, r3, #12
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fc2:	683a      	ldr	r2, [r7, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f043 0307 	orr.w	r3, r3, #7
 8005fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	609a      	str	r2, [r3, #8]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
 8005fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	021a      	lsls	r2, r3, #8
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	431a      	orrs	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4313      	orrs	r3, r2
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	609a      	str	r2, [r3, #8]
}
 8006014:	bf00      	nop
 8006016:	371c      	adds	r7, #28
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 031f 	and.w	r3, r3, #31
 8006032:	2201      	movs	r2, #1
 8006034:	fa02 f303 	lsl.w	r3, r2, r3
 8006038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a1a      	ldr	r2, [r3, #32]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	43db      	mvns	r3, r3
 8006042:	401a      	ands	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	6879      	ldr	r1, [r7, #4]
 8006054:	fa01 f303 	lsl.w	r3, r1, r3
 8006058:	431a      	orrs	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
	...

0800606c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800607c:	2b01      	cmp	r3, #1
 800607e:	d101      	bne.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006080:	2302      	movs	r3, #2
 8006082:	e050      	b.n	8006126 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a1c      	ldr	r2, [pc, #112]	; (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d018      	beq.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d0:	d013      	beq.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a18      	ldr	r2, [pc, #96]	; (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00e      	beq.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a16      	ldr	r2, [pc, #88]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d009      	beq.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a15      	ldr	r2, [pc, #84]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d004      	beq.n	80060fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a13      	ldr	r2, [pc, #76]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d10c      	bne.n	8006114 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	4313      	orrs	r3, r2
 800610a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	40010000 	.word	0x40010000
 8006138:	40000400 	.word	0x40000400
 800613c:	40000800 	.word	0x40000800
 8006140:	40000c00 	.word	0x40000c00
 8006144:	40014000 	.word	0x40014000

08006148 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800615c:	2b01      	cmp	r3, #1
 800615e:	d101      	bne.n	8006164 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006160:	2302      	movs	r3, #2
 8006162:	e03d      	b.n	80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	4313      	orrs	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e03f      	b.n	80062a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622c:	b2db      	uxtb	r3, r3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d106      	bne.n	8006240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f7fd fe1a 	bl	8003e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2224      	movs	r2, #36	; 0x24
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f929 	bl	80064b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	691a      	ldr	r2, [r3, #16]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800626c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	695a      	ldr	r2, [r3, #20]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800627c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800628c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2220      	movs	r2, #32
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b08a      	sub	sp, #40	; 0x28
 80062b2:	af02      	add	r7, sp, #8
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	603b      	str	r3, [r7, #0]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	d17c      	bne.n	80063c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <HAL_UART_Transmit+0x2c>
 80062d4:	88fb      	ldrh	r3, [r7, #6]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e075      	b.n	80063ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d101      	bne.n	80062ec <HAL_UART_Transmit+0x3e>
 80062e8:	2302      	movs	r3, #2
 80062ea:	e06e      	b.n	80063ca <HAL_UART_Transmit+0x11c>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2221      	movs	r2, #33	; 0x21
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006302:	f7fd ff1f 	bl	8004144 <HAL_GetTick>
 8006306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	88fa      	ldrh	r2, [r7, #6]
 800630c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	88fa      	ldrh	r2, [r7, #6]
 8006312:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631c:	d108      	bne.n	8006330 <HAL_UART_Transmit+0x82>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	e003      	b.n	8006338 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006334:	2300      	movs	r3, #0
 8006336:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006340:	e02a      	b.n	8006398 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2200      	movs	r2, #0
 800634a:	2180      	movs	r1, #128	; 0x80
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f840 	bl	80063d2 <UART_WaitOnFlagUntilTimeout>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e036      	b.n	80063ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006370:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	3302      	adds	r3, #2
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	e007      	b.n	800638a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	781a      	ldrb	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	3301      	adds	r3, #1
 8006388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b01      	subs	r3, #1
 8006392:	b29a      	uxth	r2, r3
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1cf      	bne.n	8006342 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2200      	movs	r2, #0
 80063aa:	2140      	movs	r1, #64	; 0x40
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f810 	bl	80063d2 <UART_WaitOnFlagUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e006      	b.n	80063ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e000      	b.n	80063ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063c8:	2302      	movs	r3, #2
  }
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3720      	adds	r7, #32
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b090      	sub	sp, #64	; 0x40
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	603b      	str	r3, [r7, #0]
 80063de:	4613      	mov	r3, r2
 80063e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e2:	e050      	b.n	8006486 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ea:	d04c      	beq.n	8006486 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d007      	beq.n	8006402 <UART_WaitOnFlagUntilTimeout+0x30>
 80063f2:	f7fd fea7 	bl	8004144 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063fe:	429a      	cmp	r2, r3
 8006400:	d241      	bcs.n	8006486 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	e853 3f00 	ldrex	r3, [r3]
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	330c      	adds	r3, #12
 8006420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006422:	637a      	str	r2, [r7, #52]	; 0x34
 8006424:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006426:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800642a:	e841 2300 	strex	r3, r2, [r1]
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1e5      	bne.n	8006402 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3314      	adds	r3, #20
 800643c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	e853 3f00 	ldrex	r3, [r3]
 8006444:	613b      	str	r3, [r7, #16]
   return(result);
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f023 0301 	bic.w	r3, r3, #1
 800644c:	63bb      	str	r3, [r7, #56]	; 0x38
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	3314      	adds	r3, #20
 8006454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006456:	623a      	str	r2, [r7, #32]
 8006458:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	69f9      	ldr	r1, [r7, #28]
 800645c:	6a3a      	ldr	r2, [r7, #32]
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	61bb      	str	r3, [r7, #24]
   return(result);
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e5      	bne.n	8006436 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2220      	movs	r2, #32
 800646e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2220      	movs	r2, #32
 8006476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e00f      	b.n	80064a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4013      	ands	r3, r2
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	429a      	cmp	r2, r3
 8006494:	bf0c      	ite	eq
 8006496:	2301      	moveq	r3, #1
 8006498:	2300      	movne	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	461a      	mov	r2, r3
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d09f      	beq.n	80063e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3740      	adds	r7, #64	; 0x40
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064b4:	b0c0      	sub	sp, #256	; 0x100
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064cc:	68d9      	ldr	r1, [r3, #12]
 80064ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	ea40 0301 	orr.w	r3, r0, r1
 80064d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006508:	f021 010c 	bic.w	r1, r1, #12
 800650c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006516:	430b      	orrs	r3, r1
 8006518:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800651a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652a:	6999      	ldr	r1, [r3, #24]
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	ea40 0301 	orr.w	r3, r0, r1
 8006536:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b8f      	ldr	r3, [pc, #572]	; (800677c <UART_SetConfig+0x2cc>)
 8006540:	429a      	cmp	r2, r3
 8006542:	d005      	beq.n	8006550 <UART_SetConfig+0xa0>
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	4b8d      	ldr	r3, [pc, #564]	; (8006780 <UART_SetConfig+0x2d0>)
 800654c:	429a      	cmp	r2, r3
 800654e:	d104      	bne.n	800655a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006550:	f7fe fd5c 	bl	800500c <HAL_RCC_GetPCLK2Freq>
 8006554:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006558:	e003      	b.n	8006562 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800655a:	f7fe fd43 	bl	8004fe4 <HAL_RCC_GetPCLK1Freq>
 800655e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800656c:	f040 810c 	bne.w	8006788 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006574:	2200      	movs	r2, #0
 8006576:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800657a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800657e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006582:	4622      	mov	r2, r4
 8006584:	462b      	mov	r3, r5
 8006586:	1891      	adds	r1, r2, r2
 8006588:	65b9      	str	r1, [r7, #88]	; 0x58
 800658a:	415b      	adcs	r3, r3
 800658c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800658e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006592:	4621      	mov	r1, r4
 8006594:	eb12 0801 	adds.w	r8, r2, r1
 8006598:	4629      	mov	r1, r5
 800659a:	eb43 0901 	adc.w	r9, r3, r1
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065b2:	4690      	mov	r8, r2
 80065b4:	4699      	mov	r9, r3
 80065b6:	4623      	mov	r3, r4
 80065b8:	eb18 0303 	adds.w	r3, r8, r3
 80065bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80065c0:	462b      	mov	r3, r5
 80065c2:	eb49 0303 	adc.w	r3, r9, r3
 80065c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80065ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80065da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80065de:	460b      	mov	r3, r1
 80065e0:	18db      	adds	r3, r3, r3
 80065e2:	653b      	str	r3, [r7, #80]	; 0x50
 80065e4:	4613      	mov	r3, r2
 80065e6:	eb42 0303 	adc.w	r3, r2, r3
 80065ea:	657b      	str	r3, [r7, #84]	; 0x54
 80065ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80065f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80065f4:	f7fa fad4 	bl	8000ba0 <__aeabi_uldivmod>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4b61      	ldr	r3, [pc, #388]	; (8006784 <UART_SetConfig+0x2d4>)
 80065fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	011c      	lsls	r4, r3, #4
 8006606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800660a:	2200      	movs	r2, #0
 800660c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006610:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006614:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006618:	4642      	mov	r2, r8
 800661a:	464b      	mov	r3, r9
 800661c:	1891      	adds	r1, r2, r2
 800661e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006620:	415b      	adcs	r3, r3
 8006622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006624:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006628:	4641      	mov	r1, r8
 800662a:	eb12 0a01 	adds.w	sl, r2, r1
 800662e:	4649      	mov	r1, r9
 8006630:	eb43 0b01 	adc.w	fp, r3, r1
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006640:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006644:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006648:	4692      	mov	sl, r2
 800664a:	469b      	mov	fp, r3
 800664c:	4643      	mov	r3, r8
 800664e:	eb1a 0303 	adds.w	r3, sl, r3
 8006652:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006656:	464b      	mov	r3, r9
 8006658:	eb4b 0303 	adc.w	r3, fp, r3
 800665c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800666c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006670:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006674:	460b      	mov	r3, r1
 8006676:	18db      	adds	r3, r3, r3
 8006678:	643b      	str	r3, [r7, #64]	; 0x40
 800667a:	4613      	mov	r3, r2
 800667c:	eb42 0303 	adc.w	r3, r2, r3
 8006680:	647b      	str	r3, [r7, #68]	; 0x44
 8006682:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006686:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800668a:	f7fa fa89 	bl	8000ba0 <__aeabi_uldivmod>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4611      	mov	r1, r2
 8006694:	4b3b      	ldr	r3, [pc, #236]	; (8006784 <UART_SetConfig+0x2d4>)
 8006696:	fba3 2301 	umull	r2, r3, r3, r1
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	2264      	movs	r2, #100	; 0x64
 800669e:	fb02 f303 	mul.w	r3, r2, r3
 80066a2:	1acb      	subs	r3, r1, r3
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80066aa:	4b36      	ldr	r3, [pc, #216]	; (8006784 <UART_SetConfig+0x2d4>)
 80066ac:	fba3 2302 	umull	r2, r3, r3, r2
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066b8:	441c      	add	r4, r3
 80066ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80066c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80066cc:	4642      	mov	r2, r8
 80066ce:	464b      	mov	r3, r9
 80066d0:	1891      	adds	r1, r2, r2
 80066d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80066d4:	415b      	adcs	r3, r3
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80066dc:	4641      	mov	r1, r8
 80066de:	1851      	adds	r1, r2, r1
 80066e0:	6339      	str	r1, [r7, #48]	; 0x30
 80066e2:	4649      	mov	r1, r9
 80066e4:	414b      	adcs	r3, r1
 80066e6:	637b      	str	r3, [r7, #52]	; 0x34
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80066f4:	4659      	mov	r1, fp
 80066f6:	00cb      	lsls	r3, r1, #3
 80066f8:	4651      	mov	r1, sl
 80066fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066fe:	4651      	mov	r1, sl
 8006700:	00ca      	lsls	r2, r1, #3
 8006702:	4610      	mov	r0, r2
 8006704:	4619      	mov	r1, r3
 8006706:	4603      	mov	r3, r0
 8006708:	4642      	mov	r2, r8
 800670a:	189b      	adds	r3, r3, r2
 800670c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006710:	464b      	mov	r3, r9
 8006712:	460a      	mov	r2, r1
 8006714:	eb42 0303 	adc.w	r3, r2, r3
 8006718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800671c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006728:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800672c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006730:	460b      	mov	r3, r1
 8006732:	18db      	adds	r3, r3, r3
 8006734:	62bb      	str	r3, [r7, #40]	; 0x28
 8006736:	4613      	mov	r3, r2
 8006738:	eb42 0303 	adc.w	r3, r2, r3
 800673c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800673e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006742:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006746:	f7fa fa2b 	bl	8000ba0 <__aeabi_uldivmod>
 800674a:	4602      	mov	r2, r0
 800674c:	460b      	mov	r3, r1
 800674e:	4b0d      	ldr	r3, [pc, #52]	; (8006784 <UART_SetConfig+0x2d4>)
 8006750:	fba3 1302 	umull	r1, r3, r3, r2
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	2164      	movs	r1, #100	; 0x64
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	3332      	adds	r3, #50	; 0x32
 8006762:	4a08      	ldr	r2, [pc, #32]	; (8006784 <UART_SetConfig+0x2d4>)
 8006764:	fba2 2303 	umull	r2, r3, r2, r3
 8006768:	095b      	lsrs	r3, r3, #5
 800676a:	f003 0207 	and.w	r2, r3, #7
 800676e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4422      	add	r2, r4
 8006776:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006778:	e105      	b.n	8006986 <UART_SetConfig+0x4d6>
 800677a:	bf00      	nop
 800677c:	40011000 	.word	0x40011000
 8006780:	40011400 	.word	0x40011400
 8006784:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800678c:	2200      	movs	r2, #0
 800678e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006792:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006796:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800679a:	4642      	mov	r2, r8
 800679c:	464b      	mov	r3, r9
 800679e:	1891      	adds	r1, r2, r2
 80067a0:	6239      	str	r1, [r7, #32]
 80067a2:	415b      	adcs	r3, r3
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
 80067a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067aa:	4641      	mov	r1, r8
 80067ac:	1854      	adds	r4, r2, r1
 80067ae:	4649      	mov	r1, r9
 80067b0:	eb43 0501 	adc.w	r5, r3, r1
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	00eb      	lsls	r3, r5, #3
 80067be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067c2:	00e2      	lsls	r2, r4, #3
 80067c4:	4614      	mov	r4, r2
 80067c6:	461d      	mov	r5, r3
 80067c8:	4643      	mov	r3, r8
 80067ca:	18e3      	adds	r3, r4, r3
 80067cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067d0:	464b      	mov	r3, r9
 80067d2:	eb45 0303 	adc.w	r3, r5, r3
 80067d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80067da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80067e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	f04f 0300 	mov.w	r3, #0
 80067f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80067f6:	4629      	mov	r1, r5
 80067f8:	008b      	lsls	r3, r1, #2
 80067fa:	4621      	mov	r1, r4
 80067fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006800:	4621      	mov	r1, r4
 8006802:	008a      	lsls	r2, r1, #2
 8006804:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006808:	f7fa f9ca 	bl	8000ba0 <__aeabi_uldivmod>
 800680c:	4602      	mov	r2, r0
 800680e:	460b      	mov	r3, r1
 8006810:	4b60      	ldr	r3, [pc, #384]	; (8006994 <UART_SetConfig+0x4e4>)
 8006812:	fba3 2302 	umull	r2, r3, r3, r2
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	011c      	lsls	r4, r3, #4
 800681a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800681e:	2200      	movs	r2, #0
 8006820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006824:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006828:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800682c:	4642      	mov	r2, r8
 800682e:	464b      	mov	r3, r9
 8006830:	1891      	adds	r1, r2, r2
 8006832:	61b9      	str	r1, [r7, #24]
 8006834:	415b      	adcs	r3, r3
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800683c:	4641      	mov	r1, r8
 800683e:	1851      	adds	r1, r2, r1
 8006840:	6139      	str	r1, [r7, #16]
 8006842:	4649      	mov	r1, r9
 8006844:	414b      	adcs	r3, r1
 8006846:	617b      	str	r3, [r7, #20]
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006854:	4659      	mov	r1, fp
 8006856:	00cb      	lsls	r3, r1, #3
 8006858:	4651      	mov	r1, sl
 800685a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800685e:	4651      	mov	r1, sl
 8006860:	00ca      	lsls	r2, r1, #3
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	4603      	mov	r3, r0
 8006868:	4642      	mov	r2, r8
 800686a:	189b      	adds	r3, r3, r2
 800686c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006870:	464b      	mov	r3, r9
 8006872:	460a      	mov	r2, r1
 8006874:	eb42 0303 	adc.w	r3, r2, r3
 8006878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800687c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	67bb      	str	r3, [r7, #120]	; 0x78
 8006886:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006888:	f04f 0200 	mov.w	r2, #0
 800688c:	f04f 0300 	mov.w	r3, #0
 8006890:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006894:	4649      	mov	r1, r9
 8006896:	008b      	lsls	r3, r1, #2
 8006898:	4641      	mov	r1, r8
 800689a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800689e:	4641      	mov	r1, r8
 80068a0:	008a      	lsls	r2, r1, #2
 80068a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80068a6:	f7fa f97b 	bl	8000ba0 <__aeabi_uldivmod>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4b39      	ldr	r3, [pc, #228]	; (8006994 <UART_SetConfig+0x4e4>)
 80068b0:	fba3 1302 	umull	r1, r3, r3, r2
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	2164      	movs	r1, #100	; 0x64
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	3332      	adds	r3, #50	; 0x32
 80068c2:	4a34      	ldr	r2, [pc, #208]	; (8006994 <UART_SetConfig+0x4e4>)
 80068c4:	fba2 2303 	umull	r2, r3, r2, r3
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068ce:	441c      	add	r4, r3
 80068d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d4:	2200      	movs	r2, #0
 80068d6:	673b      	str	r3, [r7, #112]	; 0x70
 80068d8:	677a      	str	r2, [r7, #116]	; 0x74
 80068da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80068de:	4642      	mov	r2, r8
 80068e0:	464b      	mov	r3, r9
 80068e2:	1891      	adds	r1, r2, r2
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	415b      	adcs	r3, r3
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068ee:	4641      	mov	r1, r8
 80068f0:	1851      	adds	r1, r2, r1
 80068f2:	6039      	str	r1, [r7, #0]
 80068f4:	4649      	mov	r1, r9
 80068f6:	414b      	adcs	r3, r1
 80068f8:	607b      	str	r3, [r7, #4]
 80068fa:	f04f 0200 	mov.w	r2, #0
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006906:	4659      	mov	r1, fp
 8006908:	00cb      	lsls	r3, r1, #3
 800690a:	4651      	mov	r1, sl
 800690c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006910:	4651      	mov	r1, sl
 8006912:	00ca      	lsls	r2, r1, #3
 8006914:	4610      	mov	r0, r2
 8006916:	4619      	mov	r1, r3
 8006918:	4603      	mov	r3, r0
 800691a:	4642      	mov	r2, r8
 800691c:	189b      	adds	r3, r3, r2
 800691e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006920:	464b      	mov	r3, r9
 8006922:	460a      	mov	r2, r1
 8006924:	eb42 0303 	adc.w	r3, r2, r3
 8006928:	66fb      	str	r3, [r7, #108]	; 0x6c
 800692a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	663b      	str	r3, [r7, #96]	; 0x60
 8006934:	667a      	str	r2, [r7, #100]	; 0x64
 8006936:	f04f 0200 	mov.w	r2, #0
 800693a:	f04f 0300 	mov.w	r3, #0
 800693e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006942:	4649      	mov	r1, r9
 8006944:	008b      	lsls	r3, r1, #2
 8006946:	4641      	mov	r1, r8
 8006948:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800694c:	4641      	mov	r1, r8
 800694e:	008a      	lsls	r2, r1, #2
 8006950:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006954:	f7fa f924 	bl	8000ba0 <__aeabi_uldivmod>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	4b0d      	ldr	r3, [pc, #52]	; (8006994 <UART_SetConfig+0x4e4>)
 800695e:	fba3 1302 	umull	r1, r3, r3, r2
 8006962:	095b      	lsrs	r3, r3, #5
 8006964:	2164      	movs	r1, #100	; 0x64
 8006966:	fb01 f303 	mul.w	r3, r1, r3
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	011b      	lsls	r3, r3, #4
 800696e:	3332      	adds	r3, #50	; 0x32
 8006970:	4a08      	ldr	r2, [pc, #32]	; (8006994 <UART_SetConfig+0x4e4>)
 8006972:	fba2 2303 	umull	r2, r3, r2, r3
 8006976:	095b      	lsrs	r3, r3, #5
 8006978:	f003 020f 	and.w	r2, r3, #15
 800697c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4422      	add	r2, r4
 8006984:	609a      	str	r2, [r3, #8]
}
 8006986:	bf00      	nop
 8006988:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800698c:	46bd      	mov	sp, r7
 800698e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006992:	bf00      	nop
 8006994:	51eb851f 	.word	0x51eb851f

08006998 <__errno>:
 8006998:	4b01      	ldr	r3, [pc, #4]	; (80069a0 <__errno+0x8>)
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	2000001c 	.word	0x2000001c

080069a4 <__libc_init_array>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	4d0d      	ldr	r5, [pc, #52]	; (80069dc <__libc_init_array+0x38>)
 80069a8:	4c0d      	ldr	r4, [pc, #52]	; (80069e0 <__libc_init_array+0x3c>)
 80069aa:	1b64      	subs	r4, r4, r5
 80069ac:	10a4      	asrs	r4, r4, #2
 80069ae:	2600      	movs	r6, #0
 80069b0:	42a6      	cmp	r6, r4
 80069b2:	d109      	bne.n	80069c8 <__libc_init_array+0x24>
 80069b4:	4d0b      	ldr	r5, [pc, #44]	; (80069e4 <__libc_init_array+0x40>)
 80069b6:	4c0c      	ldr	r4, [pc, #48]	; (80069e8 <__libc_init_array+0x44>)
 80069b8:	f002 f8b8 	bl	8008b2c <_init>
 80069bc:	1b64      	subs	r4, r4, r5
 80069be:	10a4      	asrs	r4, r4, #2
 80069c0:	2600      	movs	r6, #0
 80069c2:	42a6      	cmp	r6, r4
 80069c4:	d105      	bne.n	80069d2 <__libc_init_array+0x2e>
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069cc:	4798      	blx	r3
 80069ce:	3601      	adds	r6, #1
 80069d0:	e7ee      	b.n	80069b0 <__libc_init_array+0xc>
 80069d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d6:	4798      	blx	r3
 80069d8:	3601      	adds	r6, #1
 80069da:	e7f2      	b.n	80069c2 <__libc_init_array+0x1e>
 80069dc:	08009168 	.word	0x08009168
 80069e0:	08009168 	.word	0x08009168
 80069e4:	08009168 	.word	0x08009168
 80069e8:	0800916c 	.word	0x0800916c

080069ec <memset>:
 80069ec:	4402      	add	r2, r0
 80069ee:	4603      	mov	r3, r0
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d100      	bne.n	80069f6 <memset+0xa>
 80069f4:	4770      	bx	lr
 80069f6:	f803 1b01 	strb.w	r1, [r3], #1
 80069fa:	e7f9      	b.n	80069f0 <memset+0x4>
 80069fc:	0000      	movs	r0, r0
	...

08006a00 <cos>:
 8006a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a02:	ec53 2b10 	vmov	r2, r3, d0
 8006a06:	4826      	ldr	r0, [pc, #152]	; (8006aa0 <cos+0xa0>)
 8006a08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006a0c:	4281      	cmp	r1, r0
 8006a0e:	dc06      	bgt.n	8006a1e <cos+0x1e>
 8006a10:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006a98 <cos+0x98>
 8006a14:	b005      	add	sp, #20
 8006a16:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a1a:	f000 bdf1 	b.w	8007600 <__kernel_cos>
 8006a1e:	4821      	ldr	r0, [pc, #132]	; (8006aa4 <cos+0xa4>)
 8006a20:	4281      	cmp	r1, r0
 8006a22:	dd09      	ble.n	8006a38 <cos+0x38>
 8006a24:	ee10 0a10 	vmov	r0, s0
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f7f9 fbd9 	bl	80001e0 <__aeabi_dsub>
 8006a2e:	ec41 0b10 	vmov	d0, r0, r1
 8006a32:	b005      	add	sp, #20
 8006a34:	f85d fb04 	ldr.w	pc, [sp], #4
 8006a38:	4668      	mov	r0, sp
 8006a3a:	f000 f945 	bl	8006cc8 <__ieee754_rem_pio2>
 8006a3e:	f000 0003 	and.w	r0, r0, #3
 8006a42:	2801      	cmp	r0, #1
 8006a44:	d00b      	beq.n	8006a5e <cos+0x5e>
 8006a46:	2802      	cmp	r0, #2
 8006a48:	d016      	beq.n	8006a78 <cos+0x78>
 8006a4a:	b9e0      	cbnz	r0, 8006a86 <cos+0x86>
 8006a4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a50:	ed9d 0b00 	vldr	d0, [sp]
 8006a54:	f000 fdd4 	bl	8007600 <__kernel_cos>
 8006a58:	ec51 0b10 	vmov	r0, r1, d0
 8006a5c:	e7e7      	b.n	8006a2e <cos+0x2e>
 8006a5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a62:	ed9d 0b00 	vldr	d0, [sp]
 8006a66:	f001 f9e3 	bl	8007e30 <__kernel_sin>
 8006a6a:	ec53 2b10 	vmov	r2, r3, d0
 8006a6e:	ee10 0a10 	vmov	r0, s0
 8006a72:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006a76:	e7da      	b.n	8006a2e <cos+0x2e>
 8006a78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a7c:	ed9d 0b00 	vldr	d0, [sp]
 8006a80:	f000 fdbe 	bl	8007600 <__kernel_cos>
 8006a84:	e7f1      	b.n	8006a6a <cos+0x6a>
 8006a86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006a8a:	ed9d 0b00 	vldr	d0, [sp]
 8006a8e:	2001      	movs	r0, #1
 8006a90:	f001 f9ce 	bl	8007e30 <__kernel_sin>
 8006a94:	e7e0      	b.n	8006a58 <cos+0x58>
 8006a96:	bf00      	nop
	...
 8006aa0:	3fe921fb 	.word	0x3fe921fb
 8006aa4:	7fefffff 	.word	0x7fefffff

08006aa8 <sin>:
 8006aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006aaa:	ec53 2b10 	vmov	r2, r3, d0
 8006aae:	4828      	ldr	r0, [pc, #160]	; (8006b50 <sin+0xa8>)
 8006ab0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006ab4:	4281      	cmp	r1, r0
 8006ab6:	dc07      	bgt.n	8006ac8 <sin+0x20>
 8006ab8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006b48 <sin+0xa0>
 8006abc:	2000      	movs	r0, #0
 8006abe:	b005      	add	sp, #20
 8006ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ac4:	f001 b9b4 	b.w	8007e30 <__kernel_sin>
 8006ac8:	4822      	ldr	r0, [pc, #136]	; (8006b54 <sin+0xac>)
 8006aca:	4281      	cmp	r1, r0
 8006acc:	dd09      	ble.n	8006ae2 <sin+0x3a>
 8006ace:	ee10 0a10 	vmov	r0, s0
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	f7f9 fb84 	bl	80001e0 <__aeabi_dsub>
 8006ad8:	ec41 0b10 	vmov	d0, r0, r1
 8006adc:	b005      	add	sp, #20
 8006ade:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ae2:	4668      	mov	r0, sp
 8006ae4:	f000 f8f0 	bl	8006cc8 <__ieee754_rem_pio2>
 8006ae8:	f000 0003 	and.w	r0, r0, #3
 8006aec:	2801      	cmp	r0, #1
 8006aee:	d00c      	beq.n	8006b0a <sin+0x62>
 8006af0:	2802      	cmp	r0, #2
 8006af2:	d011      	beq.n	8006b18 <sin+0x70>
 8006af4:	b9f0      	cbnz	r0, 8006b34 <sin+0x8c>
 8006af6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006afa:	ed9d 0b00 	vldr	d0, [sp]
 8006afe:	2001      	movs	r0, #1
 8006b00:	f001 f996 	bl	8007e30 <__kernel_sin>
 8006b04:	ec51 0b10 	vmov	r0, r1, d0
 8006b08:	e7e6      	b.n	8006ad8 <sin+0x30>
 8006b0a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b0e:	ed9d 0b00 	vldr	d0, [sp]
 8006b12:	f000 fd75 	bl	8007600 <__kernel_cos>
 8006b16:	e7f5      	b.n	8006b04 <sin+0x5c>
 8006b18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b1c:	ed9d 0b00 	vldr	d0, [sp]
 8006b20:	2001      	movs	r0, #1
 8006b22:	f001 f985 	bl	8007e30 <__kernel_sin>
 8006b26:	ec53 2b10 	vmov	r2, r3, d0
 8006b2a:	ee10 0a10 	vmov	r0, s0
 8006b2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006b32:	e7d1      	b.n	8006ad8 <sin+0x30>
 8006b34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b38:	ed9d 0b00 	vldr	d0, [sp]
 8006b3c:	f000 fd60 	bl	8007600 <__kernel_cos>
 8006b40:	e7f1      	b.n	8006b26 <sin+0x7e>
 8006b42:	bf00      	nop
 8006b44:	f3af 8000 	nop.w
	...
 8006b50:	3fe921fb 	.word	0x3fe921fb
 8006b54:	7fefffff 	.word	0x7fefffff

08006b58 <cosf>:
 8006b58:	ee10 3a10 	vmov	r3, s0
 8006b5c:	b507      	push	{r0, r1, r2, lr}
 8006b5e:	4a1e      	ldr	r2, [pc, #120]	; (8006bd8 <cosf+0x80>)
 8006b60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b64:	4293      	cmp	r3, r2
 8006b66:	dc06      	bgt.n	8006b76 <cosf+0x1e>
 8006b68:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8006bdc <cosf+0x84>
 8006b6c:	b003      	add	sp, #12
 8006b6e:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b72:	f001 ba1b 	b.w	8007fac <__kernel_cosf>
 8006b76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006b7a:	db04      	blt.n	8006b86 <cosf+0x2e>
 8006b7c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006b80:	b003      	add	sp, #12
 8006b82:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b86:	4668      	mov	r0, sp
 8006b88:	f000 fbfc 	bl	8007384 <__ieee754_rem_pio2f>
 8006b8c:	f000 0003 	and.w	r0, r0, #3
 8006b90:	2801      	cmp	r0, #1
 8006b92:	d009      	beq.n	8006ba8 <cosf+0x50>
 8006b94:	2802      	cmp	r0, #2
 8006b96:	d010      	beq.n	8006bba <cosf+0x62>
 8006b98:	b9b0      	cbnz	r0, 8006bc8 <cosf+0x70>
 8006b9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8006b9e:	ed9d 0a00 	vldr	s0, [sp]
 8006ba2:	f001 fa03 	bl	8007fac <__kernel_cosf>
 8006ba6:	e7eb      	b.n	8006b80 <cosf+0x28>
 8006ba8:	eddd 0a01 	vldr	s1, [sp, #4]
 8006bac:	ed9d 0a00 	vldr	s0, [sp]
 8006bb0:	f001 fcd2 	bl	8008558 <__kernel_sinf>
 8006bb4:	eeb1 0a40 	vneg.f32	s0, s0
 8006bb8:	e7e2      	b.n	8006b80 <cosf+0x28>
 8006bba:	eddd 0a01 	vldr	s1, [sp, #4]
 8006bbe:	ed9d 0a00 	vldr	s0, [sp]
 8006bc2:	f001 f9f3 	bl	8007fac <__kernel_cosf>
 8006bc6:	e7f5      	b.n	8006bb4 <cosf+0x5c>
 8006bc8:	eddd 0a01 	vldr	s1, [sp, #4]
 8006bcc:	ed9d 0a00 	vldr	s0, [sp]
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	f001 fcc1 	bl	8008558 <__kernel_sinf>
 8006bd6:	e7d3      	b.n	8006b80 <cosf+0x28>
 8006bd8:	3f490fd8 	.word	0x3f490fd8
 8006bdc:	00000000 	.word	0x00000000

08006be0 <sinf>:
 8006be0:	ee10 3a10 	vmov	r3, s0
 8006be4:	b507      	push	{r0, r1, r2, lr}
 8006be6:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <sinf+0x84>)
 8006be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bec:	4293      	cmp	r3, r2
 8006bee:	dc07      	bgt.n	8006c00 <sinf+0x20>
 8006bf0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006c68 <sinf+0x88>
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	b003      	add	sp, #12
 8006bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bfc:	f001 bcac 	b.w	8008558 <__kernel_sinf>
 8006c00:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006c04:	db04      	blt.n	8006c10 <sinf+0x30>
 8006c06:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006c0a:	b003      	add	sp, #12
 8006c0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c10:	4668      	mov	r0, sp
 8006c12:	f000 fbb7 	bl	8007384 <__ieee754_rem_pio2f>
 8006c16:	f000 0003 	and.w	r0, r0, #3
 8006c1a:	2801      	cmp	r0, #1
 8006c1c:	d00a      	beq.n	8006c34 <sinf+0x54>
 8006c1e:	2802      	cmp	r0, #2
 8006c20:	d00f      	beq.n	8006c42 <sinf+0x62>
 8006c22:	b9c0      	cbnz	r0, 8006c56 <sinf+0x76>
 8006c24:	eddd 0a01 	vldr	s1, [sp, #4]
 8006c28:	ed9d 0a00 	vldr	s0, [sp]
 8006c2c:	2001      	movs	r0, #1
 8006c2e:	f001 fc93 	bl	8008558 <__kernel_sinf>
 8006c32:	e7ea      	b.n	8006c0a <sinf+0x2a>
 8006c34:	eddd 0a01 	vldr	s1, [sp, #4]
 8006c38:	ed9d 0a00 	vldr	s0, [sp]
 8006c3c:	f001 f9b6 	bl	8007fac <__kernel_cosf>
 8006c40:	e7e3      	b.n	8006c0a <sinf+0x2a>
 8006c42:	eddd 0a01 	vldr	s1, [sp, #4]
 8006c46:	ed9d 0a00 	vldr	s0, [sp]
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	f001 fc84 	bl	8008558 <__kernel_sinf>
 8006c50:	eeb1 0a40 	vneg.f32	s0, s0
 8006c54:	e7d9      	b.n	8006c0a <sinf+0x2a>
 8006c56:	eddd 0a01 	vldr	s1, [sp, #4]
 8006c5a:	ed9d 0a00 	vldr	s0, [sp]
 8006c5e:	f001 f9a5 	bl	8007fac <__kernel_cosf>
 8006c62:	e7f5      	b.n	8006c50 <sinf+0x70>
 8006c64:	3f490fd8 	.word	0x3f490fd8
 8006c68:	00000000 	.word	0x00000000

08006c6c <sqrt>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	ed2d 8b02 	vpush	{d8}
 8006c72:	ec55 4b10 	vmov	r4, r5, d0
 8006c76:	f000 fa33 	bl	80070e0 <__ieee754_sqrt>
 8006c7a:	4622      	mov	r2, r4
 8006c7c:	462b      	mov	r3, r5
 8006c7e:	4620      	mov	r0, r4
 8006c80:	4629      	mov	r1, r5
 8006c82:	eeb0 8a40 	vmov.f32	s16, s0
 8006c86:	eef0 8a60 	vmov.f32	s17, s1
 8006c8a:	f7f9 fefb 	bl	8000a84 <__aeabi_dcmpun>
 8006c8e:	b990      	cbnz	r0, 8006cb6 <sqrt+0x4a>
 8006c90:	2200      	movs	r2, #0
 8006c92:	2300      	movs	r3, #0
 8006c94:	4620      	mov	r0, r4
 8006c96:	4629      	mov	r1, r5
 8006c98:	f7f9 fecc 	bl	8000a34 <__aeabi_dcmplt>
 8006c9c:	b158      	cbz	r0, 8006cb6 <sqrt+0x4a>
 8006c9e:	f7ff fe7b 	bl	8006998 <__errno>
 8006ca2:	2321      	movs	r3, #33	; 0x21
 8006ca4:	6003      	str	r3, [r0, #0]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	2300      	movs	r3, #0
 8006caa:	4610      	mov	r0, r2
 8006cac:	4619      	mov	r1, r3
 8006cae:	f7f9 fd79 	bl	80007a4 <__aeabi_ddiv>
 8006cb2:	ec41 0b18 	vmov	d8, r0, r1
 8006cb6:	eeb0 0a48 	vmov.f32	s0, s16
 8006cba:	eef0 0a68 	vmov.f32	s1, s17
 8006cbe:	ecbd 8b02 	vpop	{d8}
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}

08006cc4 <atan2f>:
 8006cc4:	f000 babe 	b.w	8007244 <__ieee754_atan2f>

08006cc8 <__ieee754_rem_pio2>:
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	ed2d 8b02 	vpush	{d8}
 8006cd0:	ec55 4b10 	vmov	r4, r5, d0
 8006cd4:	4bca      	ldr	r3, [pc, #808]	; (8007000 <__ieee754_rem_pio2+0x338>)
 8006cd6:	b08b      	sub	sp, #44	; 0x2c
 8006cd8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006cdc:	4598      	cmp	r8, r3
 8006cde:	4682      	mov	sl, r0
 8006ce0:	9502      	str	r5, [sp, #8]
 8006ce2:	dc08      	bgt.n	8006cf6 <__ieee754_rem_pio2+0x2e>
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	ed80 0b00 	vstr	d0, [r0]
 8006cec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006cf0:	f04f 0b00 	mov.w	fp, #0
 8006cf4:	e028      	b.n	8006d48 <__ieee754_rem_pio2+0x80>
 8006cf6:	4bc3      	ldr	r3, [pc, #780]	; (8007004 <__ieee754_rem_pio2+0x33c>)
 8006cf8:	4598      	cmp	r8, r3
 8006cfa:	dc78      	bgt.n	8006dee <__ieee754_rem_pio2+0x126>
 8006cfc:	9b02      	ldr	r3, [sp, #8]
 8006cfe:	4ec2      	ldr	r6, [pc, #776]	; (8007008 <__ieee754_rem_pio2+0x340>)
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	ee10 0a10 	vmov	r0, s0
 8006d06:	a3b0      	add	r3, pc, #704	; (adr r3, 8006fc8 <__ieee754_rem_pio2+0x300>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	dd39      	ble.n	8006d84 <__ieee754_rem_pio2+0xbc>
 8006d10:	f7f9 fa66 	bl	80001e0 <__aeabi_dsub>
 8006d14:	45b0      	cmp	r8, r6
 8006d16:	4604      	mov	r4, r0
 8006d18:	460d      	mov	r5, r1
 8006d1a:	d01b      	beq.n	8006d54 <__ieee754_rem_pio2+0x8c>
 8006d1c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x308>)
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f7f9 fa5d 	bl	80001e0 <__aeabi_dsub>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	e9ca 2300 	strd	r2, r3, [sl]
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	f7f9 fa55 	bl	80001e0 <__aeabi_dsub>
 8006d36:	a3a6      	add	r3, pc, #664	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x308>)
 8006d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3c:	f7f9 fa50 	bl	80001e0 <__aeabi_dsub>
 8006d40:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006d44:	f04f 0b01 	mov.w	fp, #1
 8006d48:	4658      	mov	r0, fp
 8006d4a:	b00b      	add	sp, #44	; 0x2c
 8006d4c:	ecbd 8b02 	vpop	{d8}
 8006d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d54:	a3a0      	add	r3, pc, #640	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x310>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f7f9 fa41 	bl	80001e0 <__aeabi_dsub>
 8006d5e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006fe0 <__ieee754_rem_pio2+0x318>)
 8006d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d64:	4604      	mov	r4, r0
 8006d66:	460d      	mov	r5, r1
 8006d68:	f7f9 fa3a 	bl	80001e0 <__aeabi_dsub>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	e9ca 2300 	strd	r2, r3, [sl]
 8006d74:	4620      	mov	r0, r4
 8006d76:	4629      	mov	r1, r5
 8006d78:	f7f9 fa32 	bl	80001e0 <__aeabi_dsub>
 8006d7c:	a398      	add	r3, pc, #608	; (adr r3, 8006fe0 <__ieee754_rem_pio2+0x318>)
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	e7db      	b.n	8006d3c <__ieee754_rem_pio2+0x74>
 8006d84:	f7f9 fa2e 	bl	80001e4 <__adddf3>
 8006d88:	45b0      	cmp	r8, r6
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	460d      	mov	r5, r1
 8006d8e:	d016      	beq.n	8006dbe <__ieee754_rem_pio2+0xf6>
 8006d90:	a38f      	add	r3, pc, #572	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x308>)
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f7f9 fa25 	bl	80001e4 <__adddf3>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	e9ca 2300 	strd	r2, r3, [sl]
 8006da2:	4620      	mov	r0, r4
 8006da4:	4629      	mov	r1, r5
 8006da6:	f7f9 fa1b 	bl	80001e0 <__aeabi_dsub>
 8006daa:	a389      	add	r3, pc, #548	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x308>)
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	f7f9 fa18 	bl	80001e4 <__adddf3>
 8006db4:	f04f 3bff 	mov.w	fp, #4294967295
 8006db8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006dbc:	e7c4      	b.n	8006d48 <__ieee754_rem_pio2+0x80>
 8006dbe:	a386      	add	r3, pc, #536	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x310>)
 8006dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc4:	f7f9 fa0e 	bl	80001e4 <__adddf3>
 8006dc8:	a385      	add	r3, pc, #532	; (adr r3, 8006fe0 <__ieee754_rem_pio2+0x318>)
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	4604      	mov	r4, r0
 8006dd0:	460d      	mov	r5, r1
 8006dd2:	f7f9 fa07 	bl	80001e4 <__adddf3>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	e9ca 2300 	strd	r2, r3, [sl]
 8006dde:	4620      	mov	r0, r4
 8006de0:	4629      	mov	r1, r5
 8006de2:	f7f9 f9fd 	bl	80001e0 <__aeabi_dsub>
 8006de6:	a37e      	add	r3, pc, #504	; (adr r3, 8006fe0 <__ieee754_rem_pio2+0x318>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	e7e0      	b.n	8006db0 <__ieee754_rem_pio2+0xe8>
 8006dee:	4b87      	ldr	r3, [pc, #540]	; (800700c <__ieee754_rem_pio2+0x344>)
 8006df0:	4598      	cmp	r8, r3
 8006df2:	f300 80d9 	bgt.w	8006fa8 <__ieee754_rem_pio2+0x2e0>
 8006df6:	f001 fbf7 	bl	80085e8 <fabs>
 8006dfa:	ec55 4b10 	vmov	r4, r5, d0
 8006dfe:	ee10 0a10 	vmov	r0, s0
 8006e02:	a379      	add	r3, pc, #484	; (adr r3, 8006fe8 <__ieee754_rem_pio2+0x320>)
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	4629      	mov	r1, r5
 8006e0a:	f7f9 fba1 	bl	8000550 <__aeabi_dmul>
 8006e0e:	4b80      	ldr	r3, [pc, #512]	; (8007010 <__ieee754_rem_pio2+0x348>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	f7f9 f9e7 	bl	80001e4 <__adddf3>
 8006e16:	f7f9 fe4b 	bl	8000ab0 <__aeabi_d2iz>
 8006e1a:	4683      	mov	fp, r0
 8006e1c:	f7f9 fb2e 	bl	800047c <__aeabi_i2d>
 8006e20:	4602      	mov	r2, r0
 8006e22:	460b      	mov	r3, r1
 8006e24:	ec43 2b18 	vmov	d8, r2, r3
 8006e28:	a367      	add	r3, pc, #412	; (adr r3, 8006fc8 <__ieee754_rem_pio2+0x300>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 fb8f 	bl	8000550 <__aeabi_dmul>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4620      	mov	r0, r4
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f7f9 f9d1 	bl	80001e0 <__aeabi_dsub>
 8006e3e:	a364      	add	r3, pc, #400	; (adr r3, 8006fd0 <__ieee754_rem_pio2+0x308>)
 8006e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e44:	4606      	mov	r6, r0
 8006e46:	460f      	mov	r7, r1
 8006e48:	ec51 0b18 	vmov	r0, r1, d8
 8006e4c:	f7f9 fb80 	bl	8000550 <__aeabi_dmul>
 8006e50:	f1bb 0f1f 	cmp.w	fp, #31
 8006e54:	4604      	mov	r4, r0
 8006e56:	460d      	mov	r5, r1
 8006e58:	dc0d      	bgt.n	8006e76 <__ieee754_rem_pio2+0x1ae>
 8006e5a:	4b6e      	ldr	r3, [pc, #440]	; (8007014 <__ieee754_rem_pio2+0x34c>)
 8006e5c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e64:	4543      	cmp	r3, r8
 8006e66:	d006      	beq.n	8006e76 <__ieee754_rem_pio2+0x1ae>
 8006e68:	4622      	mov	r2, r4
 8006e6a:	462b      	mov	r3, r5
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	4639      	mov	r1, r7
 8006e70:	f7f9 f9b6 	bl	80001e0 <__aeabi_dsub>
 8006e74:	e00f      	b.n	8006e96 <__ieee754_rem_pio2+0x1ce>
 8006e76:	462b      	mov	r3, r5
 8006e78:	4622      	mov	r2, r4
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	4639      	mov	r1, r7
 8006e7e:	f7f9 f9af 	bl	80001e0 <__aeabi_dsub>
 8006e82:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006e86:	9303      	str	r3, [sp, #12]
 8006e88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e8c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8006e90:	f1b8 0f10 	cmp.w	r8, #16
 8006e94:	dc02      	bgt.n	8006e9c <__ieee754_rem_pio2+0x1d4>
 8006e96:	e9ca 0100 	strd	r0, r1, [sl]
 8006e9a:	e039      	b.n	8006f10 <__ieee754_rem_pio2+0x248>
 8006e9c:	a34e      	add	r3, pc, #312	; (adr r3, 8006fd8 <__ieee754_rem_pio2+0x310>)
 8006e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea2:	ec51 0b18 	vmov	r0, r1, d8
 8006ea6:	f7f9 fb53 	bl	8000550 <__aeabi_dmul>
 8006eaa:	4604      	mov	r4, r0
 8006eac:	460d      	mov	r5, r1
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	4639      	mov	r1, r7
 8006eb6:	f7f9 f993 	bl	80001e0 <__aeabi_dsub>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	4680      	mov	r8, r0
 8006ec0:	4689      	mov	r9, r1
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	4639      	mov	r1, r7
 8006ec6:	f7f9 f98b 	bl	80001e0 <__aeabi_dsub>
 8006eca:	4622      	mov	r2, r4
 8006ecc:	462b      	mov	r3, r5
 8006ece:	f7f9 f987 	bl	80001e0 <__aeabi_dsub>
 8006ed2:	a343      	add	r3, pc, #268	; (adr r3, 8006fe0 <__ieee754_rem_pio2+0x318>)
 8006ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed8:	4604      	mov	r4, r0
 8006eda:	460d      	mov	r5, r1
 8006edc:	ec51 0b18 	vmov	r0, r1, d8
 8006ee0:	f7f9 fb36 	bl	8000550 <__aeabi_dmul>
 8006ee4:	4622      	mov	r2, r4
 8006ee6:	462b      	mov	r3, r5
 8006ee8:	f7f9 f97a 	bl	80001e0 <__aeabi_dsub>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	460d      	mov	r5, r1
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	f7f9 f972 	bl	80001e0 <__aeabi_dsub>
 8006efc:	9a03      	ldr	r2, [sp, #12]
 8006efe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006f02:	1ad3      	subs	r3, r2, r3
 8006f04:	2b31      	cmp	r3, #49	; 0x31
 8006f06:	dc24      	bgt.n	8006f52 <__ieee754_rem_pio2+0x28a>
 8006f08:	e9ca 0100 	strd	r0, r1, [sl]
 8006f0c:	4646      	mov	r6, r8
 8006f0e:	464f      	mov	r7, r9
 8006f10:	e9da 8900 	ldrd	r8, r9, [sl]
 8006f14:	4630      	mov	r0, r6
 8006f16:	4642      	mov	r2, r8
 8006f18:	464b      	mov	r3, r9
 8006f1a:	4639      	mov	r1, r7
 8006f1c:	f7f9 f960 	bl	80001e0 <__aeabi_dsub>
 8006f20:	462b      	mov	r3, r5
 8006f22:	4622      	mov	r2, r4
 8006f24:	f7f9 f95c 	bl	80001e0 <__aeabi_dsub>
 8006f28:	9b02      	ldr	r3, [sp, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006f30:	f6bf af0a 	bge.w	8006d48 <__ieee754_rem_pio2+0x80>
 8006f34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006f38:	f8ca 3004 	str.w	r3, [sl, #4]
 8006f3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006f40:	f8ca 8000 	str.w	r8, [sl]
 8006f44:	f8ca 0008 	str.w	r0, [sl, #8]
 8006f48:	f8ca 300c 	str.w	r3, [sl, #12]
 8006f4c:	f1cb 0b00 	rsb	fp, fp, #0
 8006f50:	e6fa      	b.n	8006d48 <__ieee754_rem_pio2+0x80>
 8006f52:	a327      	add	r3, pc, #156	; (adr r3, 8006ff0 <__ieee754_rem_pio2+0x328>)
 8006f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f58:	ec51 0b18 	vmov	r0, r1, d8
 8006f5c:	f7f9 faf8 	bl	8000550 <__aeabi_dmul>
 8006f60:	4604      	mov	r4, r0
 8006f62:	460d      	mov	r5, r1
 8006f64:	4602      	mov	r2, r0
 8006f66:	460b      	mov	r3, r1
 8006f68:	4640      	mov	r0, r8
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	f7f9 f938 	bl	80001e0 <__aeabi_dsub>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4606      	mov	r6, r0
 8006f76:	460f      	mov	r7, r1
 8006f78:	4640      	mov	r0, r8
 8006f7a:	4649      	mov	r1, r9
 8006f7c:	f7f9 f930 	bl	80001e0 <__aeabi_dsub>
 8006f80:	4622      	mov	r2, r4
 8006f82:	462b      	mov	r3, r5
 8006f84:	f7f9 f92c 	bl	80001e0 <__aeabi_dsub>
 8006f88:	a31b      	add	r3, pc, #108	; (adr r3, 8006ff8 <__ieee754_rem_pio2+0x330>)
 8006f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8e:	4604      	mov	r4, r0
 8006f90:	460d      	mov	r5, r1
 8006f92:	ec51 0b18 	vmov	r0, r1, d8
 8006f96:	f7f9 fadb 	bl	8000550 <__aeabi_dmul>
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	f7f9 f91f 	bl	80001e0 <__aeabi_dsub>
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	e75f      	b.n	8006e68 <__ieee754_rem_pio2+0x1a0>
 8006fa8:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <__ieee754_rem_pio2+0x350>)
 8006faa:	4598      	cmp	r8, r3
 8006fac:	dd36      	ble.n	800701c <__ieee754_rem_pio2+0x354>
 8006fae:	ee10 2a10 	vmov	r2, s0
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	f7f9 f912 	bl	80001e0 <__aeabi_dsub>
 8006fbc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006fc0:	e9ca 0100 	strd	r0, r1, [sl]
 8006fc4:	e694      	b.n	8006cf0 <__ieee754_rem_pio2+0x28>
 8006fc6:	bf00      	nop
 8006fc8:	54400000 	.word	0x54400000
 8006fcc:	3ff921fb 	.word	0x3ff921fb
 8006fd0:	1a626331 	.word	0x1a626331
 8006fd4:	3dd0b461 	.word	0x3dd0b461
 8006fd8:	1a600000 	.word	0x1a600000
 8006fdc:	3dd0b461 	.word	0x3dd0b461
 8006fe0:	2e037073 	.word	0x2e037073
 8006fe4:	3ba3198a 	.word	0x3ba3198a
 8006fe8:	6dc9c883 	.word	0x6dc9c883
 8006fec:	3fe45f30 	.word	0x3fe45f30
 8006ff0:	2e000000 	.word	0x2e000000
 8006ff4:	3ba3198a 	.word	0x3ba3198a
 8006ff8:	252049c1 	.word	0x252049c1
 8006ffc:	397b839a 	.word	0x397b839a
 8007000:	3fe921fb 	.word	0x3fe921fb
 8007004:	4002d97b 	.word	0x4002d97b
 8007008:	3ff921fb 	.word	0x3ff921fb
 800700c:	413921fb 	.word	0x413921fb
 8007010:	3fe00000 	.word	0x3fe00000
 8007014:	08008b7c 	.word	0x08008b7c
 8007018:	7fefffff 	.word	0x7fefffff
 800701c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007020:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007024:	ee10 0a10 	vmov	r0, s0
 8007028:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800702c:	ee10 6a10 	vmov	r6, s0
 8007030:	460f      	mov	r7, r1
 8007032:	f7f9 fd3d 	bl	8000ab0 <__aeabi_d2iz>
 8007036:	f7f9 fa21 	bl	800047c <__aeabi_i2d>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4630      	mov	r0, r6
 8007040:	4639      	mov	r1, r7
 8007042:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007046:	f7f9 f8cb 	bl	80001e0 <__aeabi_dsub>
 800704a:	4b23      	ldr	r3, [pc, #140]	; (80070d8 <__ieee754_rem_pio2+0x410>)
 800704c:	2200      	movs	r2, #0
 800704e:	f7f9 fa7f 	bl	8000550 <__aeabi_dmul>
 8007052:	460f      	mov	r7, r1
 8007054:	4606      	mov	r6, r0
 8007056:	f7f9 fd2b 	bl	8000ab0 <__aeabi_d2iz>
 800705a:	f7f9 fa0f 	bl	800047c <__aeabi_i2d>
 800705e:	4602      	mov	r2, r0
 8007060:	460b      	mov	r3, r1
 8007062:	4630      	mov	r0, r6
 8007064:	4639      	mov	r1, r7
 8007066:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800706a:	f7f9 f8b9 	bl	80001e0 <__aeabi_dsub>
 800706e:	4b1a      	ldr	r3, [pc, #104]	; (80070d8 <__ieee754_rem_pio2+0x410>)
 8007070:	2200      	movs	r2, #0
 8007072:	f7f9 fa6d 	bl	8000550 <__aeabi_dmul>
 8007076:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800707a:	ad04      	add	r5, sp, #16
 800707c:	f04f 0803 	mov.w	r8, #3
 8007080:	46a9      	mov	r9, r5
 8007082:	2600      	movs	r6, #0
 8007084:	2700      	movs	r7, #0
 8007086:	4632      	mov	r2, r6
 8007088:	463b      	mov	r3, r7
 800708a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800708e:	46c3      	mov	fp, r8
 8007090:	3d08      	subs	r5, #8
 8007092:	f108 38ff 	add.w	r8, r8, #4294967295
 8007096:	f7f9 fcc3 	bl	8000a20 <__aeabi_dcmpeq>
 800709a:	2800      	cmp	r0, #0
 800709c:	d1f3      	bne.n	8007086 <__ieee754_rem_pio2+0x3be>
 800709e:	4b0f      	ldr	r3, [pc, #60]	; (80070dc <__ieee754_rem_pio2+0x414>)
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	2302      	movs	r3, #2
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	4622      	mov	r2, r4
 80070a8:	465b      	mov	r3, fp
 80070aa:	4651      	mov	r1, sl
 80070ac:	4648      	mov	r0, r9
 80070ae:	f000 fb6f 	bl	8007790 <__kernel_rem_pio2>
 80070b2:	9b02      	ldr	r3, [sp, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	4683      	mov	fp, r0
 80070b8:	f6bf ae46 	bge.w	8006d48 <__ieee754_rem_pio2+0x80>
 80070bc:	e9da 2100 	ldrd	r2, r1, [sl]
 80070c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070c4:	e9ca 2300 	strd	r2, r3, [sl]
 80070c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80070cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80070d4:	e73a      	b.n	8006f4c <__ieee754_rem_pio2+0x284>
 80070d6:	bf00      	nop
 80070d8:	41700000 	.word	0x41700000
 80070dc:	08008bfc 	.word	0x08008bfc

080070e0 <__ieee754_sqrt>:
 80070e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e4:	ec55 4b10 	vmov	r4, r5, d0
 80070e8:	4e55      	ldr	r6, [pc, #340]	; (8007240 <__ieee754_sqrt+0x160>)
 80070ea:	43ae      	bics	r6, r5
 80070ec:	ee10 0a10 	vmov	r0, s0
 80070f0:	ee10 3a10 	vmov	r3, s0
 80070f4:	462a      	mov	r2, r5
 80070f6:	4629      	mov	r1, r5
 80070f8:	d110      	bne.n	800711c <__ieee754_sqrt+0x3c>
 80070fa:	ee10 2a10 	vmov	r2, s0
 80070fe:	462b      	mov	r3, r5
 8007100:	f7f9 fa26 	bl	8000550 <__aeabi_dmul>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	4620      	mov	r0, r4
 800710a:	4629      	mov	r1, r5
 800710c:	f7f9 f86a 	bl	80001e4 <__adddf3>
 8007110:	4604      	mov	r4, r0
 8007112:	460d      	mov	r5, r1
 8007114:	ec45 4b10 	vmov	d0, r4, r5
 8007118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800711c:	2d00      	cmp	r5, #0
 800711e:	dc10      	bgt.n	8007142 <__ieee754_sqrt+0x62>
 8007120:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007124:	4330      	orrs	r0, r6
 8007126:	d0f5      	beq.n	8007114 <__ieee754_sqrt+0x34>
 8007128:	b15d      	cbz	r5, 8007142 <__ieee754_sqrt+0x62>
 800712a:	ee10 2a10 	vmov	r2, s0
 800712e:	462b      	mov	r3, r5
 8007130:	ee10 0a10 	vmov	r0, s0
 8007134:	f7f9 f854 	bl	80001e0 <__aeabi_dsub>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	f7f9 fb32 	bl	80007a4 <__aeabi_ddiv>
 8007140:	e7e6      	b.n	8007110 <__ieee754_sqrt+0x30>
 8007142:	1512      	asrs	r2, r2, #20
 8007144:	d074      	beq.n	8007230 <__ieee754_sqrt+0x150>
 8007146:	07d4      	lsls	r4, r2, #31
 8007148:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800714c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8007150:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007154:	bf5e      	ittt	pl
 8007156:	0fda      	lsrpl	r2, r3, #31
 8007158:	005b      	lslpl	r3, r3, #1
 800715a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800715e:	2400      	movs	r4, #0
 8007160:	0fda      	lsrs	r2, r3, #31
 8007162:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8007166:	107f      	asrs	r7, r7, #1
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	2516      	movs	r5, #22
 800716c:	4620      	mov	r0, r4
 800716e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007172:	1886      	adds	r6, r0, r2
 8007174:	428e      	cmp	r6, r1
 8007176:	bfde      	ittt	le
 8007178:	1b89      	suble	r1, r1, r6
 800717a:	18b0      	addle	r0, r6, r2
 800717c:	18a4      	addle	r4, r4, r2
 800717e:	0049      	lsls	r1, r1, #1
 8007180:	3d01      	subs	r5, #1
 8007182:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8007186:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800718a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800718e:	d1f0      	bne.n	8007172 <__ieee754_sqrt+0x92>
 8007190:	462a      	mov	r2, r5
 8007192:	f04f 0e20 	mov.w	lr, #32
 8007196:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800719a:	4281      	cmp	r1, r0
 800719c:	eb06 0c05 	add.w	ip, r6, r5
 80071a0:	dc02      	bgt.n	80071a8 <__ieee754_sqrt+0xc8>
 80071a2:	d113      	bne.n	80071cc <__ieee754_sqrt+0xec>
 80071a4:	459c      	cmp	ip, r3
 80071a6:	d811      	bhi.n	80071cc <__ieee754_sqrt+0xec>
 80071a8:	f1bc 0f00 	cmp.w	ip, #0
 80071ac:	eb0c 0506 	add.w	r5, ip, r6
 80071b0:	da43      	bge.n	800723a <__ieee754_sqrt+0x15a>
 80071b2:	2d00      	cmp	r5, #0
 80071b4:	db41      	blt.n	800723a <__ieee754_sqrt+0x15a>
 80071b6:	f100 0801 	add.w	r8, r0, #1
 80071ba:	1a09      	subs	r1, r1, r0
 80071bc:	459c      	cmp	ip, r3
 80071be:	bf88      	it	hi
 80071c0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80071c4:	eba3 030c 	sub.w	r3, r3, ip
 80071c8:	4432      	add	r2, r6
 80071ca:	4640      	mov	r0, r8
 80071cc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80071d0:	f1be 0e01 	subs.w	lr, lr, #1
 80071d4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80071d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80071e0:	d1db      	bne.n	800719a <__ieee754_sqrt+0xba>
 80071e2:	430b      	orrs	r3, r1
 80071e4:	d006      	beq.n	80071f4 <__ieee754_sqrt+0x114>
 80071e6:	1c50      	adds	r0, r2, #1
 80071e8:	bf13      	iteet	ne
 80071ea:	3201      	addne	r2, #1
 80071ec:	3401      	addeq	r4, #1
 80071ee:	4672      	moveq	r2, lr
 80071f0:	f022 0201 	bicne.w	r2, r2, #1
 80071f4:	1063      	asrs	r3, r4, #1
 80071f6:	0852      	lsrs	r2, r2, #1
 80071f8:	07e1      	lsls	r1, r4, #31
 80071fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80071fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007202:	bf48      	it	mi
 8007204:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007208:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800720c:	4614      	mov	r4, r2
 800720e:	e781      	b.n	8007114 <__ieee754_sqrt+0x34>
 8007210:	0ad9      	lsrs	r1, r3, #11
 8007212:	3815      	subs	r0, #21
 8007214:	055b      	lsls	r3, r3, #21
 8007216:	2900      	cmp	r1, #0
 8007218:	d0fa      	beq.n	8007210 <__ieee754_sqrt+0x130>
 800721a:	02cd      	lsls	r5, r1, #11
 800721c:	d50a      	bpl.n	8007234 <__ieee754_sqrt+0x154>
 800721e:	f1c2 0420 	rsb	r4, r2, #32
 8007222:	fa23 f404 	lsr.w	r4, r3, r4
 8007226:	1e55      	subs	r5, r2, #1
 8007228:	4093      	lsls	r3, r2
 800722a:	4321      	orrs	r1, r4
 800722c:	1b42      	subs	r2, r0, r5
 800722e:	e78a      	b.n	8007146 <__ieee754_sqrt+0x66>
 8007230:	4610      	mov	r0, r2
 8007232:	e7f0      	b.n	8007216 <__ieee754_sqrt+0x136>
 8007234:	0049      	lsls	r1, r1, #1
 8007236:	3201      	adds	r2, #1
 8007238:	e7ef      	b.n	800721a <__ieee754_sqrt+0x13a>
 800723a:	4680      	mov	r8, r0
 800723c:	e7bd      	b.n	80071ba <__ieee754_sqrt+0xda>
 800723e:	bf00      	nop
 8007240:	7ff00000 	.word	0x7ff00000

08007244 <__ieee754_atan2f>:
 8007244:	ee10 2a90 	vmov	r2, s1
 8007248:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800724c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007250:	b510      	push	{r4, lr}
 8007252:	eef0 7a40 	vmov.f32	s15, s0
 8007256:	dc06      	bgt.n	8007266 <__ieee754_atan2f+0x22>
 8007258:	ee10 0a10 	vmov	r0, s0
 800725c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8007260:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007264:	dd04      	ble.n	8007270 <__ieee754_atan2f+0x2c>
 8007266:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800726a:	eeb0 0a67 	vmov.f32	s0, s15
 800726e:	bd10      	pop	{r4, pc}
 8007270:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8007274:	d103      	bne.n	800727e <__ieee754_atan2f+0x3a>
 8007276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800727a:	f001 bac7 	b.w	800880c <atanf>
 800727e:	1794      	asrs	r4, r2, #30
 8007280:	f004 0402 	and.w	r4, r4, #2
 8007284:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007288:	b943      	cbnz	r3, 800729c <__ieee754_atan2f+0x58>
 800728a:	2c02      	cmp	r4, #2
 800728c:	d05e      	beq.n	800734c <__ieee754_atan2f+0x108>
 800728e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007360 <__ieee754_atan2f+0x11c>
 8007292:	2c03      	cmp	r4, #3
 8007294:	bf08      	it	eq
 8007296:	eef0 7a47 	vmoveq.f32	s15, s14
 800729a:	e7e6      	b.n	800726a <__ieee754_atan2f+0x26>
 800729c:	b941      	cbnz	r1, 80072b0 <__ieee754_atan2f+0x6c>
 800729e:	eddf 7a31 	vldr	s15, [pc, #196]	; 8007364 <__ieee754_atan2f+0x120>
 80072a2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8007368 <__ieee754_atan2f+0x124>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	bfb8      	it	lt
 80072aa:	eef0 7a40 	vmovlt.f32	s15, s0
 80072ae:	e7dc      	b.n	800726a <__ieee754_atan2f+0x26>
 80072b0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80072b4:	d110      	bne.n	80072d8 <__ieee754_atan2f+0x94>
 80072b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80072ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80072be:	d107      	bne.n	80072d0 <__ieee754_atan2f+0x8c>
 80072c0:	2c02      	cmp	r4, #2
 80072c2:	d846      	bhi.n	8007352 <__ieee754_atan2f+0x10e>
 80072c4:	4b29      	ldr	r3, [pc, #164]	; (800736c <__ieee754_atan2f+0x128>)
 80072c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80072ca:	edd4 7a00 	vldr	s15, [r4]
 80072ce:	e7cc      	b.n	800726a <__ieee754_atan2f+0x26>
 80072d0:	2c02      	cmp	r4, #2
 80072d2:	d841      	bhi.n	8007358 <__ieee754_atan2f+0x114>
 80072d4:	4b26      	ldr	r3, [pc, #152]	; (8007370 <__ieee754_atan2f+0x12c>)
 80072d6:	e7f6      	b.n	80072c6 <__ieee754_atan2f+0x82>
 80072d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80072dc:	d0df      	beq.n	800729e <__ieee754_atan2f+0x5a>
 80072de:	1a5b      	subs	r3, r3, r1
 80072e0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80072e4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80072e8:	da1a      	bge.n	8007320 <__ieee754_atan2f+0xdc>
 80072ea:	2a00      	cmp	r2, #0
 80072ec:	da01      	bge.n	80072f2 <__ieee754_atan2f+0xae>
 80072ee:	313c      	adds	r1, #60	; 0x3c
 80072f0:	db19      	blt.n	8007326 <__ieee754_atan2f+0xe2>
 80072f2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80072f6:	f001 fb5d 	bl	80089b4 <fabsf>
 80072fa:	f001 fa87 	bl	800880c <atanf>
 80072fe:	eef0 7a40 	vmov.f32	s15, s0
 8007302:	2c01      	cmp	r4, #1
 8007304:	d012      	beq.n	800732c <__ieee754_atan2f+0xe8>
 8007306:	2c02      	cmp	r4, #2
 8007308:	d017      	beq.n	800733a <__ieee754_atan2f+0xf6>
 800730a:	2c00      	cmp	r4, #0
 800730c:	d0ad      	beq.n	800726a <__ieee754_atan2f+0x26>
 800730e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8007374 <__ieee754_atan2f+0x130>
 8007312:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007316:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007378 <__ieee754_atan2f+0x134>
 800731a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800731e:	e7a4      	b.n	800726a <__ieee754_atan2f+0x26>
 8007320:	eddf 7a10 	vldr	s15, [pc, #64]	; 8007364 <__ieee754_atan2f+0x120>
 8007324:	e7ed      	b.n	8007302 <__ieee754_atan2f+0xbe>
 8007326:	eddf 7a15 	vldr	s15, [pc, #84]	; 800737c <__ieee754_atan2f+0x138>
 800732a:	e7ea      	b.n	8007302 <__ieee754_atan2f+0xbe>
 800732c:	ee17 3a90 	vmov	r3, s15
 8007330:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007334:	ee07 3a90 	vmov	s15, r3
 8007338:	e797      	b.n	800726a <__ieee754_atan2f+0x26>
 800733a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8007374 <__ieee754_atan2f+0x130>
 800733e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007342:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8007378 <__ieee754_atan2f+0x134>
 8007346:	ee70 7a67 	vsub.f32	s15, s0, s15
 800734a:	e78e      	b.n	800726a <__ieee754_atan2f+0x26>
 800734c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8007378 <__ieee754_atan2f+0x134>
 8007350:	e78b      	b.n	800726a <__ieee754_atan2f+0x26>
 8007352:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8007380 <__ieee754_atan2f+0x13c>
 8007356:	e788      	b.n	800726a <__ieee754_atan2f+0x26>
 8007358:	eddf 7a08 	vldr	s15, [pc, #32]	; 800737c <__ieee754_atan2f+0x138>
 800735c:	e785      	b.n	800726a <__ieee754_atan2f+0x26>
 800735e:	bf00      	nop
 8007360:	c0490fdb 	.word	0xc0490fdb
 8007364:	3fc90fdb 	.word	0x3fc90fdb
 8007368:	bfc90fdb 	.word	0xbfc90fdb
 800736c:	08008d04 	.word	0x08008d04
 8007370:	08008d10 	.word	0x08008d10
 8007374:	33bbbd2e 	.word	0x33bbbd2e
 8007378:	40490fdb 	.word	0x40490fdb
 800737c:	00000000 	.word	0x00000000
 8007380:	3f490fdb 	.word	0x3f490fdb

08007384 <__ieee754_rem_pio2f>:
 8007384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007386:	ee10 6a10 	vmov	r6, s0
 800738a:	4b8e      	ldr	r3, [pc, #568]	; (80075c4 <__ieee754_rem_pio2f+0x240>)
 800738c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8007390:	429d      	cmp	r5, r3
 8007392:	b087      	sub	sp, #28
 8007394:	eef0 7a40 	vmov.f32	s15, s0
 8007398:	4604      	mov	r4, r0
 800739a:	dc05      	bgt.n	80073a8 <__ieee754_rem_pio2f+0x24>
 800739c:	2300      	movs	r3, #0
 800739e:	ed80 0a00 	vstr	s0, [r0]
 80073a2:	6043      	str	r3, [r0, #4]
 80073a4:	2000      	movs	r0, #0
 80073a6:	e01a      	b.n	80073de <__ieee754_rem_pio2f+0x5a>
 80073a8:	4b87      	ldr	r3, [pc, #540]	; (80075c8 <__ieee754_rem_pio2f+0x244>)
 80073aa:	429d      	cmp	r5, r3
 80073ac:	dc46      	bgt.n	800743c <__ieee754_rem_pio2f+0xb8>
 80073ae:	2e00      	cmp	r6, #0
 80073b0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80075cc <__ieee754_rem_pio2f+0x248>
 80073b4:	4b86      	ldr	r3, [pc, #536]	; (80075d0 <__ieee754_rem_pio2f+0x24c>)
 80073b6:	f025 050f 	bic.w	r5, r5, #15
 80073ba:	dd1f      	ble.n	80073fc <__ieee754_rem_pio2f+0x78>
 80073bc:	429d      	cmp	r5, r3
 80073be:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80073c2:	d00e      	beq.n	80073e2 <__ieee754_rem_pio2f+0x5e>
 80073c4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80075d4 <__ieee754_rem_pio2f+0x250>
 80073c8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80073cc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80073d0:	ed80 0a00 	vstr	s0, [r0]
 80073d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073d8:	2001      	movs	r0, #1
 80073da:	edc4 7a01 	vstr	s15, [r4, #4]
 80073de:	b007      	add	sp, #28
 80073e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073e2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80075d8 <__ieee754_rem_pio2f+0x254>
 80073e6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80075dc <__ieee754_rem_pio2f+0x258>
 80073ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80073ee:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80073f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80073f6:	edc0 6a00 	vstr	s13, [r0]
 80073fa:	e7eb      	b.n	80073d4 <__ieee754_rem_pio2f+0x50>
 80073fc:	429d      	cmp	r5, r3
 80073fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007402:	d00e      	beq.n	8007422 <__ieee754_rem_pio2f+0x9e>
 8007404:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80075d4 <__ieee754_rem_pio2f+0x250>
 8007408:	ee37 0a87 	vadd.f32	s0, s15, s14
 800740c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007410:	ed80 0a00 	vstr	s0, [r0]
 8007414:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007418:	f04f 30ff 	mov.w	r0, #4294967295
 800741c:	edc4 7a01 	vstr	s15, [r4, #4]
 8007420:	e7dd      	b.n	80073de <__ieee754_rem_pio2f+0x5a>
 8007422:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80075d8 <__ieee754_rem_pio2f+0x254>
 8007426:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80075dc <__ieee754_rem_pio2f+0x258>
 800742a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800742e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007432:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007436:	edc0 6a00 	vstr	s13, [r0]
 800743a:	e7eb      	b.n	8007414 <__ieee754_rem_pio2f+0x90>
 800743c:	4b68      	ldr	r3, [pc, #416]	; (80075e0 <__ieee754_rem_pio2f+0x25c>)
 800743e:	429d      	cmp	r5, r3
 8007440:	dc72      	bgt.n	8007528 <__ieee754_rem_pio2f+0x1a4>
 8007442:	f001 fab7 	bl	80089b4 <fabsf>
 8007446:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80075e4 <__ieee754_rem_pio2f+0x260>
 800744a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800744e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007456:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800745a:	ee17 0a90 	vmov	r0, s15
 800745e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80075cc <__ieee754_rem_pio2f+0x248>
 8007462:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007466:	281f      	cmp	r0, #31
 8007468:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80075d4 <__ieee754_rem_pio2f+0x250>
 800746c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007470:	eeb1 6a47 	vneg.f32	s12, s14
 8007474:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007478:	ee16 2a90 	vmov	r2, s13
 800747c:	dc1c      	bgt.n	80074b8 <__ieee754_rem_pio2f+0x134>
 800747e:	495a      	ldr	r1, [pc, #360]	; (80075e8 <__ieee754_rem_pio2f+0x264>)
 8007480:	1e47      	subs	r7, r0, #1
 8007482:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007486:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800748a:	428b      	cmp	r3, r1
 800748c:	d014      	beq.n	80074b8 <__ieee754_rem_pio2f+0x134>
 800748e:	6022      	str	r2, [r4, #0]
 8007490:	ed94 7a00 	vldr	s14, [r4]
 8007494:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007498:	2e00      	cmp	r6, #0
 800749a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800749e:	ed84 0a01 	vstr	s0, [r4, #4]
 80074a2:	da9c      	bge.n	80073de <__ieee754_rem_pio2f+0x5a>
 80074a4:	eeb1 7a47 	vneg.f32	s14, s14
 80074a8:	eeb1 0a40 	vneg.f32	s0, s0
 80074ac:	ed84 7a00 	vstr	s14, [r4]
 80074b0:	ed84 0a01 	vstr	s0, [r4, #4]
 80074b4:	4240      	negs	r0, r0
 80074b6:	e792      	b.n	80073de <__ieee754_rem_pio2f+0x5a>
 80074b8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80074bc:	15eb      	asrs	r3, r5, #23
 80074be:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80074c2:	2d08      	cmp	r5, #8
 80074c4:	dde3      	ble.n	800748e <__ieee754_rem_pio2f+0x10a>
 80074c6:	eddf 7a44 	vldr	s15, [pc, #272]	; 80075d8 <__ieee754_rem_pio2f+0x254>
 80074ca:	eddf 5a44 	vldr	s11, [pc, #272]	; 80075dc <__ieee754_rem_pio2f+0x258>
 80074ce:	eef0 6a40 	vmov.f32	s13, s0
 80074d2:	eee6 6a27 	vfma.f32	s13, s12, s15
 80074d6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80074da:	eea6 0a27 	vfma.f32	s0, s12, s15
 80074de:	eef0 7a40 	vmov.f32	s15, s0
 80074e2:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80074e6:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80074ea:	ee15 2a90 	vmov	r2, s11
 80074ee:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80074f2:	1a5b      	subs	r3, r3, r1
 80074f4:	2b19      	cmp	r3, #25
 80074f6:	dc04      	bgt.n	8007502 <__ieee754_rem_pio2f+0x17e>
 80074f8:	edc4 5a00 	vstr	s11, [r4]
 80074fc:	eeb0 0a66 	vmov.f32	s0, s13
 8007500:	e7c6      	b.n	8007490 <__ieee754_rem_pio2f+0x10c>
 8007502:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80075ec <__ieee754_rem_pio2f+0x268>
 8007506:	eeb0 0a66 	vmov.f32	s0, s13
 800750a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800750e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007512:	eddf 6a37 	vldr	s13, [pc, #220]	; 80075f0 <__ieee754_rem_pio2f+0x26c>
 8007516:	eee6 7a25 	vfma.f32	s15, s12, s11
 800751a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800751e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007522:	ed84 7a00 	vstr	s14, [r4]
 8007526:	e7b3      	b.n	8007490 <__ieee754_rem_pio2f+0x10c>
 8007528:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800752c:	db06      	blt.n	800753c <__ieee754_rem_pio2f+0x1b8>
 800752e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007532:	edc0 7a01 	vstr	s15, [r0, #4]
 8007536:	edc0 7a00 	vstr	s15, [r0]
 800753a:	e733      	b.n	80073a4 <__ieee754_rem_pio2f+0x20>
 800753c:	15ea      	asrs	r2, r5, #23
 800753e:	3a86      	subs	r2, #134	; 0x86
 8007540:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007544:	ee07 3a90 	vmov	s15, r3
 8007548:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800754c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80075f4 <__ieee754_rem_pio2f+0x270>
 8007550:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007554:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007558:	ed8d 7a03 	vstr	s14, [sp, #12]
 800755c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007560:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007564:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007568:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800756c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007570:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007574:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757c:	edcd 7a05 	vstr	s15, [sp, #20]
 8007580:	d11e      	bne.n	80075c0 <__ieee754_rem_pio2f+0x23c>
 8007582:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758a:	bf14      	ite	ne
 800758c:	2302      	movne	r3, #2
 800758e:	2301      	moveq	r3, #1
 8007590:	4919      	ldr	r1, [pc, #100]	; (80075f8 <__ieee754_rem_pio2f+0x274>)
 8007592:	9101      	str	r1, [sp, #4]
 8007594:	2102      	movs	r1, #2
 8007596:	9100      	str	r1, [sp, #0]
 8007598:	a803      	add	r0, sp, #12
 800759a:	4621      	mov	r1, r4
 800759c:	f000 fd66 	bl	800806c <__kernel_rem_pio2f>
 80075a0:	2e00      	cmp	r6, #0
 80075a2:	f6bf af1c 	bge.w	80073de <__ieee754_rem_pio2f+0x5a>
 80075a6:	edd4 7a00 	vldr	s15, [r4]
 80075aa:	eef1 7a67 	vneg.f32	s15, s15
 80075ae:	edc4 7a00 	vstr	s15, [r4]
 80075b2:	edd4 7a01 	vldr	s15, [r4, #4]
 80075b6:	eef1 7a67 	vneg.f32	s15, s15
 80075ba:	edc4 7a01 	vstr	s15, [r4, #4]
 80075be:	e779      	b.n	80074b4 <__ieee754_rem_pio2f+0x130>
 80075c0:	2303      	movs	r3, #3
 80075c2:	e7e5      	b.n	8007590 <__ieee754_rem_pio2f+0x20c>
 80075c4:	3f490fd8 	.word	0x3f490fd8
 80075c8:	4016cbe3 	.word	0x4016cbe3
 80075cc:	3fc90f80 	.word	0x3fc90f80
 80075d0:	3fc90fd0 	.word	0x3fc90fd0
 80075d4:	37354443 	.word	0x37354443
 80075d8:	37354400 	.word	0x37354400
 80075dc:	2e85a308 	.word	0x2e85a308
 80075e0:	43490f80 	.word	0x43490f80
 80075e4:	3f22f984 	.word	0x3f22f984
 80075e8:	08008d1c 	.word	0x08008d1c
 80075ec:	2e85a300 	.word	0x2e85a300
 80075f0:	248d3132 	.word	0x248d3132
 80075f4:	43800000 	.word	0x43800000
 80075f8:	08008d9c 	.word	0x08008d9c
 80075fc:	00000000 	.word	0x00000000

08007600 <__kernel_cos>:
 8007600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007604:	ec57 6b10 	vmov	r6, r7, d0
 8007608:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800760c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007610:	ed8d 1b00 	vstr	d1, [sp]
 8007614:	da07      	bge.n	8007626 <__kernel_cos+0x26>
 8007616:	ee10 0a10 	vmov	r0, s0
 800761a:	4639      	mov	r1, r7
 800761c:	f7f9 fa48 	bl	8000ab0 <__aeabi_d2iz>
 8007620:	2800      	cmp	r0, #0
 8007622:	f000 8088 	beq.w	8007736 <__kernel_cos+0x136>
 8007626:	4632      	mov	r2, r6
 8007628:	463b      	mov	r3, r7
 800762a:	4630      	mov	r0, r6
 800762c:	4639      	mov	r1, r7
 800762e:	f7f8 ff8f 	bl	8000550 <__aeabi_dmul>
 8007632:	4b51      	ldr	r3, [pc, #324]	; (8007778 <__kernel_cos+0x178>)
 8007634:	2200      	movs	r2, #0
 8007636:	4604      	mov	r4, r0
 8007638:	460d      	mov	r5, r1
 800763a:	f7f8 ff89 	bl	8000550 <__aeabi_dmul>
 800763e:	a340      	add	r3, pc, #256	; (adr r3, 8007740 <__kernel_cos+0x140>)
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	4682      	mov	sl, r0
 8007646:	468b      	mov	fp, r1
 8007648:	4620      	mov	r0, r4
 800764a:	4629      	mov	r1, r5
 800764c:	f7f8 ff80 	bl	8000550 <__aeabi_dmul>
 8007650:	a33d      	add	r3, pc, #244	; (adr r3, 8007748 <__kernel_cos+0x148>)
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	f7f8 fdc5 	bl	80001e4 <__adddf3>
 800765a:	4622      	mov	r2, r4
 800765c:	462b      	mov	r3, r5
 800765e:	f7f8 ff77 	bl	8000550 <__aeabi_dmul>
 8007662:	a33b      	add	r3, pc, #236	; (adr r3, 8007750 <__kernel_cos+0x150>)
 8007664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007668:	f7f8 fdba 	bl	80001e0 <__aeabi_dsub>
 800766c:	4622      	mov	r2, r4
 800766e:	462b      	mov	r3, r5
 8007670:	f7f8 ff6e 	bl	8000550 <__aeabi_dmul>
 8007674:	a338      	add	r3, pc, #224	; (adr r3, 8007758 <__kernel_cos+0x158>)
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f7f8 fdb3 	bl	80001e4 <__adddf3>
 800767e:	4622      	mov	r2, r4
 8007680:	462b      	mov	r3, r5
 8007682:	f7f8 ff65 	bl	8000550 <__aeabi_dmul>
 8007686:	a336      	add	r3, pc, #216	; (adr r3, 8007760 <__kernel_cos+0x160>)
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	f7f8 fda8 	bl	80001e0 <__aeabi_dsub>
 8007690:	4622      	mov	r2, r4
 8007692:	462b      	mov	r3, r5
 8007694:	f7f8 ff5c 	bl	8000550 <__aeabi_dmul>
 8007698:	a333      	add	r3, pc, #204	; (adr r3, 8007768 <__kernel_cos+0x168>)
 800769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769e:	f7f8 fda1 	bl	80001e4 <__adddf3>
 80076a2:	4622      	mov	r2, r4
 80076a4:	462b      	mov	r3, r5
 80076a6:	f7f8 ff53 	bl	8000550 <__aeabi_dmul>
 80076aa:	4622      	mov	r2, r4
 80076ac:	462b      	mov	r3, r5
 80076ae:	f7f8 ff4f 	bl	8000550 <__aeabi_dmul>
 80076b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076b6:	4604      	mov	r4, r0
 80076b8:	460d      	mov	r5, r1
 80076ba:	4630      	mov	r0, r6
 80076bc:	4639      	mov	r1, r7
 80076be:	f7f8 ff47 	bl	8000550 <__aeabi_dmul>
 80076c2:	460b      	mov	r3, r1
 80076c4:	4602      	mov	r2, r0
 80076c6:	4629      	mov	r1, r5
 80076c8:	4620      	mov	r0, r4
 80076ca:	f7f8 fd89 	bl	80001e0 <__aeabi_dsub>
 80076ce:	4b2b      	ldr	r3, [pc, #172]	; (800777c <__kernel_cos+0x17c>)
 80076d0:	4598      	cmp	r8, r3
 80076d2:	4606      	mov	r6, r0
 80076d4:	460f      	mov	r7, r1
 80076d6:	dc10      	bgt.n	80076fa <__kernel_cos+0xfa>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4650      	mov	r0, sl
 80076de:	4659      	mov	r1, fp
 80076e0:	f7f8 fd7e 	bl	80001e0 <__aeabi_dsub>
 80076e4:	460b      	mov	r3, r1
 80076e6:	4926      	ldr	r1, [pc, #152]	; (8007780 <__kernel_cos+0x180>)
 80076e8:	4602      	mov	r2, r0
 80076ea:	2000      	movs	r0, #0
 80076ec:	f7f8 fd78 	bl	80001e0 <__aeabi_dsub>
 80076f0:	ec41 0b10 	vmov	d0, r0, r1
 80076f4:	b003      	add	sp, #12
 80076f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fa:	4b22      	ldr	r3, [pc, #136]	; (8007784 <__kernel_cos+0x184>)
 80076fc:	4920      	ldr	r1, [pc, #128]	; (8007780 <__kernel_cos+0x180>)
 80076fe:	4598      	cmp	r8, r3
 8007700:	bfcc      	ite	gt
 8007702:	4d21      	ldrgt	r5, [pc, #132]	; (8007788 <__kernel_cos+0x188>)
 8007704:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007708:	2400      	movs	r4, #0
 800770a:	4622      	mov	r2, r4
 800770c:	462b      	mov	r3, r5
 800770e:	2000      	movs	r0, #0
 8007710:	f7f8 fd66 	bl	80001e0 <__aeabi_dsub>
 8007714:	4622      	mov	r2, r4
 8007716:	4680      	mov	r8, r0
 8007718:	4689      	mov	r9, r1
 800771a:	462b      	mov	r3, r5
 800771c:	4650      	mov	r0, sl
 800771e:	4659      	mov	r1, fp
 8007720:	f7f8 fd5e 	bl	80001e0 <__aeabi_dsub>
 8007724:	4632      	mov	r2, r6
 8007726:	463b      	mov	r3, r7
 8007728:	f7f8 fd5a 	bl	80001e0 <__aeabi_dsub>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4640      	mov	r0, r8
 8007732:	4649      	mov	r1, r9
 8007734:	e7da      	b.n	80076ec <__kernel_cos+0xec>
 8007736:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007770 <__kernel_cos+0x170>
 800773a:	e7db      	b.n	80076f4 <__kernel_cos+0xf4>
 800773c:	f3af 8000 	nop.w
 8007740:	be8838d4 	.word	0xbe8838d4
 8007744:	bda8fae9 	.word	0xbda8fae9
 8007748:	bdb4b1c4 	.word	0xbdb4b1c4
 800774c:	3e21ee9e 	.word	0x3e21ee9e
 8007750:	809c52ad 	.word	0x809c52ad
 8007754:	3e927e4f 	.word	0x3e927e4f
 8007758:	19cb1590 	.word	0x19cb1590
 800775c:	3efa01a0 	.word	0x3efa01a0
 8007760:	16c15177 	.word	0x16c15177
 8007764:	3f56c16c 	.word	0x3f56c16c
 8007768:	5555554c 	.word	0x5555554c
 800776c:	3fa55555 	.word	0x3fa55555
 8007770:	00000000 	.word	0x00000000
 8007774:	3ff00000 	.word	0x3ff00000
 8007778:	3fe00000 	.word	0x3fe00000
 800777c:	3fd33332 	.word	0x3fd33332
 8007780:	3ff00000 	.word	0x3ff00000
 8007784:	3fe90000 	.word	0x3fe90000
 8007788:	3fd20000 	.word	0x3fd20000
 800778c:	00000000 	.word	0x00000000

08007790 <__kernel_rem_pio2>:
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	ed2d 8b02 	vpush	{d8}
 8007798:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800779c:	f112 0f14 	cmn.w	r2, #20
 80077a0:	9308      	str	r3, [sp, #32]
 80077a2:	9101      	str	r1, [sp, #4]
 80077a4:	4bc4      	ldr	r3, [pc, #784]	; (8007ab8 <__kernel_rem_pio2+0x328>)
 80077a6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80077a8:	900b      	str	r0, [sp, #44]	; 0x2c
 80077aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80077ae:	9302      	str	r3, [sp, #8]
 80077b0:	9b08      	ldr	r3, [sp, #32]
 80077b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80077b6:	bfa8      	it	ge
 80077b8:	1ed4      	subge	r4, r2, #3
 80077ba:	9306      	str	r3, [sp, #24]
 80077bc:	bfb2      	itee	lt
 80077be:	2400      	movlt	r4, #0
 80077c0:	2318      	movge	r3, #24
 80077c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80077c6:	f06f 0317 	mvn.w	r3, #23
 80077ca:	fb04 3303 	mla	r3, r4, r3, r3
 80077ce:	eb03 0a02 	add.w	sl, r3, r2
 80077d2:	9b02      	ldr	r3, [sp, #8]
 80077d4:	9a06      	ldr	r2, [sp, #24]
 80077d6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007aa8 <__kernel_rem_pio2+0x318>
 80077da:	eb03 0802 	add.w	r8, r3, r2
 80077de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80077e0:	1aa7      	subs	r7, r4, r2
 80077e2:	ae22      	add	r6, sp, #136	; 0x88
 80077e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80077e8:	2500      	movs	r5, #0
 80077ea:	4545      	cmp	r5, r8
 80077ec:	dd13      	ble.n	8007816 <__kernel_rem_pio2+0x86>
 80077ee:	9b08      	ldr	r3, [sp, #32]
 80077f0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007aa8 <__kernel_rem_pio2+0x318>
 80077f4:	aa22      	add	r2, sp, #136	; 0x88
 80077f6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80077fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80077fe:	f04f 0800 	mov.w	r8, #0
 8007802:	9b02      	ldr	r3, [sp, #8]
 8007804:	4598      	cmp	r8, r3
 8007806:	dc2f      	bgt.n	8007868 <__kernel_rem_pio2+0xd8>
 8007808:	ed8d 8b04 	vstr	d8, [sp, #16]
 800780c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007810:	462f      	mov	r7, r5
 8007812:	2600      	movs	r6, #0
 8007814:	e01b      	b.n	800784e <__kernel_rem_pio2+0xbe>
 8007816:	42ef      	cmn	r7, r5
 8007818:	d407      	bmi.n	800782a <__kernel_rem_pio2+0x9a>
 800781a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800781e:	f7f8 fe2d 	bl	800047c <__aeabi_i2d>
 8007822:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007826:	3501      	adds	r5, #1
 8007828:	e7df      	b.n	80077ea <__kernel_rem_pio2+0x5a>
 800782a:	ec51 0b18 	vmov	r0, r1, d8
 800782e:	e7f8      	b.n	8007822 <__kernel_rem_pio2+0x92>
 8007830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007834:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007838:	f7f8 fe8a 	bl	8000550 <__aeabi_dmul>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007844:	f7f8 fcce 	bl	80001e4 <__adddf3>
 8007848:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800784c:	3601      	adds	r6, #1
 800784e:	9b06      	ldr	r3, [sp, #24]
 8007850:	429e      	cmp	r6, r3
 8007852:	f1a7 0708 	sub.w	r7, r7, #8
 8007856:	ddeb      	ble.n	8007830 <__kernel_rem_pio2+0xa0>
 8007858:	ed9d 7b04 	vldr	d7, [sp, #16]
 800785c:	f108 0801 	add.w	r8, r8, #1
 8007860:	ecab 7b02 	vstmia	fp!, {d7}
 8007864:	3508      	adds	r5, #8
 8007866:	e7cc      	b.n	8007802 <__kernel_rem_pio2+0x72>
 8007868:	9b02      	ldr	r3, [sp, #8]
 800786a:	aa0e      	add	r2, sp, #56	; 0x38
 800786c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007870:	930d      	str	r3, [sp, #52]	; 0x34
 8007872:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007874:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007878:	9c02      	ldr	r4, [sp, #8]
 800787a:	930c      	str	r3, [sp, #48]	; 0x30
 800787c:	00e3      	lsls	r3, r4, #3
 800787e:	930a      	str	r3, [sp, #40]	; 0x28
 8007880:	ab9a      	add	r3, sp, #616	; 0x268
 8007882:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007886:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800788a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800788e:	ab72      	add	r3, sp, #456	; 0x1c8
 8007890:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007894:	46c3      	mov	fp, r8
 8007896:	46a1      	mov	r9, r4
 8007898:	f1b9 0f00 	cmp.w	r9, #0
 800789c:	f1a5 0508 	sub.w	r5, r5, #8
 80078a0:	dc77      	bgt.n	8007992 <__kernel_rem_pio2+0x202>
 80078a2:	ec47 6b10 	vmov	d0, r6, r7
 80078a6:	4650      	mov	r0, sl
 80078a8:	f000 ff2a 	bl	8008700 <scalbn>
 80078ac:	ec57 6b10 	vmov	r6, r7, d0
 80078b0:	2200      	movs	r2, #0
 80078b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80078b6:	ee10 0a10 	vmov	r0, s0
 80078ba:	4639      	mov	r1, r7
 80078bc:	f7f8 fe48 	bl	8000550 <__aeabi_dmul>
 80078c0:	ec41 0b10 	vmov	d0, r0, r1
 80078c4:	f000 fe9c 	bl	8008600 <floor>
 80078c8:	4b7c      	ldr	r3, [pc, #496]	; (8007abc <__kernel_rem_pio2+0x32c>)
 80078ca:	ec51 0b10 	vmov	r0, r1, d0
 80078ce:	2200      	movs	r2, #0
 80078d0:	f7f8 fe3e 	bl	8000550 <__aeabi_dmul>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4630      	mov	r0, r6
 80078da:	4639      	mov	r1, r7
 80078dc:	f7f8 fc80 	bl	80001e0 <__aeabi_dsub>
 80078e0:	460f      	mov	r7, r1
 80078e2:	4606      	mov	r6, r0
 80078e4:	f7f9 f8e4 	bl	8000ab0 <__aeabi_d2iz>
 80078e8:	9004      	str	r0, [sp, #16]
 80078ea:	f7f8 fdc7 	bl	800047c <__aeabi_i2d>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4630      	mov	r0, r6
 80078f4:	4639      	mov	r1, r7
 80078f6:	f7f8 fc73 	bl	80001e0 <__aeabi_dsub>
 80078fa:	f1ba 0f00 	cmp.w	sl, #0
 80078fe:	4606      	mov	r6, r0
 8007900:	460f      	mov	r7, r1
 8007902:	dd6d      	ble.n	80079e0 <__kernel_rem_pio2+0x250>
 8007904:	1e62      	subs	r2, r4, #1
 8007906:	ab0e      	add	r3, sp, #56	; 0x38
 8007908:	9d04      	ldr	r5, [sp, #16]
 800790a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800790e:	f1ca 0118 	rsb	r1, sl, #24
 8007912:	fa40 f301 	asr.w	r3, r0, r1
 8007916:	441d      	add	r5, r3
 8007918:	408b      	lsls	r3, r1
 800791a:	1ac0      	subs	r0, r0, r3
 800791c:	ab0e      	add	r3, sp, #56	; 0x38
 800791e:	9504      	str	r5, [sp, #16]
 8007920:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007924:	f1ca 0317 	rsb	r3, sl, #23
 8007928:	fa40 fb03 	asr.w	fp, r0, r3
 800792c:	f1bb 0f00 	cmp.w	fp, #0
 8007930:	dd65      	ble.n	80079fe <__kernel_rem_pio2+0x26e>
 8007932:	9b04      	ldr	r3, [sp, #16]
 8007934:	2200      	movs	r2, #0
 8007936:	3301      	adds	r3, #1
 8007938:	9304      	str	r3, [sp, #16]
 800793a:	4615      	mov	r5, r2
 800793c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007940:	4294      	cmp	r4, r2
 8007942:	f300 809c 	bgt.w	8007a7e <__kernel_rem_pio2+0x2ee>
 8007946:	f1ba 0f00 	cmp.w	sl, #0
 800794a:	dd07      	ble.n	800795c <__kernel_rem_pio2+0x1cc>
 800794c:	f1ba 0f01 	cmp.w	sl, #1
 8007950:	f000 80c0 	beq.w	8007ad4 <__kernel_rem_pio2+0x344>
 8007954:	f1ba 0f02 	cmp.w	sl, #2
 8007958:	f000 80c6 	beq.w	8007ae8 <__kernel_rem_pio2+0x358>
 800795c:	f1bb 0f02 	cmp.w	fp, #2
 8007960:	d14d      	bne.n	80079fe <__kernel_rem_pio2+0x26e>
 8007962:	4632      	mov	r2, r6
 8007964:	463b      	mov	r3, r7
 8007966:	4956      	ldr	r1, [pc, #344]	; (8007ac0 <__kernel_rem_pio2+0x330>)
 8007968:	2000      	movs	r0, #0
 800796a:	f7f8 fc39 	bl	80001e0 <__aeabi_dsub>
 800796e:	4606      	mov	r6, r0
 8007970:	460f      	mov	r7, r1
 8007972:	2d00      	cmp	r5, #0
 8007974:	d043      	beq.n	80079fe <__kernel_rem_pio2+0x26e>
 8007976:	4650      	mov	r0, sl
 8007978:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007ab0 <__kernel_rem_pio2+0x320>
 800797c:	f000 fec0 	bl	8008700 <scalbn>
 8007980:	4630      	mov	r0, r6
 8007982:	4639      	mov	r1, r7
 8007984:	ec53 2b10 	vmov	r2, r3, d0
 8007988:	f7f8 fc2a 	bl	80001e0 <__aeabi_dsub>
 800798c:	4606      	mov	r6, r0
 800798e:	460f      	mov	r7, r1
 8007990:	e035      	b.n	80079fe <__kernel_rem_pio2+0x26e>
 8007992:	4b4c      	ldr	r3, [pc, #304]	; (8007ac4 <__kernel_rem_pio2+0x334>)
 8007994:	2200      	movs	r2, #0
 8007996:	4630      	mov	r0, r6
 8007998:	4639      	mov	r1, r7
 800799a:	f7f8 fdd9 	bl	8000550 <__aeabi_dmul>
 800799e:	f7f9 f887 	bl	8000ab0 <__aeabi_d2iz>
 80079a2:	f7f8 fd6b 	bl	800047c <__aeabi_i2d>
 80079a6:	4602      	mov	r2, r0
 80079a8:	460b      	mov	r3, r1
 80079aa:	ec43 2b18 	vmov	d8, r2, r3
 80079ae:	4b46      	ldr	r3, [pc, #280]	; (8007ac8 <__kernel_rem_pio2+0x338>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	f7f8 fdcd 	bl	8000550 <__aeabi_dmul>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4630      	mov	r0, r6
 80079bc:	4639      	mov	r1, r7
 80079be:	f7f8 fc0f 	bl	80001e0 <__aeabi_dsub>
 80079c2:	f7f9 f875 	bl	8000ab0 <__aeabi_d2iz>
 80079c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80079ca:	f84b 0b04 	str.w	r0, [fp], #4
 80079ce:	ec51 0b18 	vmov	r0, r1, d8
 80079d2:	f7f8 fc07 	bl	80001e4 <__adddf3>
 80079d6:	f109 39ff 	add.w	r9, r9, #4294967295
 80079da:	4606      	mov	r6, r0
 80079dc:	460f      	mov	r7, r1
 80079de:	e75b      	b.n	8007898 <__kernel_rem_pio2+0x108>
 80079e0:	d106      	bne.n	80079f0 <__kernel_rem_pio2+0x260>
 80079e2:	1e63      	subs	r3, r4, #1
 80079e4:	aa0e      	add	r2, sp, #56	; 0x38
 80079e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80079ea:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80079ee:	e79d      	b.n	800792c <__kernel_rem_pio2+0x19c>
 80079f0:	4b36      	ldr	r3, [pc, #216]	; (8007acc <__kernel_rem_pio2+0x33c>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	f7f9 f832 	bl	8000a5c <__aeabi_dcmpge>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d13d      	bne.n	8007a78 <__kernel_rem_pio2+0x2e8>
 80079fc:	4683      	mov	fp, r0
 80079fe:	2200      	movs	r2, #0
 8007a00:	2300      	movs	r3, #0
 8007a02:	4630      	mov	r0, r6
 8007a04:	4639      	mov	r1, r7
 8007a06:	f7f9 f80b 	bl	8000a20 <__aeabi_dcmpeq>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	f000 80c0 	beq.w	8007b90 <__kernel_rem_pio2+0x400>
 8007a10:	1e65      	subs	r5, r4, #1
 8007a12:	462b      	mov	r3, r5
 8007a14:	2200      	movs	r2, #0
 8007a16:	9902      	ldr	r1, [sp, #8]
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	da6c      	bge.n	8007af6 <__kernel_rem_pio2+0x366>
 8007a1c:	2a00      	cmp	r2, #0
 8007a1e:	f000 8089 	beq.w	8007b34 <__kernel_rem_pio2+0x3a4>
 8007a22:	ab0e      	add	r3, sp, #56	; 0x38
 8007a24:	f1aa 0a18 	sub.w	sl, sl, #24
 8007a28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f000 80ad 	beq.w	8007b8c <__kernel_rem_pio2+0x3fc>
 8007a32:	4650      	mov	r0, sl
 8007a34:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007ab0 <__kernel_rem_pio2+0x320>
 8007a38:	f000 fe62 	bl	8008700 <scalbn>
 8007a3c:	ab9a      	add	r3, sp, #616	; 0x268
 8007a3e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007a42:	ec57 6b10 	vmov	r6, r7, d0
 8007a46:	00ec      	lsls	r4, r5, #3
 8007a48:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007a4c:	46aa      	mov	sl, r5
 8007a4e:	f1ba 0f00 	cmp.w	sl, #0
 8007a52:	f280 80d6 	bge.w	8007c02 <__kernel_rem_pio2+0x472>
 8007a56:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007aa8 <__kernel_rem_pio2+0x318>
 8007a5a:	462e      	mov	r6, r5
 8007a5c:	2e00      	cmp	r6, #0
 8007a5e:	f2c0 8104 	blt.w	8007c6a <__kernel_rem_pio2+0x4da>
 8007a62:	ab72      	add	r3, sp, #456	; 0x1c8
 8007a64:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007a68:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007ad0 <__kernel_rem_pio2+0x340>
 8007a6c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007a70:	f04f 0800 	mov.w	r8, #0
 8007a74:	1baf      	subs	r7, r5, r6
 8007a76:	e0ea      	b.n	8007c4e <__kernel_rem_pio2+0x4be>
 8007a78:	f04f 0b02 	mov.w	fp, #2
 8007a7c:	e759      	b.n	8007932 <__kernel_rem_pio2+0x1a2>
 8007a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a82:	b955      	cbnz	r5, 8007a9a <__kernel_rem_pio2+0x30a>
 8007a84:	b123      	cbz	r3, 8007a90 <__kernel_rem_pio2+0x300>
 8007a86:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007a8a:	f8c8 3000 	str.w	r3, [r8]
 8007a8e:	2301      	movs	r3, #1
 8007a90:	3201      	adds	r2, #1
 8007a92:	f108 0804 	add.w	r8, r8, #4
 8007a96:	461d      	mov	r5, r3
 8007a98:	e752      	b.n	8007940 <__kernel_rem_pio2+0x1b0>
 8007a9a:	1acb      	subs	r3, r1, r3
 8007a9c:	f8c8 3000 	str.w	r3, [r8]
 8007aa0:	462b      	mov	r3, r5
 8007aa2:	e7f5      	b.n	8007a90 <__kernel_rem_pio2+0x300>
 8007aa4:	f3af 8000 	nop.w
	...
 8007ab4:	3ff00000 	.word	0x3ff00000
 8007ab8:	080090f8 	.word	0x080090f8
 8007abc:	40200000 	.word	0x40200000
 8007ac0:	3ff00000 	.word	0x3ff00000
 8007ac4:	3e700000 	.word	0x3e700000
 8007ac8:	41700000 	.word	0x41700000
 8007acc:	3fe00000 	.word	0x3fe00000
 8007ad0:	080090b8 	.word	0x080090b8
 8007ad4:	1e62      	subs	r2, r4, #1
 8007ad6:	ab0e      	add	r3, sp, #56	; 0x38
 8007ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007adc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007ae0:	a90e      	add	r1, sp, #56	; 0x38
 8007ae2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007ae6:	e739      	b.n	800795c <__kernel_rem_pio2+0x1cc>
 8007ae8:	1e62      	subs	r2, r4, #1
 8007aea:	ab0e      	add	r3, sp, #56	; 0x38
 8007aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007af4:	e7f4      	b.n	8007ae0 <__kernel_rem_pio2+0x350>
 8007af6:	a90e      	add	r1, sp, #56	; 0x38
 8007af8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	430a      	orrs	r2, r1
 8007b00:	e789      	b.n	8007a16 <__kernel_rem_pio2+0x286>
 8007b02:	3301      	adds	r3, #1
 8007b04:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007b08:	2900      	cmp	r1, #0
 8007b0a:	d0fa      	beq.n	8007b02 <__kernel_rem_pio2+0x372>
 8007b0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b0e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007b12:	446a      	add	r2, sp
 8007b14:	3a98      	subs	r2, #152	; 0x98
 8007b16:	920a      	str	r2, [sp, #40]	; 0x28
 8007b18:	9a08      	ldr	r2, [sp, #32]
 8007b1a:	18e3      	adds	r3, r4, r3
 8007b1c:	18a5      	adds	r5, r4, r2
 8007b1e:	aa22      	add	r2, sp, #136	; 0x88
 8007b20:	f104 0801 	add.w	r8, r4, #1
 8007b24:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007b28:	9304      	str	r3, [sp, #16]
 8007b2a:	9b04      	ldr	r3, [sp, #16]
 8007b2c:	4543      	cmp	r3, r8
 8007b2e:	da04      	bge.n	8007b3a <__kernel_rem_pio2+0x3aa>
 8007b30:	461c      	mov	r4, r3
 8007b32:	e6a3      	b.n	800787c <__kernel_rem_pio2+0xec>
 8007b34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b36:	2301      	movs	r3, #1
 8007b38:	e7e4      	b.n	8007b04 <__kernel_rem_pio2+0x374>
 8007b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b3c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007b40:	f7f8 fc9c 	bl	800047c <__aeabi_i2d>
 8007b44:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b4a:	46ab      	mov	fp, r5
 8007b4c:	461c      	mov	r4, r3
 8007b4e:	f04f 0900 	mov.w	r9, #0
 8007b52:	2600      	movs	r6, #0
 8007b54:	2700      	movs	r7, #0
 8007b56:	9b06      	ldr	r3, [sp, #24]
 8007b58:	4599      	cmp	r9, r3
 8007b5a:	dd06      	ble.n	8007b6a <__kernel_rem_pio2+0x3da>
 8007b5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b5e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007b62:	f108 0801 	add.w	r8, r8, #1
 8007b66:	930a      	str	r3, [sp, #40]	; 0x28
 8007b68:	e7df      	b.n	8007b2a <__kernel_rem_pio2+0x39a>
 8007b6a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007b6e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007b72:	f7f8 fced 	bl	8000550 <__aeabi_dmul>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	4639      	mov	r1, r7
 8007b7e:	f7f8 fb31 	bl	80001e4 <__adddf3>
 8007b82:	f109 0901 	add.w	r9, r9, #1
 8007b86:	4606      	mov	r6, r0
 8007b88:	460f      	mov	r7, r1
 8007b8a:	e7e4      	b.n	8007b56 <__kernel_rem_pio2+0x3c6>
 8007b8c:	3d01      	subs	r5, #1
 8007b8e:	e748      	b.n	8007a22 <__kernel_rem_pio2+0x292>
 8007b90:	ec47 6b10 	vmov	d0, r6, r7
 8007b94:	f1ca 0000 	rsb	r0, sl, #0
 8007b98:	f000 fdb2 	bl	8008700 <scalbn>
 8007b9c:	ec57 6b10 	vmov	r6, r7, d0
 8007ba0:	4ba0      	ldr	r3, [pc, #640]	; (8007e24 <__kernel_rem_pio2+0x694>)
 8007ba2:	ee10 0a10 	vmov	r0, s0
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	4639      	mov	r1, r7
 8007baa:	f7f8 ff57 	bl	8000a5c <__aeabi_dcmpge>
 8007bae:	b1f8      	cbz	r0, 8007bf0 <__kernel_rem_pio2+0x460>
 8007bb0:	4b9d      	ldr	r3, [pc, #628]	; (8007e28 <__kernel_rem_pio2+0x698>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	f7f8 fcca 	bl	8000550 <__aeabi_dmul>
 8007bbc:	f7f8 ff78 	bl	8000ab0 <__aeabi_d2iz>
 8007bc0:	4680      	mov	r8, r0
 8007bc2:	f7f8 fc5b 	bl	800047c <__aeabi_i2d>
 8007bc6:	4b97      	ldr	r3, [pc, #604]	; (8007e24 <__kernel_rem_pio2+0x694>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f7f8 fcc1 	bl	8000550 <__aeabi_dmul>
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f7f8 fb03 	bl	80001e0 <__aeabi_dsub>
 8007bda:	f7f8 ff69 	bl	8000ab0 <__aeabi_d2iz>
 8007bde:	1c65      	adds	r5, r4, #1
 8007be0:	ab0e      	add	r3, sp, #56	; 0x38
 8007be2:	f10a 0a18 	add.w	sl, sl, #24
 8007be6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007bea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007bee:	e720      	b.n	8007a32 <__kernel_rem_pio2+0x2a2>
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	4639      	mov	r1, r7
 8007bf4:	f7f8 ff5c 	bl	8000ab0 <__aeabi_d2iz>
 8007bf8:	ab0e      	add	r3, sp, #56	; 0x38
 8007bfa:	4625      	mov	r5, r4
 8007bfc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007c00:	e717      	b.n	8007a32 <__kernel_rem_pio2+0x2a2>
 8007c02:	ab0e      	add	r3, sp, #56	; 0x38
 8007c04:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007c08:	f7f8 fc38 	bl	800047c <__aeabi_i2d>
 8007c0c:	4632      	mov	r2, r6
 8007c0e:	463b      	mov	r3, r7
 8007c10:	f7f8 fc9e 	bl	8000550 <__aeabi_dmul>
 8007c14:	4b84      	ldr	r3, [pc, #528]	; (8007e28 <__kernel_rem_pio2+0x698>)
 8007c16:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	4630      	mov	r0, r6
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 fc96 	bl	8000550 <__aeabi_dmul>
 8007c24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c28:	4606      	mov	r6, r0
 8007c2a:	460f      	mov	r7, r1
 8007c2c:	e70f      	b.n	8007a4e <__kernel_rem_pio2+0x2be>
 8007c2e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007c32:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007c36:	f7f8 fc8b 	bl	8000550 <__aeabi_dmul>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c42:	f7f8 facf 	bl	80001e4 <__adddf3>
 8007c46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007c4a:	f108 0801 	add.w	r8, r8, #1
 8007c4e:	9b02      	ldr	r3, [sp, #8]
 8007c50:	4598      	cmp	r8, r3
 8007c52:	dc01      	bgt.n	8007c58 <__kernel_rem_pio2+0x4c8>
 8007c54:	45b8      	cmp	r8, r7
 8007c56:	ddea      	ble.n	8007c2e <__kernel_rem_pio2+0x49e>
 8007c58:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007c5c:	ab4a      	add	r3, sp, #296	; 0x128
 8007c5e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007c62:	ed87 7b00 	vstr	d7, [r7]
 8007c66:	3e01      	subs	r6, #1
 8007c68:	e6f8      	b.n	8007a5c <__kernel_rem_pio2+0x2cc>
 8007c6a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	dc0b      	bgt.n	8007c88 <__kernel_rem_pio2+0x4f8>
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	dc35      	bgt.n	8007ce0 <__kernel_rem_pio2+0x550>
 8007c74:	d059      	beq.n	8007d2a <__kernel_rem_pio2+0x59a>
 8007c76:	9b04      	ldr	r3, [sp, #16]
 8007c78:	f003 0007 	and.w	r0, r3, #7
 8007c7c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007c80:	ecbd 8b02 	vpop	{d8}
 8007c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c88:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d1f3      	bne.n	8007c76 <__kernel_rem_pio2+0x4e6>
 8007c8e:	ab4a      	add	r3, sp, #296	; 0x128
 8007c90:	4423      	add	r3, r4
 8007c92:	9306      	str	r3, [sp, #24]
 8007c94:	461c      	mov	r4, r3
 8007c96:	469a      	mov	sl, r3
 8007c98:	9502      	str	r5, [sp, #8]
 8007c9a:	9b02      	ldr	r3, [sp, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f1aa 0a08 	sub.w	sl, sl, #8
 8007ca2:	dc6b      	bgt.n	8007d7c <__kernel_rem_pio2+0x5ec>
 8007ca4:	46aa      	mov	sl, r5
 8007ca6:	f1ba 0f01 	cmp.w	sl, #1
 8007caa:	f1a4 0408 	sub.w	r4, r4, #8
 8007cae:	f300 8085 	bgt.w	8007dbc <__kernel_rem_pio2+0x62c>
 8007cb2:	9c06      	ldr	r4, [sp, #24]
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	3408      	adds	r4, #8
 8007cb8:	2100      	movs	r1, #0
 8007cba:	2d01      	cmp	r5, #1
 8007cbc:	f300 809d 	bgt.w	8007dfa <__kernel_rem_pio2+0x66a>
 8007cc0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007cc4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007cc8:	f1bb 0f00 	cmp.w	fp, #0
 8007ccc:	f040 809b 	bne.w	8007e06 <__kernel_rem_pio2+0x676>
 8007cd0:	9b01      	ldr	r3, [sp, #4]
 8007cd2:	e9c3 5600 	strd	r5, r6, [r3]
 8007cd6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007cda:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007cde:	e7ca      	b.n	8007c76 <__kernel_rem_pio2+0x4e6>
 8007ce0:	3408      	adds	r4, #8
 8007ce2:	ab4a      	add	r3, sp, #296	; 0x128
 8007ce4:	441c      	add	r4, r3
 8007ce6:	462e      	mov	r6, r5
 8007ce8:	2000      	movs	r0, #0
 8007cea:	2100      	movs	r1, #0
 8007cec:	2e00      	cmp	r6, #0
 8007cee:	da36      	bge.n	8007d5e <__kernel_rem_pio2+0x5ce>
 8007cf0:	f1bb 0f00 	cmp.w	fp, #0
 8007cf4:	d039      	beq.n	8007d6a <__kernel_rem_pio2+0x5da>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cfc:	9c01      	ldr	r4, [sp, #4]
 8007cfe:	e9c4 2300 	strd	r2, r3, [r4]
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007d0a:	f7f8 fa69 	bl	80001e0 <__aeabi_dsub>
 8007d0e:	ae4c      	add	r6, sp, #304	; 0x130
 8007d10:	2401      	movs	r4, #1
 8007d12:	42a5      	cmp	r5, r4
 8007d14:	da2c      	bge.n	8007d70 <__kernel_rem_pio2+0x5e0>
 8007d16:	f1bb 0f00 	cmp.w	fp, #0
 8007d1a:	d002      	beq.n	8007d22 <__kernel_rem_pio2+0x592>
 8007d1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d20:	4619      	mov	r1, r3
 8007d22:	9b01      	ldr	r3, [sp, #4]
 8007d24:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007d28:	e7a5      	b.n	8007c76 <__kernel_rem_pio2+0x4e6>
 8007d2a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007d2e:	eb0d 0403 	add.w	r4, sp, r3
 8007d32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007d36:	2000      	movs	r0, #0
 8007d38:	2100      	movs	r1, #0
 8007d3a:	2d00      	cmp	r5, #0
 8007d3c:	da09      	bge.n	8007d52 <__kernel_rem_pio2+0x5c2>
 8007d3e:	f1bb 0f00 	cmp.w	fp, #0
 8007d42:	d002      	beq.n	8007d4a <__kernel_rem_pio2+0x5ba>
 8007d44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d48:	4619      	mov	r1, r3
 8007d4a:	9b01      	ldr	r3, [sp, #4]
 8007d4c:	e9c3 0100 	strd	r0, r1, [r3]
 8007d50:	e791      	b.n	8007c76 <__kernel_rem_pio2+0x4e6>
 8007d52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007d56:	f7f8 fa45 	bl	80001e4 <__adddf3>
 8007d5a:	3d01      	subs	r5, #1
 8007d5c:	e7ed      	b.n	8007d3a <__kernel_rem_pio2+0x5aa>
 8007d5e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007d62:	f7f8 fa3f 	bl	80001e4 <__adddf3>
 8007d66:	3e01      	subs	r6, #1
 8007d68:	e7c0      	b.n	8007cec <__kernel_rem_pio2+0x55c>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	e7c5      	b.n	8007cfc <__kernel_rem_pio2+0x56c>
 8007d70:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007d74:	f7f8 fa36 	bl	80001e4 <__adddf3>
 8007d78:	3401      	adds	r4, #1
 8007d7a:	e7ca      	b.n	8007d12 <__kernel_rem_pio2+0x582>
 8007d7c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d80:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007d84:	9b02      	ldr	r3, [sp, #8]
 8007d86:	3b01      	subs	r3, #1
 8007d88:	9302      	str	r3, [sp, #8]
 8007d8a:	4632      	mov	r2, r6
 8007d8c:	463b      	mov	r3, r7
 8007d8e:	4640      	mov	r0, r8
 8007d90:	4649      	mov	r1, r9
 8007d92:	f7f8 fa27 	bl	80001e4 <__adddf3>
 8007d96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	4640      	mov	r0, r8
 8007da0:	4649      	mov	r1, r9
 8007da2:	f7f8 fa1d 	bl	80001e0 <__aeabi_dsub>
 8007da6:	4632      	mov	r2, r6
 8007da8:	463b      	mov	r3, r7
 8007daa:	f7f8 fa1b 	bl	80001e4 <__adddf3>
 8007dae:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007db2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007db6:	ed8a 7b00 	vstr	d7, [sl]
 8007dba:	e76e      	b.n	8007c9a <__kernel_rem_pio2+0x50a>
 8007dbc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007dc0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007dc4:	4640      	mov	r0, r8
 8007dc6:	4632      	mov	r2, r6
 8007dc8:	463b      	mov	r3, r7
 8007dca:	4649      	mov	r1, r9
 8007dcc:	f7f8 fa0a 	bl	80001e4 <__adddf3>
 8007dd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4640      	mov	r0, r8
 8007dda:	4649      	mov	r1, r9
 8007ddc:	f7f8 fa00 	bl	80001e0 <__aeabi_dsub>
 8007de0:	4632      	mov	r2, r6
 8007de2:	463b      	mov	r3, r7
 8007de4:	f7f8 f9fe 	bl	80001e4 <__adddf3>
 8007de8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007df0:	ed84 7b00 	vstr	d7, [r4]
 8007df4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007df8:	e755      	b.n	8007ca6 <__kernel_rem_pio2+0x516>
 8007dfa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007dfe:	f7f8 f9f1 	bl	80001e4 <__adddf3>
 8007e02:	3d01      	subs	r5, #1
 8007e04:	e759      	b.n	8007cba <__kernel_rem_pio2+0x52a>
 8007e06:	9b01      	ldr	r3, [sp, #4]
 8007e08:	9a01      	ldr	r2, [sp, #4]
 8007e0a:	601d      	str	r5, [r3, #0]
 8007e0c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007e10:	605c      	str	r4, [r3, #4]
 8007e12:	609f      	str	r7, [r3, #8]
 8007e14:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007e18:	60d3      	str	r3, [r2, #12]
 8007e1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e1e:	6110      	str	r0, [r2, #16]
 8007e20:	6153      	str	r3, [r2, #20]
 8007e22:	e728      	b.n	8007c76 <__kernel_rem_pio2+0x4e6>
 8007e24:	41700000 	.word	0x41700000
 8007e28:	3e700000 	.word	0x3e700000
 8007e2c:	00000000 	.word	0x00000000

08007e30 <__kernel_sin>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	ed2d 8b04 	vpush	{d8-d9}
 8007e38:	eeb0 8a41 	vmov.f32	s16, s2
 8007e3c:	eef0 8a61 	vmov.f32	s17, s3
 8007e40:	ec55 4b10 	vmov	r4, r5, d0
 8007e44:	b083      	sub	sp, #12
 8007e46:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007e4a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007e4e:	9001      	str	r0, [sp, #4]
 8007e50:	da06      	bge.n	8007e60 <__kernel_sin+0x30>
 8007e52:	ee10 0a10 	vmov	r0, s0
 8007e56:	4629      	mov	r1, r5
 8007e58:	f7f8 fe2a 	bl	8000ab0 <__aeabi_d2iz>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d051      	beq.n	8007f04 <__kernel_sin+0xd4>
 8007e60:	4622      	mov	r2, r4
 8007e62:	462b      	mov	r3, r5
 8007e64:	4620      	mov	r0, r4
 8007e66:	4629      	mov	r1, r5
 8007e68:	f7f8 fb72 	bl	8000550 <__aeabi_dmul>
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	468b      	mov	fp, r1
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4620      	mov	r0, r4
 8007e76:	4629      	mov	r1, r5
 8007e78:	f7f8 fb6a 	bl	8000550 <__aeabi_dmul>
 8007e7c:	a341      	add	r3, pc, #260	; (adr r3, 8007f84 <__kernel_sin+0x154>)
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	4680      	mov	r8, r0
 8007e84:	4689      	mov	r9, r1
 8007e86:	4650      	mov	r0, sl
 8007e88:	4659      	mov	r1, fp
 8007e8a:	f7f8 fb61 	bl	8000550 <__aeabi_dmul>
 8007e8e:	a33f      	add	r3, pc, #252	; (adr r3, 8007f8c <__kernel_sin+0x15c>)
 8007e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e94:	f7f8 f9a4 	bl	80001e0 <__aeabi_dsub>
 8007e98:	4652      	mov	r2, sl
 8007e9a:	465b      	mov	r3, fp
 8007e9c:	f7f8 fb58 	bl	8000550 <__aeabi_dmul>
 8007ea0:	a33c      	add	r3, pc, #240	; (adr r3, 8007f94 <__kernel_sin+0x164>)
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f7f8 f99d 	bl	80001e4 <__adddf3>
 8007eaa:	4652      	mov	r2, sl
 8007eac:	465b      	mov	r3, fp
 8007eae:	f7f8 fb4f 	bl	8000550 <__aeabi_dmul>
 8007eb2:	a33a      	add	r3, pc, #232	; (adr r3, 8007f9c <__kernel_sin+0x16c>)
 8007eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb8:	f7f8 f992 	bl	80001e0 <__aeabi_dsub>
 8007ebc:	4652      	mov	r2, sl
 8007ebe:	465b      	mov	r3, fp
 8007ec0:	f7f8 fb46 	bl	8000550 <__aeabi_dmul>
 8007ec4:	a337      	add	r3, pc, #220	; (adr r3, 8007fa4 <__kernel_sin+0x174>)
 8007ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eca:	f7f8 f98b 	bl	80001e4 <__adddf3>
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	4606      	mov	r6, r0
 8007ed2:	460f      	mov	r7, r1
 8007ed4:	b9eb      	cbnz	r3, 8007f12 <__kernel_sin+0xe2>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4650      	mov	r0, sl
 8007edc:	4659      	mov	r1, fp
 8007ede:	f7f8 fb37 	bl	8000550 <__aeabi_dmul>
 8007ee2:	a325      	add	r3, pc, #148	; (adr r3, 8007f78 <__kernel_sin+0x148>)
 8007ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee8:	f7f8 f97a 	bl	80001e0 <__aeabi_dsub>
 8007eec:	4642      	mov	r2, r8
 8007eee:	464b      	mov	r3, r9
 8007ef0:	f7f8 fb2e 	bl	8000550 <__aeabi_dmul>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	4620      	mov	r0, r4
 8007efa:	4629      	mov	r1, r5
 8007efc:	f7f8 f972 	bl	80001e4 <__adddf3>
 8007f00:	4604      	mov	r4, r0
 8007f02:	460d      	mov	r5, r1
 8007f04:	ec45 4b10 	vmov	d0, r4, r5
 8007f08:	b003      	add	sp, #12
 8007f0a:	ecbd 8b04 	vpop	{d8-d9}
 8007f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f12:	4b1b      	ldr	r3, [pc, #108]	; (8007f80 <__kernel_sin+0x150>)
 8007f14:	ec51 0b18 	vmov	r0, r1, d8
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f7f8 fb19 	bl	8000550 <__aeabi_dmul>
 8007f1e:	4632      	mov	r2, r6
 8007f20:	ec41 0b19 	vmov	d9, r0, r1
 8007f24:	463b      	mov	r3, r7
 8007f26:	4640      	mov	r0, r8
 8007f28:	4649      	mov	r1, r9
 8007f2a:	f7f8 fb11 	bl	8000550 <__aeabi_dmul>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	ec51 0b19 	vmov	r0, r1, d9
 8007f36:	f7f8 f953 	bl	80001e0 <__aeabi_dsub>
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	465b      	mov	r3, fp
 8007f3e:	f7f8 fb07 	bl	8000550 <__aeabi_dmul>
 8007f42:	ec53 2b18 	vmov	r2, r3, d8
 8007f46:	f7f8 f94b 	bl	80001e0 <__aeabi_dsub>
 8007f4a:	a30b      	add	r3, pc, #44	; (adr r3, 8007f78 <__kernel_sin+0x148>)
 8007f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f50:	4606      	mov	r6, r0
 8007f52:	460f      	mov	r7, r1
 8007f54:	4640      	mov	r0, r8
 8007f56:	4649      	mov	r1, r9
 8007f58:	f7f8 fafa 	bl	8000550 <__aeabi_dmul>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	460b      	mov	r3, r1
 8007f60:	4630      	mov	r0, r6
 8007f62:	4639      	mov	r1, r7
 8007f64:	f7f8 f93e 	bl	80001e4 <__adddf3>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	4629      	mov	r1, r5
 8007f70:	f7f8 f936 	bl	80001e0 <__aeabi_dsub>
 8007f74:	e7c4      	b.n	8007f00 <__kernel_sin+0xd0>
 8007f76:	bf00      	nop
 8007f78:	55555549 	.word	0x55555549
 8007f7c:	3fc55555 	.word	0x3fc55555
 8007f80:	3fe00000 	.word	0x3fe00000
 8007f84:	5acfd57c 	.word	0x5acfd57c
 8007f88:	3de5d93a 	.word	0x3de5d93a
 8007f8c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007f90:	3e5ae5e6 	.word	0x3e5ae5e6
 8007f94:	57b1fe7d 	.word	0x57b1fe7d
 8007f98:	3ec71de3 	.word	0x3ec71de3
 8007f9c:	19c161d5 	.word	0x19c161d5
 8007fa0:	3f2a01a0 	.word	0x3f2a01a0
 8007fa4:	1110f8a6 	.word	0x1110f8a6
 8007fa8:	3f811111 	.word	0x3f811111

08007fac <__kernel_cosf>:
 8007fac:	ee10 3a10 	vmov	r3, s0
 8007fb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fb4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007fb8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007fbc:	da05      	bge.n	8007fca <__kernel_cosf+0x1e>
 8007fbe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007fc2:	ee17 2a90 	vmov	r2, s15
 8007fc6:	2a00      	cmp	r2, #0
 8007fc8:	d03d      	beq.n	8008046 <__kernel_cosf+0x9a>
 8007fca:	ee60 5a00 	vmul.f32	s11, s0, s0
 8007fce:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800804c <__kernel_cosf+0xa0>
 8007fd2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008050 <__kernel_cosf+0xa4>
 8007fd6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008054 <__kernel_cosf+0xa8>
 8007fda:	4a1f      	ldr	r2, [pc, #124]	; (8008058 <__kernel_cosf+0xac>)
 8007fdc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800805c <__kernel_cosf+0xb0>
 8007fe6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007fea:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008060 <__kernel_cosf+0xb4>
 8007fee:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8007ff2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008064 <__kernel_cosf+0xb8>
 8007ff6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007ffa:	eeb0 7a66 	vmov.f32	s14, s13
 8007ffe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008002:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008006:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800800a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800800e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008012:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008016:	dc04      	bgt.n	8008022 <__kernel_cosf+0x76>
 8008018:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800801c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008020:	4770      	bx	lr
 8008022:	4a11      	ldr	r2, [pc, #68]	; (8008068 <__kernel_cosf+0xbc>)
 8008024:	4293      	cmp	r3, r2
 8008026:	bfda      	itte	le
 8008028:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800802c:	ee06 3a90 	vmovle	s13, r3
 8008030:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008034:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008038:	ee36 0a66 	vsub.f32	s0, s12, s13
 800803c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008040:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008044:	4770      	bx	lr
 8008046:	eeb0 0a46 	vmov.f32	s0, s12
 800804a:	4770      	bx	lr
 800804c:	ad47d74e 	.word	0xad47d74e
 8008050:	310f74f6 	.word	0x310f74f6
 8008054:	3d2aaaab 	.word	0x3d2aaaab
 8008058:	3e999999 	.word	0x3e999999
 800805c:	b493f27c 	.word	0xb493f27c
 8008060:	37d00d01 	.word	0x37d00d01
 8008064:	bab60b61 	.word	0xbab60b61
 8008068:	3f480000 	.word	0x3f480000

0800806c <__kernel_rem_pio2f>:
 800806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	ed2d 8b04 	vpush	{d8-d9}
 8008074:	b0d9      	sub	sp, #356	; 0x164
 8008076:	4688      	mov	r8, r1
 8008078:	9002      	str	r0, [sp, #8]
 800807a:	49bb      	ldr	r1, [pc, #748]	; (8008368 <__kernel_rem_pio2f+0x2fc>)
 800807c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800807e:	9301      	str	r3, [sp, #4]
 8008080:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008084:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008088:	1e59      	subs	r1, r3, #1
 800808a:	1d13      	adds	r3, r2, #4
 800808c:	db27      	blt.n	80080de <__kernel_rem_pio2f+0x72>
 800808e:	f1b2 0b03 	subs.w	fp, r2, #3
 8008092:	bf48      	it	mi
 8008094:	f102 0b04 	addmi.w	fp, r2, #4
 8008098:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800809c:	1c45      	adds	r5, r0, #1
 800809e:	00ec      	lsls	r4, r5, #3
 80080a0:	1a47      	subs	r7, r0, r1
 80080a2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008378 <__kernel_rem_pio2f+0x30c>
 80080a6:	9403      	str	r4, [sp, #12]
 80080a8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80080ac:	eb0a 0c01 	add.w	ip, sl, r1
 80080b0:	ae1c      	add	r6, sp, #112	; 0x70
 80080b2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80080b6:	2400      	movs	r4, #0
 80080b8:	4564      	cmp	r4, ip
 80080ba:	dd12      	ble.n	80080e2 <__kernel_rem_pio2f+0x76>
 80080bc:	9b01      	ldr	r3, [sp, #4]
 80080be:	ac1c      	add	r4, sp, #112	; 0x70
 80080c0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80080c4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80080c8:	f04f 0c00 	mov.w	ip, #0
 80080cc:	45d4      	cmp	ip, sl
 80080ce:	dc27      	bgt.n	8008120 <__kernel_rem_pio2f+0xb4>
 80080d0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80080d4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008378 <__kernel_rem_pio2f+0x30c>
 80080d8:	4627      	mov	r7, r4
 80080da:	2600      	movs	r6, #0
 80080dc:	e016      	b.n	800810c <__kernel_rem_pio2f+0xa0>
 80080de:	2000      	movs	r0, #0
 80080e0:	e7dc      	b.n	800809c <__kernel_rem_pio2f+0x30>
 80080e2:	42e7      	cmn	r7, r4
 80080e4:	bf5d      	ittte	pl
 80080e6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 80080ea:	ee07 3a90 	vmovpl	s15, r3
 80080ee:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80080f2:	eef0 7a47 	vmovmi.f32	s15, s14
 80080f6:	ece6 7a01 	vstmia	r6!, {s15}
 80080fa:	3401      	adds	r4, #1
 80080fc:	e7dc      	b.n	80080b8 <__kernel_rem_pio2f+0x4c>
 80080fe:	ecf9 6a01 	vldmia	r9!, {s13}
 8008102:	ed97 7a00 	vldr	s14, [r7]
 8008106:	eee6 7a87 	vfma.f32	s15, s13, s14
 800810a:	3601      	adds	r6, #1
 800810c:	428e      	cmp	r6, r1
 800810e:	f1a7 0704 	sub.w	r7, r7, #4
 8008112:	ddf4      	ble.n	80080fe <__kernel_rem_pio2f+0x92>
 8008114:	eceb 7a01 	vstmia	fp!, {s15}
 8008118:	f10c 0c01 	add.w	ip, ip, #1
 800811c:	3404      	adds	r4, #4
 800811e:	e7d5      	b.n	80080cc <__kernel_rem_pio2f+0x60>
 8008120:	ab08      	add	r3, sp, #32
 8008122:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008126:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008374 <__kernel_rem_pio2f+0x308>
 800812a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008370 <__kernel_rem_pio2f+0x304>
 800812e:	9304      	str	r3, [sp, #16]
 8008130:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008134:	4656      	mov	r6, sl
 8008136:	00b3      	lsls	r3, r6, #2
 8008138:	9305      	str	r3, [sp, #20]
 800813a:	ab58      	add	r3, sp, #352	; 0x160
 800813c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008140:	ac08      	add	r4, sp, #32
 8008142:	ab44      	add	r3, sp, #272	; 0x110
 8008144:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008148:	46a4      	mov	ip, r4
 800814a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800814e:	4637      	mov	r7, r6
 8008150:	2f00      	cmp	r7, #0
 8008152:	f1a0 0004 	sub.w	r0, r0, #4
 8008156:	dc4f      	bgt.n	80081f8 <__kernel_rem_pio2f+0x18c>
 8008158:	4628      	mov	r0, r5
 800815a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800815e:	f000 fc73 	bl	8008a48 <scalbnf>
 8008162:	eeb0 8a40 	vmov.f32	s16, s0
 8008166:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800816a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800816e:	f000 fc29 	bl	80089c4 <floorf>
 8008172:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008176:	eea0 8a67 	vfms.f32	s16, s0, s15
 800817a:	2d00      	cmp	r5, #0
 800817c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008180:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008184:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008188:	ee17 9a90 	vmov	r9, s15
 800818c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008190:	dd44      	ble.n	800821c <__kernel_rem_pio2f+0x1b0>
 8008192:	f106 3cff 	add.w	ip, r6, #4294967295
 8008196:	ab08      	add	r3, sp, #32
 8008198:	f1c5 0e08 	rsb	lr, r5, #8
 800819c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80081a0:	fa47 f00e 	asr.w	r0, r7, lr
 80081a4:	4481      	add	r9, r0
 80081a6:	fa00 f00e 	lsl.w	r0, r0, lr
 80081aa:	1a3f      	subs	r7, r7, r0
 80081ac:	f1c5 0007 	rsb	r0, r5, #7
 80081b0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80081b4:	4107      	asrs	r7, r0
 80081b6:	2f00      	cmp	r7, #0
 80081b8:	dd3f      	ble.n	800823a <__kernel_rem_pio2f+0x1ce>
 80081ba:	f04f 0e00 	mov.w	lr, #0
 80081be:	f109 0901 	add.w	r9, r9, #1
 80081c2:	4673      	mov	r3, lr
 80081c4:	4576      	cmp	r6, lr
 80081c6:	dc6b      	bgt.n	80082a0 <__kernel_rem_pio2f+0x234>
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	dd04      	ble.n	80081d6 <__kernel_rem_pio2f+0x16a>
 80081cc:	2d01      	cmp	r5, #1
 80081ce:	d078      	beq.n	80082c2 <__kernel_rem_pio2f+0x256>
 80081d0:	2d02      	cmp	r5, #2
 80081d2:	f000 8081 	beq.w	80082d8 <__kernel_rem_pio2f+0x26c>
 80081d6:	2f02      	cmp	r7, #2
 80081d8:	d12f      	bne.n	800823a <__kernel_rem_pio2f+0x1ce>
 80081da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80081de:	ee30 8a48 	vsub.f32	s16, s0, s16
 80081e2:	b353      	cbz	r3, 800823a <__kernel_rem_pio2f+0x1ce>
 80081e4:	4628      	mov	r0, r5
 80081e6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80081ea:	f000 fc2d 	bl	8008a48 <scalbnf>
 80081ee:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80081f2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80081f6:	e020      	b.n	800823a <__kernel_rem_pio2f+0x1ce>
 80081f8:	ee60 7a28 	vmul.f32	s15, s0, s17
 80081fc:	3f01      	subs	r7, #1
 80081fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008206:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800820a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800820e:	ecac 0a01 	vstmia	ip!, {s0}
 8008212:	ed90 0a00 	vldr	s0, [r0]
 8008216:	ee37 0a80 	vadd.f32	s0, s15, s0
 800821a:	e799      	b.n	8008150 <__kernel_rem_pio2f+0xe4>
 800821c:	d105      	bne.n	800822a <__kernel_rem_pio2f+0x1be>
 800821e:	1e70      	subs	r0, r6, #1
 8008220:	ab08      	add	r3, sp, #32
 8008222:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008226:	11ff      	asrs	r7, r7, #7
 8008228:	e7c5      	b.n	80081b6 <__kernel_rem_pio2f+0x14a>
 800822a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800822e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008236:	da31      	bge.n	800829c <__kernel_rem_pio2f+0x230>
 8008238:	2700      	movs	r7, #0
 800823a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800823e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008242:	f040 809b 	bne.w	800837c <__kernel_rem_pio2f+0x310>
 8008246:	1e74      	subs	r4, r6, #1
 8008248:	46a4      	mov	ip, r4
 800824a:	2000      	movs	r0, #0
 800824c:	45d4      	cmp	ip, sl
 800824e:	da4a      	bge.n	80082e6 <__kernel_rem_pio2f+0x27a>
 8008250:	2800      	cmp	r0, #0
 8008252:	d07a      	beq.n	800834a <__kernel_rem_pio2f+0x2de>
 8008254:	ab08      	add	r3, sp, #32
 8008256:	3d08      	subs	r5, #8
 8008258:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f000 8081 	beq.w	8008364 <__kernel_rem_pio2f+0x2f8>
 8008262:	4628      	mov	r0, r5
 8008264:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008268:	00a5      	lsls	r5, r4, #2
 800826a:	f000 fbed 	bl	8008a48 <scalbnf>
 800826e:	aa44      	add	r2, sp, #272	; 0x110
 8008270:	1d2b      	adds	r3, r5, #4
 8008272:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008374 <__kernel_rem_pio2f+0x308>
 8008276:	18d1      	adds	r1, r2, r3
 8008278:	4622      	mov	r2, r4
 800827a:	2a00      	cmp	r2, #0
 800827c:	f280 80ae 	bge.w	80083dc <__kernel_rem_pio2f+0x370>
 8008280:	4622      	mov	r2, r4
 8008282:	2a00      	cmp	r2, #0
 8008284:	f2c0 80cc 	blt.w	8008420 <__kernel_rem_pio2f+0x3b4>
 8008288:	a944      	add	r1, sp, #272	; 0x110
 800828a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800828e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800836c <__kernel_rem_pio2f+0x300>
 8008292:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008378 <__kernel_rem_pio2f+0x30c>
 8008296:	2000      	movs	r0, #0
 8008298:	1aa1      	subs	r1, r4, r2
 800829a:	e0b6      	b.n	800840a <__kernel_rem_pio2f+0x39e>
 800829c:	2702      	movs	r7, #2
 800829e:	e78c      	b.n	80081ba <__kernel_rem_pio2f+0x14e>
 80082a0:	6820      	ldr	r0, [r4, #0]
 80082a2:	b94b      	cbnz	r3, 80082b8 <__kernel_rem_pio2f+0x24c>
 80082a4:	b118      	cbz	r0, 80082ae <__kernel_rem_pio2f+0x242>
 80082a6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80082aa:	6020      	str	r0, [r4, #0]
 80082ac:	2001      	movs	r0, #1
 80082ae:	f10e 0e01 	add.w	lr, lr, #1
 80082b2:	3404      	adds	r4, #4
 80082b4:	4603      	mov	r3, r0
 80082b6:	e785      	b.n	80081c4 <__kernel_rem_pio2f+0x158>
 80082b8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80082bc:	6020      	str	r0, [r4, #0]
 80082be:	4618      	mov	r0, r3
 80082c0:	e7f5      	b.n	80082ae <__kernel_rem_pio2f+0x242>
 80082c2:	1e74      	subs	r4, r6, #1
 80082c4:	a808      	add	r0, sp, #32
 80082c6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80082ca:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80082ce:	f10d 0c20 	add.w	ip, sp, #32
 80082d2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80082d6:	e77e      	b.n	80081d6 <__kernel_rem_pio2f+0x16a>
 80082d8:	1e74      	subs	r4, r6, #1
 80082da:	a808      	add	r0, sp, #32
 80082dc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80082e0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 80082e4:	e7f3      	b.n	80082ce <__kernel_rem_pio2f+0x262>
 80082e6:	ab08      	add	r3, sp, #32
 80082e8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80082ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80082f0:	4318      	orrs	r0, r3
 80082f2:	e7ab      	b.n	800824c <__kernel_rem_pio2f+0x1e0>
 80082f4:	f10c 0c01 	add.w	ip, ip, #1
 80082f8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80082fc:	2c00      	cmp	r4, #0
 80082fe:	d0f9      	beq.n	80082f4 <__kernel_rem_pio2f+0x288>
 8008300:	9b05      	ldr	r3, [sp, #20]
 8008302:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008306:	eb0d 0003 	add.w	r0, sp, r3
 800830a:	9b01      	ldr	r3, [sp, #4]
 800830c:	18f4      	adds	r4, r6, r3
 800830e:	ab1c      	add	r3, sp, #112	; 0x70
 8008310:	1c77      	adds	r7, r6, #1
 8008312:	384c      	subs	r0, #76	; 0x4c
 8008314:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008318:	4466      	add	r6, ip
 800831a:	42be      	cmp	r6, r7
 800831c:	f6ff af0b 	blt.w	8008136 <__kernel_rem_pio2f+0xca>
 8008320:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008324:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008328:	ee07 3a90 	vmov	s15, r3
 800832c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008330:	f04f 0c00 	mov.w	ip, #0
 8008334:	ece4 7a01 	vstmia	r4!, {s15}
 8008338:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008378 <__kernel_rem_pio2f+0x30c>
 800833c:	46a1      	mov	r9, r4
 800833e:	458c      	cmp	ip, r1
 8008340:	dd07      	ble.n	8008352 <__kernel_rem_pio2f+0x2e6>
 8008342:	ece0 7a01 	vstmia	r0!, {s15}
 8008346:	3701      	adds	r7, #1
 8008348:	e7e7      	b.n	800831a <__kernel_rem_pio2f+0x2ae>
 800834a:	9804      	ldr	r0, [sp, #16]
 800834c:	f04f 0c01 	mov.w	ip, #1
 8008350:	e7d2      	b.n	80082f8 <__kernel_rem_pio2f+0x28c>
 8008352:	ecfe 6a01 	vldmia	lr!, {s13}
 8008356:	ed39 7a01 	vldmdb	r9!, {s14}
 800835a:	f10c 0c01 	add.w	ip, ip, #1
 800835e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008362:	e7ec      	b.n	800833e <__kernel_rem_pio2f+0x2d2>
 8008364:	3c01      	subs	r4, #1
 8008366:	e775      	b.n	8008254 <__kernel_rem_pio2f+0x1e8>
 8008368:	08009134 	.word	0x08009134
 800836c:	08009108 	.word	0x08009108
 8008370:	43800000 	.word	0x43800000
 8008374:	3b800000 	.word	0x3b800000
 8008378:	00000000 	.word	0x00000000
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	eeb0 0a48 	vmov.f32	s0, s16
 8008382:	1a98      	subs	r0, r3, r2
 8008384:	f000 fb60 	bl	8008a48 <scalbnf>
 8008388:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008370 <__kernel_rem_pio2f+0x304>
 800838c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008394:	db19      	blt.n	80083ca <__kernel_rem_pio2f+0x35e>
 8008396:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008374 <__kernel_rem_pio2f+0x308>
 800839a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800839e:	aa08      	add	r2, sp, #32
 80083a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083a4:	1c74      	adds	r4, r6, #1
 80083a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083aa:	3508      	adds	r5, #8
 80083ac:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80083b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80083b8:	ee10 3a10 	vmov	r3, s0
 80083bc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80083c0:	ee17 3a90 	vmov	r3, s15
 80083c4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80083c8:	e74b      	b.n	8008262 <__kernel_rem_pio2f+0x1f6>
 80083ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80083ce:	aa08      	add	r2, sp, #32
 80083d0:	ee10 3a10 	vmov	r3, s0
 80083d4:	4634      	mov	r4, r6
 80083d6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80083da:	e742      	b.n	8008262 <__kernel_rem_pio2f+0x1f6>
 80083dc:	a808      	add	r0, sp, #32
 80083de:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80083e2:	9001      	str	r0, [sp, #4]
 80083e4:	ee07 0a90 	vmov	s15, r0
 80083e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083ec:	3a01      	subs	r2, #1
 80083ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80083f2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80083f6:	ed61 7a01 	vstmdb	r1!, {s15}
 80083fa:	e73e      	b.n	800827a <__kernel_rem_pio2f+0x20e>
 80083fc:	ecfc 6a01 	vldmia	ip!, {s13}
 8008400:	ecb6 7a01 	vldmia	r6!, {s14}
 8008404:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008408:	3001      	adds	r0, #1
 800840a:	4550      	cmp	r0, sl
 800840c:	dc01      	bgt.n	8008412 <__kernel_rem_pio2f+0x3a6>
 800840e:	4288      	cmp	r0, r1
 8008410:	ddf4      	ble.n	80083fc <__kernel_rem_pio2f+0x390>
 8008412:	a858      	add	r0, sp, #352	; 0x160
 8008414:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008418:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800841c:	3a01      	subs	r2, #1
 800841e:	e730      	b.n	8008282 <__kernel_rem_pio2f+0x216>
 8008420:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8008422:	2a02      	cmp	r2, #2
 8008424:	dc09      	bgt.n	800843a <__kernel_rem_pio2f+0x3ce>
 8008426:	2a00      	cmp	r2, #0
 8008428:	dc2a      	bgt.n	8008480 <__kernel_rem_pio2f+0x414>
 800842a:	d043      	beq.n	80084b4 <__kernel_rem_pio2f+0x448>
 800842c:	f009 0007 	and.w	r0, r9, #7
 8008430:	b059      	add	sp, #356	; 0x164
 8008432:	ecbd 8b04 	vpop	{d8-d9}
 8008436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800843a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800843c:	2b03      	cmp	r3, #3
 800843e:	d1f5      	bne.n	800842c <__kernel_rem_pio2f+0x3c0>
 8008440:	ab30      	add	r3, sp, #192	; 0xc0
 8008442:	442b      	add	r3, r5
 8008444:	461a      	mov	r2, r3
 8008446:	4619      	mov	r1, r3
 8008448:	4620      	mov	r0, r4
 800844a:	2800      	cmp	r0, #0
 800844c:	f1a1 0104 	sub.w	r1, r1, #4
 8008450:	dc51      	bgt.n	80084f6 <__kernel_rem_pio2f+0x48a>
 8008452:	4621      	mov	r1, r4
 8008454:	2901      	cmp	r1, #1
 8008456:	f1a2 0204 	sub.w	r2, r2, #4
 800845a:	dc5c      	bgt.n	8008516 <__kernel_rem_pio2f+0x4aa>
 800845c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008378 <__kernel_rem_pio2f+0x30c>
 8008460:	3304      	adds	r3, #4
 8008462:	2c01      	cmp	r4, #1
 8008464:	dc67      	bgt.n	8008536 <__kernel_rem_pio2f+0x4ca>
 8008466:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800846a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800846e:	2f00      	cmp	r7, #0
 8008470:	d167      	bne.n	8008542 <__kernel_rem_pio2f+0x4d6>
 8008472:	edc8 6a00 	vstr	s13, [r8]
 8008476:	ed88 7a01 	vstr	s14, [r8, #4]
 800847a:	edc8 7a02 	vstr	s15, [r8, #8]
 800847e:	e7d5      	b.n	800842c <__kernel_rem_pio2f+0x3c0>
 8008480:	aa30      	add	r2, sp, #192	; 0xc0
 8008482:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008378 <__kernel_rem_pio2f+0x30c>
 8008486:	4413      	add	r3, r2
 8008488:	4622      	mov	r2, r4
 800848a:	2a00      	cmp	r2, #0
 800848c:	da24      	bge.n	80084d8 <__kernel_rem_pio2f+0x46c>
 800848e:	b34f      	cbz	r7, 80084e4 <__kernel_rem_pio2f+0x478>
 8008490:	eef1 7a47 	vneg.f32	s15, s14
 8008494:	edc8 7a00 	vstr	s15, [r8]
 8008498:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800849c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084a0:	aa31      	add	r2, sp, #196	; 0xc4
 80084a2:	2301      	movs	r3, #1
 80084a4:	429c      	cmp	r4, r3
 80084a6:	da20      	bge.n	80084ea <__kernel_rem_pio2f+0x47e>
 80084a8:	b10f      	cbz	r7, 80084ae <__kernel_rem_pio2f+0x442>
 80084aa:	eef1 7a67 	vneg.f32	s15, s15
 80084ae:	edc8 7a01 	vstr	s15, [r8, #4]
 80084b2:	e7bb      	b.n	800842c <__kernel_rem_pio2f+0x3c0>
 80084b4:	aa30      	add	r2, sp, #192	; 0xc0
 80084b6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008378 <__kernel_rem_pio2f+0x30c>
 80084ba:	4413      	add	r3, r2
 80084bc:	2c00      	cmp	r4, #0
 80084be:	da05      	bge.n	80084cc <__kernel_rem_pio2f+0x460>
 80084c0:	b10f      	cbz	r7, 80084c6 <__kernel_rem_pio2f+0x45a>
 80084c2:	eef1 7a67 	vneg.f32	s15, s15
 80084c6:	edc8 7a00 	vstr	s15, [r8]
 80084ca:	e7af      	b.n	800842c <__kernel_rem_pio2f+0x3c0>
 80084cc:	ed33 7a01 	vldmdb	r3!, {s14}
 80084d0:	3c01      	subs	r4, #1
 80084d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084d6:	e7f1      	b.n	80084bc <__kernel_rem_pio2f+0x450>
 80084d8:	ed73 7a01 	vldmdb	r3!, {s15}
 80084dc:	3a01      	subs	r2, #1
 80084de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084e2:	e7d2      	b.n	800848a <__kernel_rem_pio2f+0x41e>
 80084e4:	eef0 7a47 	vmov.f32	s15, s14
 80084e8:	e7d4      	b.n	8008494 <__kernel_rem_pio2f+0x428>
 80084ea:	ecb2 7a01 	vldmia	r2!, {s14}
 80084ee:	3301      	adds	r3, #1
 80084f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084f4:	e7d6      	b.n	80084a4 <__kernel_rem_pio2f+0x438>
 80084f6:	edd1 7a00 	vldr	s15, [r1]
 80084fa:	edd1 6a01 	vldr	s13, [r1, #4]
 80084fe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008502:	3801      	subs	r0, #1
 8008504:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008508:	ed81 7a00 	vstr	s14, [r1]
 800850c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008510:	edc1 7a01 	vstr	s15, [r1, #4]
 8008514:	e799      	b.n	800844a <__kernel_rem_pio2f+0x3de>
 8008516:	edd2 7a00 	vldr	s15, [r2]
 800851a:	edd2 6a01 	vldr	s13, [r2, #4]
 800851e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008522:	3901      	subs	r1, #1
 8008524:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008528:	ed82 7a00 	vstr	s14, [r2]
 800852c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008530:	edc2 7a01 	vstr	s15, [r2, #4]
 8008534:	e78e      	b.n	8008454 <__kernel_rem_pio2f+0x3e8>
 8008536:	ed33 7a01 	vldmdb	r3!, {s14}
 800853a:	3c01      	subs	r4, #1
 800853c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008540:	e78f      	b.n	8008462 <__kernel_rem_pio2f+0x3f6>
 8008542:	eef1 6a66 	vneg.f32	s13, s13
 8008546:	eeb1 7a47 	vneg.f32	s14, s14
 800854a:	edc8 6a00 	vstr	s13, [r8]
 800854e:	ed88 7a01 	vstr	s14, [r8, #4]
 8008552:	eef1 7a67 	vneg.f32	s15, s15
 8008556:	e790      	b.n	800847a <__kernel_rem_pio2f+0x40e>

08008558 <__kernel_sinf>:
 8008558:	ee10 3a10 	vmov	r3, s0
 800855c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008560:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008564:	da04      	bge.n	8008570 <__kernel_sinf+0x18>
 8008566:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800856a:	ee17 3a90 	vmov	r3, s15
 800856e:	b35b      	cbz	r3, 80085c8 <__kernel_sinf+0x70>
 8008570:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008574:	eddf 7a15 	vldr	s15, [pc, #84]	; 80085cc <__kernel_sinf+0x74>
 8008578:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80085d0 <__kernel_sinf+0x78>
 800857c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008580:	eddf 7a14 	vldr	s15, [pc, #80]	; 80085d4 <__kernel_sinf+0x7c>
 8008584:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008588:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80085d8 <__kernel_sinf+0x80>
 800858c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008590:	eddf 7a12 	vldr	s15, [pc, #72]	; 80085dc <__kernel_sinf+0x84>
 8008594:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008598:	eee6 7a07 	vfma.f32	s15, s12, s14
 800859c:	b930      	cbnz	r0, 80085ac <__kernel_sinf+0x54>
 800859e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80085e0 <__kernel_sinf+0x88>
 80085a2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80085a6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80085aa:	4770      	bx	lr
 80085ac:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80085b0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80085b4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80085b8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80085bc:	eddf 7a09 	vldr	s15, [pc, #36]	; 80085e4 <__kernel_sinf+0x8c>
 80085c0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80085c4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	2f2ec9d3 	.word	0x2f2ec9d3
 80085d0:	b2d72f34 	.word	0xb2d72f34
 80085d4:	3638ef1b 	.word	0x3638ef1b
 80085d8:	b9500d01 	.word	0xb9500d01
 80085dc:	3c088889 	.word	0x3c088889
 80085e0:	be2aaaab 	.word	0xbe2aaaab
 80085e4:	3e2aaaab 	.word	0x3e2aaaab

080085e8 <fabs>:
 80085e8:	ec51 0b10 	vmov	r0, r1, d0
 80085ec:	ee10 2a10 	vmov	r2, s0
 80085f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80085f4:	ec43 2b10 	vmov	d0, r2, r3
 80085f8:	4770      	bx	lr
 80085fa:	0000      	movs	r0, r0
 80085fc:	0000      	movs	r0, r0
	...

08008600 <floor>:
 8008600:	ec51 0b10 	vmov	r0, r1, d0
 8008604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008608:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800860c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008610:	2e13      	cmp	r6, #19
 8008612:	ee10 5a10 	vmov	r5, s0
 8008616:	ee10 8a10 	vmov	r8, s0
 800861a:	460c      	mov	r4, r1
 800861c:	dc32      	bgt.n	8008684 <floor+0x84>
 800861e:	2e00      	cmp	r6, #0
 8008620:	da14      	bge.n	800864c <floor+0x4c>
 8008622:	a333      	add	r3, pc, #204	; (adr r3, 80086f0 <floor+0xf0>)
 8008624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008628:	f7f7 fddc 	bl	80001e4 <__adddf3>
 800862c:	2200      	movs	r2, #0
 800862e:	2300      	movs	r3, #0
 8008630:	f7f8 fa1e 	bl	8000a70 <__aeabi_dcmpgt>
 8008634:	b138      	cbz	r0, 8008646 <floor+0x46>
 8008636:	2c00      	cmp	r4, #0
 8008638:	da57      	bge.n	80086ea <floor+0xea>
 800863a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800863e:	431d      	orrs	r5, r3
 8008640:	d001      	beq.n	8008646 <floor+0x46>
 8008642:	4c2d      	ldr	r4, [pc, #180]	; (80086f8 <floor+0xf8>)
 8008644:	2500      	movs	r5, #0
 8008646:	4621      	mov	r1, r4
 8008648:	4628      	mov	r0, r5
 800864a:	e025      	b.n	8008698 <floor+0x98>
 800864c:	4f2b      	ldr	r7, [pc, #172]	; (80086fc <floor+0xfc>)
 800864e:	4137      	asrs	r7, r6
 8008650:	ea01 0307 	and.w	r3, r1, r7
 8008654:	4303      	orrs	r3, r0
 8008656:	d01f      	beq.n	8008698 <floor+0x98>
 8008658:	a325      	add	r3, pc, #148	; (adr r3, 80086f0 <floor+0xf0>)
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	f7f7 fdc1 	bl	80001e4 <__adddf3>
 8008662:	2200      	movs	r2, #0
 8008664:	2300      	movs	r3, #0
 8008666:	f7f8 fa03 	bl	8000a70 <__aeabi_dcmpgt>
 800866a:	2800      	cmp	r0, #0
 800866c:	d0eb      	beq.n	8008646 <floor+0x46>
 800866e:	2c00      	cmp	r4, #0
 8008670:	bfbe      	ittt	lt
 8008672:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008676:	fa43 f606 	asrlt.w	r6, r3, r6
 800867a:	19a4      	addlt	r4, r4, r6
 800867c:	ea24 0407 	bic.w	r4, r4, r7
 8008680:	2500      	movs	r5, #0
 8008682:	e7e0      	b.n	8008646 <floor+0x46>
 8008684:	2e33      	cmp	r6, #51	; 0x33
 8008686:	dd0b      	ble.n	80086a0 <floor+0xa0>
 8008688:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800868c:	d104      	bne.n	8008698 <floor+0x98>
 800868e:	ee10 2a10 	vmov	r2, s0
 8008692:	460b      	mov	r3, r1
 8008694:	f7f7 fda6 	bl	80001e4 <__adddf3>
 8008698:	ec41 0b10 	vmov	d0, r0, r1
 800869c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80086a4:	f04f 33ff 	mov.w	r3, #4294967295
 80086a8:	fa23 f707 	lsr.w	r7, r3, r7
 80086ac:	4207      	tst	r7, r0
 80086ae:	d0f3      	beq.n	8008698 <floor+0x98>
 80086b0:	a30f      	add	r3, pc, #60	; (adr r3, 80086f0 <floor+0xf0>)
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f7f7 fd95 	bl	80001e4 <__adddf3>
 80086ba:	2200      	movs	r2, #0
 80086bc:	2300      	movs	r3, #0
 80086be:	f7f8 f9d7 	bl	8000a70 <__aeabi_dcmpgt>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d0bf      	beq.n	8008646 <floor+0x46>
 80086c6:	2c00      	cmp	r4, #0
 80086c8:	da02      	bge.n	80086d0 <floor+0xd0>
 80086ca:	2e14      	cmp	r6, #20
 80086cc:	d103      	bne.n	80086d6 <floor+0xd6>
 80086ce:	3401      	adds	r4, #1
 80086d0:	ea25 0507 	bic.w	r5, r5, r7
 80086d4:	e7b7      	b.n	8008646 <floor+0x46>
 80086d6:	2301      	movs	r3, #1
 80086d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80086dc:	fa03 f606 	lsl.w	r6, r3, r6
 80086e0:	4435      	add	r5, r6
 80086e2:	4545      	cmp	r5, r8
 80086e4:	bf38      	it	cc
 80086e6:	18e4      	addcc	r4, r4, r3
 80086e8:	e7f2      	b.n	80086d0 <floor+0xd0>
 80086ea:	2500      	movs	r5, #0
 80086ec:	462c      	mov	r4, r5
 80086ee:	e7aa      	b.n	8008646 <floor+0x46>
 80086f0:	8800759c 	.word	0x8800759c
 80086f4:	7e37e43c 	.word	0x7e37e43c
 80086f8:	bff00000 	.word	0xbff00000
 80086fc:	000fffff 	.word	0x000fffff

08008700 <scalbn>:
 8008700:	b570      	push	{r4, r5, r6, lr}
 8008702:	ec55 4b10 	vmov	r4, r5, d0
 8008706:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800870a:	4606      	mov	r6, r0
 800870c:	462b      	mov	r3, r5
 800870e:	b99a      	cbnz	r2, 8008738 <scalbn+0x38>
 8008710:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008714:	4323      	orrs	r3, r4
 8008716:	d036      	beq.n	8008786 <scalbn+0x86>
 8008718:	4b39      	ldr	r3, [pc, #228]	; (8008800 <scalbn+0x100>)
 800871a:	4629      	mov	r1, r5
 800871c:	ee10 0a10 	vmov	r0, s0
 8008720:	2200      	movs	r2, #0
 8008722:	f7f7 ff15 	bl	8000550 <__aeabi_dmul>
 8008726:	4b37      	ldr	r3, [pc, #220]	; (8008804 <scalbn+0x104>)
 8008728:	429e      	cmp	r6, r3
 800872a:	4604      	mov	r4, r0
 800872c:	460d      	mov	r5, r1
 800872e:	da10      	bge.n	8008752 <scalbn+0x52>
 8008730:	a32b      	add	r3, pc, #172	; (adr r3, 80087e0 <scalbn+0xe0>)
 8008732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008736:	e03a      	b.n	80087ae <scalbn+0xae>
 8008738:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800873c:	428a      	cmp	r2, r1
 800873e:	d10c      	bne.n	800875a <scalbn+0x5a>
 8008740:	ee10 2a10 	vmov	r2, s0
 8008744:	4620      	mov	r0, r4
 8008746:	4629      	mov	r1, r5
 8008748:	f7f7 fd4c 	bl	80001e4 <__adddf3>
 800874c:	4604      	mov	r4, r0
 800874e:	460d      	mov	r5, r1
 8008750:	e019      	b.n	8008786 <scalbn+0x86>
 8008752:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008756:	460b      	mov	r3, r1
 8008758:	3a36      	subs	r2, #54	; 0x36
 800875a:	4432      	add	r2, r6
 800875c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008760:	428a      	cmp	r2, r1
 8008762:	dd08      	ble.n	8008776 <scalbn+0x76>
 8008764:	2d00      	cmp	r5, #0
 8008766:	a120      	add	r1, pc, #128	; (adr r1, 80087e8 <scalbn+0xe8>)
 8008768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800876c:	da1c      	bge.n	80087a8 <scalbn+0xa8>
 800876e:	a120      	add	r1, pc, #128	; (adr r1, 80087f0 <scalbn+0xf0>)
 8008770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008774:	e018      	b.n	80087a8 <scalbn+0xa8>
 8008776:	2a00      	cmp	r2, #0
 8008778:	dd08      	ble.n	800878c <scalbn+0x8c>
 800877a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800877e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008782:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008786:	ec45 4b10 	vmov	d0, r4, r5
 800878a:	bd70      	pop	{r4, r5, r6, pc}
 800878c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008790:	da19      	bge.n	80087c6 <scalbn+0xc6>
 8008792:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008796:	429e      	cmp	r6, r3
 8008798:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800879c:	dd0a      	ble.n	80087b4 <scalbn+0xb4>
 800879e:	a112      	add	r1, pc, #72	; (adr r1, 80087e8 <scalbn+0xe8>)
 80087a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e2      	bne.n	800876e <scalbn+0x6e>
 80087a8:	a30f      	add	r3, pc, #60	; (adr r3, 80087e8 <scalbn+0xe8>)
 80087aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ae:	f7f7 fecf 	bl	8000550 <__aeabi_dmul>
 80087b2:	e7cb      	b.n	800874c <scalbn+0x4c>
 80087b4:	a10a      	add	r1, pc, #40	; (adr r1, 80087e0 <scalbn+0xe0>)
 80087b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0b8      	beq.n	8008730 <scalbn+0x30>
 80087be:	a10e      	add	r1, pc, #56	; (adr r1, 80087f8 <scalbn+0xf8>)
 80087c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087c4:	e7b4      	b.n	8008730 <scalbn+0x30>
 80087c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80087ca:	3236      	adds	r2, #54	; 0x36
 80087cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80087d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80087d4:	4620      	mov	r0, r4
 80087d6:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <scalbn+0x108>)
 80087d8:	2200      	movs	r2, #0
 80087da:	e7e8      	b.n	80087ae <scalbn+0xae>
 80087dc:	f3af 8000 	nop.w
 80087e0:	c2f8f359 	.word	0xc2f8f359
 80087e4:	01a56e1f 	.word	0x01a56e1f
 80087e8:	8800759c 	.word	0x8800759c
 80087ec:	7e37e43c 	.word	0x7e37e43c
 80087f0:	8800759c 	.word	0x8800759c
 80087f4:	fe37e43c 	.word	0xfe37e43c
 80087f8:	c2f8f359 	.word	0xc2f8f359
 80087fc:	81a56e1f 	.word	0x81a56e1f
 8008800:	43500000 	.word	0x43500000
 8008804:	ffff3cb0 	.word	0xffff3cb0
 8008808:	3c900000 	.word	0x3c900000

0800880c <atanf>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	ee10 5a10 	vmov	r5, s0
 8008812:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8008816:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800881a:	eef0 7a40 	vmov.f32	s15, s0
 800881e:	db10      	blt.n	8008842 <atanf+0x36>
 8008820:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008824:	dd04      	ble.n	8008830 <atanf+0x24>
 8008826:	ee70 7a00 	vadd.f32	s15, s0, s0
 800882a:	eeb0 0a67 	vmov.f32	s0, s15
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008968 <atanf+0x15c>
 8008834:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800896c <atanf+0x160>
 8008838:	2d00      	cmp	r5, #0
 800883a:	bfd8      	it	le
 800883c:	eef0 7a40 	vmovle.f32	s15, s0
 8008840:	e7f3      	b.n	800882a <atanf+0x1e>
 8008842:	4b4b      	ldr	r3, [pc, #300]	; (8008970 <atanf+0x164>)
 8008844:	429c      	cmp	r4, r3
 8008846:	dc10      	bgt.n	800886a <atanf+0x5e>
 8008848:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800884c:	da0a      	bge.n	8008864 <atanf+0x58>
 800884e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008974 <atanf+0x168>
 8008852:	ee30 7a07 	vadd.f32	s14, s0, s14
 8008856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800885a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800885e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008862:	dce2      	bgt.n	800882a <atanf+0x1e>
 8008864:	f04f 33ff 	mov.w	r3, #4294967295
 8008868:	e013      	b.n	8008892 <atanf+0x86>
 800886a:	f000 f8a3 	bl	80089b4 <fabsf>
 800886e:	4b42      	ldr	r3, [pc, #264]	; (8008978 <atanf+0x16c>)
 8008870:	429c      	cmp	r4, r3
 8008872:	dc4f      	bgt.n	8008914 <atanf+0x108>
 8008874:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8008878:	429c      	cmp	r4, r3
 800887a:	dc41      	bgt.n	8008900 <atanf+0xf4>
 800887c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008880:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008884:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008888:	2300      	movs	r3, #0
 800888a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800888e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008892:	1c5a      	adds	r2, r3, #1
 8008894:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8008898:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800897c <atanf+0x170>
 800889c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8008980 <atanf+0x174>
 80088a0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8008984 <atanf+0x178>
 80088a4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80088a8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80088ac:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008988 <atanf+0x17c>
 80088b0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80088b4:	eddf 5a35 	vldr	s11, [pc, #212]	; 800898c <atanf+0x180>
 80088b8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80088bc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8008990 <atanf+0x184>
 80088c0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80088c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008994 <atanf+0x188>
 80088c8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80088cc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8008998 <atanf+0x18c>
 80088d0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80088d4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800899c <atanf+0x190>
 80088d8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80088dc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 80089a0 <atanf+0x194>
 80088e0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80088e4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80089a4 <atanf+0x198>
 80088e8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80088ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80088f0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80088f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80088f8:	d121      	bne.n	800893e <atanf+0x132>
 80088fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80088fe:	e794      	b.n	800882a <atanf+0x1e>
 8008900:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008904:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008908:	ee30 0a27 	vadd.f32	s0, s0, s15
 800890c:	2301      	movs	r3, #1
 800890e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008912:	e7be      	b.n	8008892 <atanf+0x86>
 8008914:	4b24      	ldr	r3, [pc, #144]	; (80089a8 <atanf+0x19c>)
 8008916:	429c      	cmp	r4, r3
 8008918:	dc0b      	bgt.n	8008932 <atanf+0x126>
 800891a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800891e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008922:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008926:	2302      	movs	r3, #2
 8008928:	ee70 6a67 	vsub.f32	s13, s0, s15
 800892c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008930:	e7af      	b.n	8008892 <atanf+0x86>
 8008932:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008936:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800893a:	2303      	movs	r3, #3
 800893c:	e7a9      	b.n	8008892 <atanf+0x86>
 800893e:	4a1b      	ldr	r2, [pc, #108]	; (80089ac <atanf+0x1a0>)
 8008940:	491b      	ldr	r1, [pc, #108]	; (80089b0 <atanf+0x1a4>)
 8008942:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008946:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800894a:	ed93 0a00 	vldr	s0, [r3]
 800894e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8008952:	ed92 0a00 	vldr	s0, [r2]
 8008956:	ee77 7a67 	vsub.f32	s15, s14, s15
 800895a:	2d00      	cmp	r5, #0
 800895c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8008960:	bfb8      	it	lt
 8008962:	eef1 7a67 	vneglt.f32	s15, s15
 8008966:	e760      	b.n	800882a <atanf+0x1e>
 8008968:	3fc90fdb 	.word	0x3fc90fdb
 800896c:	bfc90fdb 	.word	0xbfc90fdb
 8008970:	3edfffff 	.word	0x3edfffff
 8008974:	7149f2ca 	.word	0x7149f2ca
 8008978:	3f97ffff 	.word	0x3f97ffff
 800897c:	3c8569d7 	.word	0x3c8569d7
 8008980:	3d4bda59 	.word	0x3d4bda59
 8008984:	bd6ef16b 	.word	0xbd6ef16b
 8008988:	3d886b35 	.word	0x3d886b35
 800898c:	3dba2e6e 	.word	0x3dba2e6e
 8008990:	3e124925 	.word	0x3e124925
 8008994:	3eaaaaab 	.word	0x3eaaaaab
 8008998:	bd15a221 	.word	0xbd15a221
 800899c:	bd9d8795 	.word	0xbd9d8795
 80089a0:	bde38e38 	.word	0xbde38e38
 80089a4:	be4ccccd 	.word	0xbe4ccccd
 80089a8:	401bffff 	.word	0x401bffff
 80089ac:	08009140 	.word	0x08009140
 80089b0:	08009150 	.word	0x08009150

080089b4 <fabsf>:
 80089b4:	ee10 3a10 	vmov	r3, s0
 80089b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089bc:	ee00 3a10 	vmov	s0, r3
 80089c0:	4770      	bx	lr
	...

080089c4 <floorf>:
 80089c4:	ee10 3a10 	vmov	r3, s0
 80089c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80089cc:	3a7f      	subs	r2, #127	; 0x7f
 80089ce:	2a16      	cmp	r2, #22
 80089d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80089d4:	dc2a      	bgt.n	8008a2c <floorf+0x68>
 80089d6:	2a00      	cmp	r2, #0
 80089d8:	da11      	bge.n	80089fe <floorf+0x3a>
 80089da:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008a3c <floorf+0x78>
 80089de:	ee30 0a27 	vadd.f32	s0, s0, s15
 80089e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80089e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ea:	dd05      	ble.n	80089f8 <floorf+0x34>
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	da23      	bge.n	8008a38 <floorf+0x74>
 80089f0:	4a13      	ldr	r2, [pc, #76]	; (8008a40 <floorf+0x7c>)
 80089f2:	2900      	cmp	r1, #0
 80089f4:	bf18      	it	ne
 80089f6:	4613      	movne	r3, r2
 80089f8:	ee00 3a10 	vmov	s0, r3
 80089fc:	4770      	bx	lr
 80089fe:	4911      	ldr	r1, [pc, #68]	; (8008a44 <floorf+0x80>)
 8008a00:	4111      	asrs	r1, r2
 8008a02:	420b      	tst	r3, r1
 8008a04:	d0fa      	beq.n	80089fc <floorf+0x38>
 8008a06:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8008a3c <floorf+0x78>
 8008a0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a16:	ddef      	ble.n	80089f8 <floorf+0x34>
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bfbe      	ittt	lt
 8008a1c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8008a20:	fa40 f202 	asrlt.w	r2, r0, r2
 8008a24:	189b      	addlt	r3, r3, r2
 8008a26:	ea23 0301 	bic.w	r3, r3, r1
 8008a2a:	e7e5      	b.n	80089f8 <floorf+0x34>
 8008a2c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8008a30:	d3e4      	bcc.n	80089fc <floorf+0x38>
 8008a32:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008a36:	4770      	bx	lr
 8008a38:	2300      	movs	r3, #0
 8008a3a:	e7dd      	b.n	80089f8 <floorf+0x34>
 8008a3c:	7149f2ca 	.word	0x7149f2ca
 8008a40:	bf800000 	.word	0xbf800000
 8008a44:	007fffff 	.word	0x007fffff

08008a48 <scalbnf>:
 8008a48:	ee10 3a10 	vmov	r3, s0
 8008a4c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008a50:	d025      	beq.n	8008a9e <scalbnf+0x56>
 8008a52:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008a56:	d302      	bcc.n	8008a5e <scalbnf+0x16>
 8008a58:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008a5c:	4770      	bx	lr
 8008a5e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8008a62:	d122      	bne.n	8008aaa <scalbnf+0x62>
 8008a64:	4b2a      	ldr	r3, [pc, #168]	; (8008b10 <scalbnf+0xc8>)
 8008a66:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008b14 <scalbnf+0xcc>
 8008a6a:	4298      	cmp	r0, r3
 8008a6c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008a70:	db16      	blt.n	8008aa0 <scalbnf+0x58>
 8008a72:	ee10 3a10 	vmov	r3, s0
 8008a76:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008a7a:	3a19      	subs	r2, #25
 8008a7c:	4402      	add	r2, r0
 8008a7e:	2afe      	cmp	r2, #254	; 0xfe
 8008a80:	dd15      	ble.n	8008aae <scalbnf+0x66>
 8008a82:	ee10 3a10 	vmov	r3, s0
 8008a86:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008b18 <scalbnf+0xd0>
 8008a8a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008b1c <scalbnf+0xd4>
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	eeb0 7a67 	vmov.f32	s14, s15
 8008a94:	bfb8      	it	lt
 8008a96:	eef0 7a66 	vmovlt.f32	s15, s13
 8008a9a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8008a9e:	4770      	bx	lr
 8008aa0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008b20 <scalbnf+0xd8>
 8008aa4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008aa8:	4770      	bx	lr
 8008aaa:	0dd2      	lsrs	r2, r2, #23
 8008aac:	e7e6      	b.n	8008a7c <scalbnf+0x34>
 8008aae:	2a00      	cmp	r2, #0
 8008ab0:	dd06      	ble.n	8008ac0 <scalbnf+0x78>
 8008ab2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ab6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008aba:	ee00 3a10 	vmov	s0, r3
 8008abe:	4770      	bx	lr
 8008ac0:	f112 0f16 	cmn.w	r2, #22
 8008ac4:	da1a      	bge.n	8008afc <scalbnf+0xb4>
 8008ac6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008aca:	4298      	cmp	r0, r3
 8008acc:	ee10 3a10 	vmov	r3, s0
 8008ad0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ad4:	dd0a      	ble.n	8008aec <scalbnf+0xa4>
 8008ad6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008b18 <scalbnf+0xd0>
 8008ada:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008b1c <scalbnf+0xd4>
 8008ade:	eef0 7a40 	vmov.f32	s15, s0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	bf18      	it	ne
 8008ae6:	eeb0 0a47 	vmovne.f32	s0, s14
 8008aea:	e7db      	b.n	8008aa4 <scalbnf+0x5c>
 8008aec:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008b20 <scalbnf+0xd8>
 8008af0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008b24 <scalbnf+0xdc>
 8008af4:	eef0 7a40 	vmov.f32	s15, s0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	e7f3      	b.n	8008ae4 <scalbnf+0x9c>
 8008afc:	3219      	adds	r2, #25
 8008afe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b02:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008b06:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008b28 <scalbnf+0xe0>
 8008b0a:	ee07 3a10 	vmov	s14, r3
 8008b0e:	e7c4      	b.n	8008a9a <scalbnf+0x52>
 8008b10:	ffff3cb0 	.word	0xffff3cb0
 8008b14:	4c000000 	.word	0x4c000000
 8008b18:	7149f2ca 	.word	0x7149f2ca
 8008b1c:	f149f2ca 	.word	0xf149f2ca
 8008b20:	0da24260 	.word	0x0da24260
 8008b24:	8da24260 	.word	0x8da24260
 8008b28:	33000000 	.word	0x33000000

08008b2c <_init>:
 8008b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2e:	bf00      	nop
 8008b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b32:	bc08      	pop	{r3}
 8008b34:	469e      	mov	lr, r3
 8008b36:	4770      	bx	lr

08008b38 <_fini>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr
